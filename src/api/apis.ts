export var __esModule = true;
import querystring from "querystring";
import fetch from "isomorphic-fetch";
import assign_1 from "./assign";
const AccountingBatchesApi = ((() => {
	class AccountingBatchesApi {
		basePath: string;
		defaultHeaders: {};
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Batches Count
         * @param conditions
         */
		financeAccountingBatchesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/accounting/batches/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Batches
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAccountingBatchesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/accounting/batches`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Batch By Id
         * @param id
         */
		financeAccountingBatchesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/accounting/batches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAccountingBatchesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Re-export the payload data from an existing batch (RecreateBatch in SOAP)
         * @param id
         * @param batchExportParameters
         */
		financeAccountingBatchesIdExportPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/accounting/batches/{id}/export'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAccountingBatchesIdExportPost');
			}
			// verify required parameter 'batchExportParameters' is set
			if (params.batchExportParameters == null) {
				throw new Error('Missing required parameter batchExportParameters when calling financeAccountingBatchesIdExportPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.batchExportParameters)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Batch By Id
         * @param id
         */
		financeAccountingBatchesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/accounting/batches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAccountingBatchesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Creates the Accounting Batch and updates GL Records (UpdateBatch in SOAP)
         * @param accountingBatchParameters
         */
		financeAccountingBatchesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/accounting/batches`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'accountingBatchParameters' is set
			if (params.accountingBatchParameters == null) {
				throw new Error('Missing required parameter accountingBatchParameters when calling financeAccountingBatchesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.accountingBatchParameters)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Exports accouting batch payload based on parameters (CreateBatch in SOAP)
         * @param batchExportParameters
         */
		financeAccountingExportPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/accounting/export`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'batchExportParameters' is set
			if (params.batchExportParameters == null) {
				throw new Error('Missing required parameter batchExportParameters when calling financeAccountingExportPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.batchExportParameters)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AccountingBatchesApi;
})());
export { AccountingBatchesApi };
const AccountingUnpostedExpensesApi = ((() => {
	class AccountingUnpostedExpensesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Unposted Expenses Count
         * @param conditions
         */
		financeAccountingUnpostedexpensesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/accounting/unpostedexpenses/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Unposted Expenses
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAccountingUnpostedexpensesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/accounting/unpostedexpenses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Unposted Expense By Id
         * @param id
         */
		financeAccountingUnpostedexpensesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/accounting/unpostedexpenses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAccountingUnpostedexpensesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AccountingUnpostedExpensesApi;
})());
export { AccountingUnpostedExpensesApi };
const AccountingUnpostedProcurementsApi = ((() => {
	class AccountingUnpostedProcurementsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Unposted Procurements Count
         * @param conditions
         */
		financeAccountingUnpostedprocurementCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/accounting/unpostedprocurement/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Unposted Procurements
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAccountingUnpostedprocurementGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/accounting/unpostedprocurement`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Unposted Procurement By Id
         * @param id
         */
		financeAccountingUnpostedprocurementIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/accounting/unpostedprocurement/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAccountingUnpostedprocurementIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AccountingUnpostedProcurementsApi;
})());
export { AccountingUnpostedProcurementsApi };
const AccountingUnpostedinvoicesApi = ((() => {
	class AccountingUnpostedinvoicesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Unposted Invoices Count
         * @param conditions
         */
		financeAccountingUnpostedinvoicesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/accounting/unpostedinvoices/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Unposted Invoices
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAccountingUnpostedinvoicesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/accounting/unpostedinvoices`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Unposted Invoice By Id
         * @param id
         */
		financeAccountingUnpostedinvoicesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/accounting/unpostedinvoices/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAccountingUnpostedinvoicesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AccountingUnpostedinvoicesApi;
})());
export { AccountingUnpostedinvoicesApi };
const ActivitiesApi = ((() => {
	class ActivitiesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Activities Count
         * @param conditions
         * @param customFieldConditions
         */
		salesActivitiesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/activities/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Activities
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesActivitiesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/activities`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Activity By Id
         * @param id
         */
		salesActivitiesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Activity By Id
         * @param id
         */
		salesActivitiesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Activity
         * @param id
         * @param operations
         */
		salesActivitiesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesActivitiesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Activity
         * @param id
         * @param activity
         */
		salesActivitiesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesIdPut');
			}
			// verify required parameter 'activity' is set
			if (params.activity == null) {
				throw new Error('Missing required parameter activity when calling salesActivitiesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.activity)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Activity
         * @param activity
         */
		salesActivitiesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/activities`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'activity' is set
			if (params.activity == null) {
				throw new Error('Missing required parameter activity when calling salesActivitiesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.activity)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ActivitiesApi;
})());
export { ActivitiesApi };
const ActivityStatusesApi = ((() => {
	class ActivityStatusesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Activity Statuses Count
         * @param conditions
         */
		salesActivitiesStatusesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/activities/statuses/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Activity Statuses
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesActivitiesStatusesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/activities/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Activity Status By Id
         * @param id
         */
		salesActivitiesStatusesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesStatusesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Activity Status By Id
         * @param id
         */
		salesActivitiesStatusesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesStatusesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Activity Status
         * @param id
         * @param operations
         */
		salesActivitiesStatusesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesStatusesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesActivitiesStatusesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Activity Status
         * @param id
         * @param activityStatus
         */
		salesActivitiesStatusesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesStatusesIdPut');
			}
			// verify required parameter 'activityStatus' is set
			if (params.activityStatus == null) {
				throw new Error('Missing required parameter activityStatus when calling salesActivitiesStatusesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.activityStatus)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Activity Status
         * @param activityStatus
         */
		salesActivitiesStatusesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/activities/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'activityStatus' is set
			if (params.activityStatus == null) {
				throw new Error('Missing required parameter activityStatus when calling salesActivitiesStatusesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.activityStatus)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ActivityStatusesApi;
})());
export { ActivityStatusesApi };
const ActivityStopwatchesApi = ((() => {
	class ActivityStopwatchesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Activity Stopwatches Count
         * @param conditions
         */
		timeActivitystopwatchesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/activitystopwatches/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Activity Stopwatches
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		timeActivitystopwatchesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/activitystopwatches`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Activity Stopwatch By Id
         * @param id
         */
		timeActivitystopwatchesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/activitystopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeActivitystopwatchesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Activity Stopwatch By Id
         * @param id
         */
		timeActivitystopwatchesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/activitystopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeActivitystopwatchesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Activity Stopwatch
         * @param id
         * @param operations
         */
		timeActivitystopwatchesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/activitystopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeActivitystopwatchesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling timeActivitystopwatchesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Activity Stopwatch
         * @param id
         * @param activityStopwatch
         */
		timeActivitystopwatchesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/activitystopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeActivitystopwatchesIdPut');
			}
			// verify required parameter 'activityStopwatch' is set
			if (params.activityStopwatch == null) {
				throw new Error('Missing required parameter activityStopwatch when calling timeActivitystopwatchesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.activityStopwatch)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Activity Stopwatch
         * @param activityStopwatch
         */
		timeActivitystopwatchesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/activitystopwatches`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'activityStopwatch' is set
			if (params.activityStopwatch == null) {
				throw new Error('Missing required parameter activityStopwatch when calling timeActivitystopwatchesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.activityStopwatch)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ActivityStopwatchesApi;
})());
export { ActivityStopwatchesApi };
const ActivityTypesApi = ((() => {
	class ActivityTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Activity Types Count
         * @param conditions
         */
		salesActivitiesTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/activities/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Activity Types
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesActivitiesTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/activities/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Activity Type By Id
         * @param id
         */
		salesActivitiesTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Activity Type By Id
         * @param id
         */
		salesActivitiesTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Activity Type
         * @param id
         * @param operations
         */
		salesActivitiesTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesActivitiesTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Activity Type
         * @param id
         * @param activityType
         */
		salesActivitiesTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/activities/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesActivitiesTypesIdPut');
			}
			// verify required parameter 'activityType' is set
			if (params.activityType == null) {
				throw new Error('Missing required parameter activityType when calling salesActivitiesTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.activityType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Activity Type
         * @param activityType
         */
		salesActivitiesTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/activities/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'activityType' is set
			if (params.activityType == null) {
				throw new Error('Missing required parameter activityType when calling salesActivitiesTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.activityType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ActivityTypesApi;
})());
export { ActivityTypesApi };
const AdjustmentDetailsApi = ((() => {
	class AdjustmentDetailsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Adjustment Detail Count
         * @param id
         * @param conditions
         */
		procurementAdjustmentsIdDetailsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/{id}/details/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDetailsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Adjustment Detail By Id
         * @param id
         * @param detailId
         */
		procurementAdjustmentsIdDetailsDetailIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/{id}/details/{detailId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'detailId' + '}', String(params.detailId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDetailsDetailIdDelete');
			}
			// verify required parameter 'detailId' is set
			if (params.detailId == null) {
				throw new Error('Missing required parameter detailId when calling procurementAdjustmentsIdDetailsDetailIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Adjustment Detail By Id
         * @param id
         * @param detailId
         */
		procurementAdjustmentsIdDetailsDetailIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/{id}/details/{detailId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'detailId' + '}', String(params.detailId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDetailsDetailIdGet');
			}
			// verify required parameter 'detailId' is set
			if (params.detailId == null) {
				throw new Error('Missing required parameter detailId when calling procurementAdjustmentsIdDetailsDetailIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Adjustment Detail
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementAdjustmentsIdDetailsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/{id}/details'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDetailsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Adjustment Detail
         * @param id
         * @param adjustmentDetail
         */
		procurementAdjustmentsIdDetailsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/{id}/details'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDetailsPost');
			}
			// verify required parameter 'adjustmentDetail' is set
			if (params.adjustmentDetail == null) {
				throw new Error('Missing required parameter adjustmentDetail when calling procurementAdjustmentsIdDetailsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.adjustmentDetail)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AdjustmentDetailsApi;
})());
export { AdjustmentDetailsApi };
const AdjustmentTypesApi = ((() => {
	class AdjustmentTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Adjustment Types Count
         * @param conditions
         */
		procurementAdjustmentsTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/adjustments/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Adjustment Types
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementAdjustmentsTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/adjustments/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Adjustment Types By Id
         * @param id
         */
		procurementAdjustmentsTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Adjustment Types By Id
         * @param id
         */
		procurementAdjustmentsTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Adjustment Types
         * @param id
         * @param operations
         */
		procurementAdjustmentsTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementAdjustmentsTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Adjustment Types
         * @param id
         * @param adjustmentTypes
         */
		procurementAdjustmentsTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsTypesIdPut');
			}
			// verify required parameter 'adjustmentTypes' is set
			if (params.adjustmentTypes == null) {
				throw new Error('Missing required parameter adjustmentTypes when calling procurementAdjustmentsTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.adjustmentTypes)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Adjustment Types
         * @param adjustmentTypes
         */
		procurementAdjustmentsTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/adjustments/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'adjustmentTypes' is set
			if (params.adjustmentTypes == null) {
				throw new Error('Missing required parameter adjustmentTypes when calling procurementAdjustmentsTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.adjustmentTypes)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AdjustmentTypesApi;
})());
export { AdjustmentTypesApi };
const AdjustmentsApi = ((() => {
	class AdjustmentsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Adjustment Count
         * @param conditions
         */
		procurementAdjustmentsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/adjustments/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Adjustment
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementAdjustmentsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/adjustments`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Adjustment By Id
         * @param id
         */
		procurementAdjustmentsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Adjustment By Id
         * @param id
         */
		procurementAdjustmentsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Adjustment
         * @param id
         * @param operations
         */
		procurementAdjustmentsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementAdjustmentsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Adjustment
         * @param id
         * @param adjustment
         */
		procurementAdjustmentsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/adjustments/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementAdjustmentsIdPut');
			}
			// verify required parameter 'adjustment' is set
			if (params.adjustment == null) {
				throw new Error('Missing required parameter adjustment when calling procurementAdjustmentsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.adjustment)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Adjustment
         * @param adjustment
         */
		procurementAdjustmentsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/adjustments`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'adjustment' is set
			if (params.adjustment == null) {
				throw new Error('Missing required parameter adjustment when calling procurementAdjustmentsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.adjustment)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AdjustmentsApi;
})());
export { AdjustmentsApi };
const AgreementAdditionsApi = ((() => {
	class AgreementAdditionsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Addition By Id
         * @param id
         * @param additionId
         */
		financeAgreementsIdAdditionsAdditionIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/additions/{additionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'additionId' + '}', String(params.additionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsAdditionIdDelete');
			}
			// verify required parameter 'additionId' is set
			if (params.additionId == null) {
				throw new Error('Missing required parameter additionId when calling financeAgreementsIdAdditionsAdditionIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Addition By Id
         * @param id
         * @param additionId
         */
		financeAgreementsIdAdditionsAdditionIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/additions/{additionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'additionId' + '}', String(params.additionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsAdditionIdGet');
			}
			// verify required parameter 'additionId' is set
			if (params.additionId == null) {
				throw new Error('Missing required parameter additionId when calling financeAgreementsIdAdditionsAdditionIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Addition
         * @param id
         * @param additionId
         * @param operations
         */
		financeAgreementsIdAdditionsAdditionIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/additions/{additionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'additionId' + '}', String(params.additionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsAdditionIdPatch');
			}
			// verify required parameter 'additionId' is set
			if (params.additionId == null) {
				throw new Error('Missing required parameter additionId when calling financeAgreementsIdAdditionsAdditionIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeAgreementsIdAdditionsAdditionIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Addition
         * @param id
         * @param additionId
         * @param addition
         */
		financeAgreementsIdAdditionsAdditionIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/additions/{additionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'additionId' + '}', String(params.additionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsAdditionIdPut');
			}
			// verify required parameter 'additionId' is set
			if (params.additionId == null) {
				throw new Error('Missing required parameter additionId when calling financeAgreementsIdAdditionsAdditionIdPut');
			}
			// verify required parameter 'addition' is set
			if (params.addition == null) {
				throw new Error('Missing required parameter addition when calling financeAgreementsIdAdditionsAdditionIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.addition)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Additions Count
         * @param id
         * @param conditions
         * @param customFieldConditions
         */
		financeAgreementsIdAdditionsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/additions/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Additions
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAgreementsIdAdditionsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/additions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Addition
         * @param id
         * @param addition
         */
		financeAgreementsIdAdditionsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/additions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsPost');
			}
			// verify required parameter 'addition' is set
			if (params.addition == null) {
				throw new Error('Missing required parameter addition when calling financeAgreementsIdAdditionsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.addition)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AgreementAdditionsApi;
})());
export { AgreementAdditionsApi };
const AgreementAdjustmentsApi = ((() => {
	class AgreementAdjustmentsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Adjustment By Id
         * @param id
         * @param adjustmentId
         */
		financeAgreementsIdAdjustmentsAdjustmentIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/adjustments/{adjustmentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'adjustmentId' + '}', String(params.adjustmentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsAdjustmentIdDelete');
			}
			// verify required parameter 'adjustmentId' is set
			if (params.adjustmentId == null) {
				throw new Error('Missing required parameter adjustmentId when calling financeAgreementsIdAdjustmentsAdjustmentIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Adjustment By Id
         * @param id
         * @param adjustmentId
         */
		financeAgreementsIdAdjustmentsAdjustmentIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/adjustments/{adjustmentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'adjustmentId' + '}', String(params.adjustmentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsAdjustmentIdGet');
			}
			// verify required parameter 'adjustmentId' is set
			if (params.adjustmentId == null) {
				throw new Error('Missing required parameter adjustmentId when calling financeAgreementsIdAdjustmentsAdjustmentIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Adjustment
         * @param id
         * @param adjustmentId
         * @param operations
         */
		financeAgreementsIdAdjustmentsAdjustmentIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/adjustments/{adjustmentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'adjustmentId' + '}', String(params.adjustmentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsAdjustmentIdPatch');
			}
			// verify required parameter 'adjustmentId' is set
			if (params.adjustmentId == null) {
				throw new Error('Missing required parameter adjustmentId when calling financeAgreementsIdAdjustmentsAdjustmentIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeAgreementsIdAdjustmentsAdjustmentIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Adjustment
         * @param id
         * @param adjustmentId
         * @param adjustment
         */
		financeAgreementsIdAdjustmentsAdjustmentIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/adjustments/{adjustmentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'adjustmentId' + '}', String(params.adjustmentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsAdjustmentIdPut');
			}
			// verify required parameter 'adjustmentId' is set
			if (params.adjustmentId == null) {
				throw new Error('Missing required parameter adjustmentId when calling financeAgreementsIdAdjustmentsAdjustmentIdPut');
			}
			// verify required parameter 'adjustment' is set
			if (params.adjustment == null) {
				throw new Error('Missing required parameter adjustment when calling financeAgreementsIdAdjustmentsAdjustmentIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.adjustment)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Adjustments Count
         * @param id
         * @param conditions
         * @param customFieldConditions
         */
		financeAgreementsIdAdjustmentsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/adjustments/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Adjustments
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAgreementsIdAdjustmentsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/adjustments'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Adjustment
         * @param id
         * @param adjustment
         */
		financeAgreementsIdAdjustmentsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/adjustments'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsPost');
			}
			// verify required parameter 'adjustment' is set
			if (params.adjustment == null) {
				throw new Error('Missing required parameter adjustment when calling financeAgreementsIdAdjustmentsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.adjustment)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AgreementAdjustmentsApi;
})());
export { AgreementAdjustmentsApi };
const AgreementBoardDefaultsApi = ((() => {
	class AgreementBoardDefaultsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Board Default By Id
         * @param id
         * @param boardDefaultId
         */
		financeAgreementsIdBoardDefaultsBoardDefaultIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults/{boardDefaultId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'boardDefaultId' + '}', String(params.boardDefaultId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsBoardDefaultIdDelete');
			}
			// verify required parameter 'boardDefaultId' is set
			if (params.boardDefaultId == null) {
				throw new Error('Missing required parameter boardDefaultId when calling financeAgreementsIdBoardDefaultsBoardDefaultIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Board Default By Id
         * @param id
         * @param boardDefaultId
         */
		financeAgreementsIdBoardDefaultsBoardDefaultIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults/{boardDefaultId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'boardDefaultId' + '}', String(params.boardDefaultId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsBoardDefaultIdGet');
			}
			// verify required parameter 'boardDefaultId' is set
			if (params.boardDefaultId == null) {
				throw new Error('Missing required parameter boardDefaultId when calling financeAgreementsIdBoardDefaultsBoardDefaultIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Board Default
         * @param id
         * @param boardDefaultId
         * @param operations
         */
		financeAgreementsIdBoardDefaultsBoardDefaultIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults/{boardDefaultId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'boardDefaultId' + '}', String(params.boardDefaultId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPatch');
			}
			// verify required parameter 'boardDefaultId' is set
			if (params.boardDefaultId == null) {
				throw new Error('Missing required parameter boardDefaultId when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Board Default
         * @param id
         * @param boardDefaultId
         * @param boardDefault
         */
		financeAgreementsIdBoardDefaultsBoardDefaultIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults/{boardDefaultId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'boardDefaultId' + '}', String(params.boardDefaultId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPut');
			}
			// verify required parameter 'boardDefaultId' is set
			if (params.boardDefaultId == null) {
				throw new Error('Missing required parameter boardDefaultId when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPut');
			}
			// verify required parameter 'boardDefault' is set
			if (params.boardDefault == null) {
				throw new Error('Missing required parameter boardDefault when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.boardDefault)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Board Defaults Count
         * @param id
         * @param conditions
         */
		financeAgreementsIdBoardDefaultsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Board Defaults
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAgreementsIdBoardDefaultsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Board Default
         * @param id
         * @param boardDefault
         */
		financeAgreementsIdBoardDefaultsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsPost');
			}
			// verify required parameter 'boardDefault' is set
			if (params.boardDefault == null) {
				throw new Error('Missing required parameter boardDefault when calling financeAgreementsIdBoardDefaultsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.boardDefault)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AgreementBoardDefaultsApi;
})());
export { AgreementBoardDefaultsApi };
const AgreementSitesApi = ((() => {
	class AgreementSitesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Sites Count
         * @param id
         * @param conditions
         */
		financeAgreementsIdSitesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/sites/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdSitesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Sites
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAgreementsIdSitesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/sites'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdSitesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Site
         * @param id
         * @param site
         */
		financeAgreementsIdSitesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/sites'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdSitesPost');
			}
			// verify required parameter 'site' is set
			if (params.site == null) {
				throw new Error('Missing required parameter site when calling financeAgreementsIdSitesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.site)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Site By Id
         * @param id
         * @param siteId
         */
		financeAgreementsIdSitesSiteIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/sites/{siteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'siteId' + '}', String(params.siteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdSitesSiteIdDelete');
			}
			// verify required parameter 'siteId' is set
			if (params.siteId == null) {
				throw new Error('Missing required parameter siteId when calling financeAgreementsIdSitesSiteIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Site By Id
         * @param id
         * @param siteId
         */
		financeAgreementsIdSitesSiteIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/sites/{siteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'siteId' + '}', String(params.siteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdSitesSiteIdGet');
			}
			// verify required parameter 'siteId' is set
			if (params.siteId == null) {
				throw new Error('Missing required parameter siteId when calling financeAgreementsIdSitesSiteIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Site
         * @param id
         * @param siteId
         * @param operations
         */
		financeAgreementsIdSitesSiteIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/sites/{siteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'siteId' + '}', String(params.siteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdSitesSiteIdPatch');
			}
			// verify required parameter 'siteId' is set
			if (params.siteId == null) {
				throw new Error('Missing required parameter siteId when calling financeAgreementsIdSitesSiteIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeAgreementsIdSitesSiteIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Site
         * @param id
         * @param siteId
         * @param site
         */
		financeAgreementsIdSitesSiteIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/sites/{siteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'siteId' + '}', String(params.siteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdSitesSiteIdPut');
			}
			// verify required parameter 'siteId' is set
			if (params.siteId == null) {
				throw new Error('Missing required parameter siteId when calling financeAgreementsIdSitesSiteIdPut');
			}
			// verify required parameter 'site' is set
			if (params.site == null) {
				throw new Error('Missing required parameter site when calling financeAgreementsIdSitesSiteIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.site)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AgreementSitesApi;
})());
export { AgreementSitesApi };
const AgreementTypesApi = ((() => {
	class AgreementTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Agreement Types Count
         * @param conditions
         */
		financeAgreementsTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/agreements/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Agreement Types
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAgreementsTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/agreements/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Agreement Type By Id
         * @param id
         */
		financeAgreementsTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Agreement Type By Id
         * @param id
         */
		financeAgreementsTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Agreement Type
         * @param id
         * @param operations
         */
		financeAgreementsTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeAgreementsTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Agreement Type
         * @param id
         * @param agreementType
         */
		financeAgreementsTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsTypesIdPut');
			}
			// verify required parameter 'agreementType' is set
			if (params.agreementType == null) {
				throw new Error('Missing required parameter agreementType when calling financeAgreementsTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.agreementType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Agreement Type
         * @param agreementType
         */
		financeAgreementsTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/agreements/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'agreementType' is set
			if (params.agreementType == null) {
				throw new Error('Missing required parameter agreementType when calling financeAgreementsTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.agreementType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AgreementTypesApi;
})());
export { AgreementTypesApi };
const AgreementWorkRoleExclusionsApi = ((() => {
	class AgreementWorkRoleExclusionsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Work Role Exclusions Count
         * @param id
         * @param conditions
         */
		financeAgreementsIdWorkRoleExclusionsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workRoleExclusions/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkRoleExclusionsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Work Role Exclusions
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAgreementsIdWorkRoleExclusionsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workRoleExclusions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkRoleExclusionsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Work Role Exclusion
         * @param id
         * @param workRoleExclusion
         */
		financeAgreementsIdWorkRoleExclusionsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workRoleExclusions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkRoleExclusionsPost');
			}
			// verify required parameter 'workRoleExclusion' is set
			if (params.workRoleExclusion == null) {
				throw new Error('Missing required parameter workRoleExclusion when calling financeAgreementsIdWorkRoleExclusionsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.workRoleExclusion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Work Role Exclusion By Id
         * @param id
         * @param workRoleExclusionId
         */
		financeAgreementsIdWorkRoleExclusionsWorkRoleExclusionIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workRoleExclusions/{workRoleExclusionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'workRoleExclusionId' + '}', String(params.workRoleExclusionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkRoleExclusionsWorkRoleExclusionIdDelete');
			}
			// verify required parameter 'workRoleExclusionId' is set
			if (params.workRoleExclusionId == null) {
				throw new Error('Missing required parameter workRoleExclusionId when calling financeAgreementsIdWorkRoleExclusionsWorkRoleExclusionIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AgreementWorkRoleExclusionsApi;
})());
export { AgreementWorkRoleExclusionsApi };
const AgreementWorkRolesApi = ((() => {
	class AgreementWorkRolesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Work Roles Count
         * @param id
         * @param conditions
         */
		financeAgreementsIdWorkrolesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workroles/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Work Roles
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAgreementsIdWorkrolesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workroles'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Work Role
         * @param id
         * @param workRole
         */
		financeAgreementsIdWorkrolesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workroles'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesPost');
			}
			// verify required parameter 'workRole' is set
			if (params.workRole == null) {
				throw new Error('Missing required parameter workRole when calling financeAgreementsIdWorkrolesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.workRole)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Work Role By Id
         * @param id
         * @param workRoleId
         */
		financeAgreementsIdWorkrolesWorkRoleIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workroles/{workRoleId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'workRoleId' + '}', String(params.workRoleId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesWorkRoleIdDelete');
			}
			// verify required parameter 'workRoleId' is set
			if (params.workRoleId == null) {
				throw new Error('Missing required parameter workRoleId when calling financeAgreementsIdWorkrolesWorkRoleIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Work Role By Id
         * @param id
         * @param workRoleId
         */
		financeAgreementsIdWorkrolesWorkRoleIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workroles/{workRoleId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'workRoleId' + '}', String(params.workRoleId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesWorkRoleIdGet');
			}
			// verify required parameter 'workRoleId' is set
			if (params.workRoleId == null) {
				throw new Error('Missing required parameter workRoleId when calling financeAgreementsIdWorkrolesWorkRoleIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Work Role
         * @param id
         * @param workRoleId
         * @param operations
         */
		financeAgreementsIdWorkrolesWorkRoleIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workroles/{workRoleId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'workRoleId' + '}', String(params.workRoleId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesWorkRoleIdPatch');
			}
			// verify required parameter 'workRoleId' is set
			if (params.workRoleId == null) {
				throw new Error('Missing required parameter workRoleId when calling financeAgreementsIdWorkrolesWorkRoleIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeAgreementsIdWorkrolesWorkRoleIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Work Role
         * @param id
         * @param workRoleId
         * @param workRole
         */
		financeAgreementsIdWorkrolesWorkRoleIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workroles/{workRoleId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'workRoleId' + '}', String(params.workRoleId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesWorkRoleIdPut');
			}
			// verify required parameter 'workRoleId' is set
			if (params.workRoleId == null) {
				throw new Error('Missing required parameter workRoleId when calling financeAgreementsIdWorkrolesWorkRoleIdPut');
			}
			// verify required parameter 'workRole' is set
			if (params.workRole == null) {
				throw new Error('Missing required parameter workRole when calling financeAgreementsIdWorkrolesWorkRoleIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.workRole)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AgreementWorkRolesApi;
})());
export { AgreementWorkRolesApi };
const AgreementWorkTypeExclusionsApi = ((() => {
	class AgreementWorkTypeExclusionsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Work Type Exclusions Count
         * @param id
         * @param conditions
         */
		financeAgreementsIdWorkTypeExclusionsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workTypeExclusions/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkTypeExclusionsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Work Type Exclusions
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAgreementsIdWorkTypeExclusionsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workTypeExclusions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkTypeExclusionsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Work Type Exclusion
         * @param id
         * @param workTypeExclusion
         */
		financeAgreementsIdWorkTypeExclusionsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workTypeExclusions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkTypeExclusionsPost');
			}
			// verify required parameter 'workTypeExclusion' is set
			if (params.workTypeExclusion == null) {
				throw new Error('Missing required parameter workTypeExclusion when calling financeAgreementsIdWorkTypeExclusionsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.workTypeExclusion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Work Type Exclusion By Id
         * @param id
         * @param workTypeExclusionId
         */
		financeAgreementsIdWorkTypeExclusionsWorkTypeExclusionIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/workTypeExclusions/{workTypeExclusionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'workTypeExclusionId' + '}', String(params.workTypeExclusionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorkTypeExclusionsWorkTypeExclusionIdDelete');
			}
			// verify required parameter 'workTypeExclusionId' is set
			if (params.workTypeExclusionId == null) {
				throw new Error('Missing required parameter workTypeExclusionId when calling financeAgreementsIdWorkTypeExclusionsWorkTypeExclusionIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AgreementWorkTypeExclusionsApi;
})());
export { AgreementWorkTypeExclusionsApi };
const AgreementWorkTypesApi = ((() => {
	class AgreementWorkTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Work Types Count
         * @param id
         * @param conditions
         */
		financeAgreementsIdWorktypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/worktypes/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Work Types
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAgreementsIdWorktypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/worktypes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Work Type
         * @param id
         * @param workType
         */
		financeAgreementsIdWorktypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/worktypes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesPost');
			}
			// verify required parameter 'workType' is set
			if (params.workType == null) {
				throw new Error('Missing required parameter workType when calling financeAgreementsIdWorktypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.workType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Work Type By Id
         * @param id
         * @param worktypeId
         */
		financeAgreementsIdWorktypesWorktypeIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/worktypes/{worktypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'worktypeId' + '}', String(params.worktypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesWorktypeIdDelete');
			}
			// verify required parameter 'worktypeId' is set
			if (params.worktypeId == null) {
				throw new Error('Missing required parameter worktypeId when calling financeAgreementsIdWorktypesWorktypeIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Work Type By Id
         * @param id
         * @param worktypeId
         */
		financeAgreementsIdWorktypesWorktypeIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/worktypes/{worktypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'worktypeId' + '}', String(params.worktypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesWorktypeIdGet');
			}
			// verify required parameter 'worktypeId' is set
			if (params.worktypeId == null) {
				throw new Error('Missing required parameter worktypeId when calling financeAgreementsIdWorktypesWorktypeIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Work Type
         * @param id
         * @param worktypeId
         * @param operations
         */
		financeAgreementsIdWorktypesWorktypeIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/worktypes/{worktypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'worktypeId' + '}', String(params.worktypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesWorktypeIdPatch');
			}
			// verify required parameter 'worktypeId' is set
			if (params.worktypeId == null) {
				throw new Error('Missing required parameter worktypeId when calling financeAgreementsIdWorktypesWorktypeIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeAgreementsIdWorktypesWorktypeIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Work Type
         * @param id
         * @param worktypeId
         * @param workType
         */
		financeAgreementsIdWorktypesWorktypeIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/worktypes/{worktypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'worktypeId' + '}', String(params.worktypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesWorktypeIdPut');
			}
			// verify required parameter 'worktypeId' is set
			if (params.worktypeId == null) {
				throw new Error('Missing required parameter worktypeId when calling financeAgreementsIdWorktypesWorktypeIdPut');
			}
			// verify required parameter 'workType' is set
			if (params.workType == null) {
				throw new Error('Missing required parameter workType when calling financeAgreementsIdWorktypesWorktypeIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.workType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AgreementWorkTypesApi;
})());
export { AgreementWorkTypesApi };
const AgreementsApi = ((() => {
	class AgreementsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Agreements Count
         * @param conditions
         * @param customFieldConditions
         */
		financeAgreementsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/agreements/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Agreements
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeAgreementsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/agreements`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Configuration Association
         * @param id
         * @param configurationId
         */
		financeAgreementsIdConfigurationsConfigurationIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/configurations/{configurationId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'configurationId' + '}', String(params.configurationId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdConfigurationsConfigurationIdDelete');
			}
			// verify required parameter 'configurationId' is set
			if (params.configurationId == null) {
				throw new Error('Missing required parameter configurationId when calling financeAgreementsIdConfigurationsConfigurationIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Configuration Association
         * @param id
         * @param configurationId
         */
		financeAgreementsIdConfigurationsConfigurationIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/configurations/{configurationId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'configurationId' + '}', String(params.configurationId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdConfigurationsConfigurationIdGet');
			}
			// verify required parameter 'configurationId' is set
			if (params.configurationId == null) {
				throw new Error('Missing required parameter configurationId when calling financeAgreementsIdConfigurationsConfigurationIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Agreement Configurations Count
         * @param id
         */
		financeAgreementsIdConfigurationsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/configurations/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdConfigurationsCountGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Agreement Configurations
         * @param id
         * @param page
         * @param pageSize
         */
		financeAgreementsIdConfigurationsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/configurations'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdConfigurationsGet');
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Configuration Association
         * @param id
         * @param configuration
         */
		financeAgreementsIdConfigurationsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}/configurations'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdConfigurationsPost');
			}
			// verify required parameter 'configuration' is set
			if (params.configuration == null) {
				throw new Error('Missing required parameter configuration when calling financeAgreementsIdConfigurationsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.configuration)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Agreement By Id
         * @param id
         */
		financeAgreementsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Agreement By Id
         * @param id
         */
		financeAgreementsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Agreement
         * @param id
         * @param operations
         */
		financeAgreementsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeAgreementsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Agreement
         * @param id
         * @param agreement
         */
		financeAgreementsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/agreements/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeAgreementsIdPut');
			}
			// verify required parameter 'agreement' is set
			if (params.agreement == null) {
				throw new Error('Missing required parameter agreement when calling financeAgreementsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.agreement)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Agreement
         * @param agreement
         */
		financeAgreementsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/agreements`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'agreement' is set
			if (params.agreement == null) {
				throw new Error('Missing required parameter agreement when calling financeAgreementsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.agreement)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AgreementsApi;
})());
export { AgreementsApi };
const AuditTrailApi = ((() => {
	class AuditTrailApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Members Count
         * @param type
         * @param id
         * @param deviceIdentifier
         */
		systemAudittrailCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/audittrail/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.type !== undefined) {
				queryParameters['type'] = params.type;
			}
			if (params.id !== undefined) {
				queryParameters['id'] = params.id;
			}
			if (params.deviceIdentifier !== undefined) {
				queryParameters['deviceIdentifier'] = params.deviceIdentifier;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Audit Trail
         * @param type
         * @param id
         * @param deviceIdentifier
         * @param page
         * @param pageSize
         */
		systemAudittrailGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/audittrail`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.type !== undefined) {
				queryParameters['type'] = params.type;
			}
			if (params.id !== undefined) {
				queryParameters['id'] = params.id;
			}
			if (params.deviceIdentifier !== undefined) {
				queryParameters['deviceIdentifier'] = params.deviceIdentifier;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return AuditTrailApi;
})());
export { AuditTrailApi };
const BatchApi = ((() => {
	class BatchApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Process Batch Requests
         * @param request
         */
		systemBatchPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/batch`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'request' is set
			if (params.request == null) {
				throw new Error('Missing required parameter request when calling systemBatchPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.request)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return BatchApi;
})());
export { BatchApi };
const BoardExcludedMembersApi = ((() => {
	class BoardExcludedMembersApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Excluded Members Count
         * @param id
         * @param conditions
         */
		serviceBoardsIdExcludedMembersCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/excludedMembers/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdExcludedMembersCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Excluded Member By Id
         * @param id
         * @param excludedMemberId
         */
		serviceBoardsIdExcludedMembersExcludedMemberIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/excludedMembers/{excludedMemberId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'excludedMemberId' + '}', String(params.excludedMemberId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdExcludedMembersExcludedMemberIdDelete');
			}
			// verify required parameter 'excludedMemberId' is set
			if (params.excludedMemberId == null) {
				throw new Error('Missing required parameter excludedMemberId when calling serviceBoardsIdExcludedMembersExcludedMemberIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Excluded Member By Id
         * @param id
         * @param excludedMemberId
         */
		serviceBoardsIdExcludedMembersExcludedMemberIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/excludedMembers/{excludedMemberId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'excludedMemberId' + '}', String(params.excludedMemberId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdExcludedMembersExcludedMemberIdGet');
			}
			// verify required parameter 'excludedMemberId' is set
			if (params.excludedMemberId == null) {
				throw new Error('Missing required parameter excludedMemberId when calling serviceBoardsIdExcludedMembersExcludedMemberIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Excluded Members
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceBoardsIdExcludedMembersGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/excludedMembers'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdExcludedMembersGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Excluded Member
         * @param id
         * @param excludedMember
         */
		serviceBoardsIdExcludedMembersPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/excludedMembers'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdExcludedMembersPost');
			}
			// verify required parameter 'excludedMember' is set
			if (params.excludedMember == null) {
				throw new Error('Missing required parameter excludedMember when calling serviceBoardsIdExcludedMembersPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.excludedMember)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return BoardExcludedMembersApi;
})());
export { BoardExcludedMembersApi };
const BoardItemsApi = ((() => {
	class BoardItemsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Items Count
         * @param id
         * @param conditions
         */
		serviceBoardsIdItemsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/items/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdItemsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Items
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceBoardsIdItemsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/items'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdItemsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Item By Id
         * @param id
         * @param itemId
         */
		serviceBoardsIdItemsItemIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/items/{itemId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'itemId' + '}', String(params.itemId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdItemsItemIdDelete');
			}
			// verify required parameter 'itemId' is set
			if (params.itemId == null) {
				throw new Error('Missing required parameter itemId when calling serviceBoardsIdItemsItemIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Item By Id
         * @param id
         * @param itemId
         */
		serviceBoardsIdItemsItemIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/items/{itemId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'itemId' + '}', String(params.itemId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdItemsItemIdGet');
			}
			// verify required parameter 'itemId' is set
			if (params.itemId == null) {
				throw new Error('Missing required parameter itemId when calling serviceBoardsIdItemsItemIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Item
         * @param id
         * @param itemId
         * @param operations
         */
		serviceBoardsIdItemsItemIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/items/{itemId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'itemId' + '}', String(params.itemId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdItemsItemIdPatch');
			}
			// verify required parameter 'itemId' is set
			if (params.itemId == null) {
				throw new Error('Missing required parameter itemId when calling serviceBoardsIdItemsItemIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceBoardsIdItemsItemIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Item
         * @param id
         * @param itemId
         * @param item
         */
		serviceBoardsIdItemsItemIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/items/{itemId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'itemId' + '}', String(params.itemId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdItemsItemIdPut');
			}
			// verify required parameter 'itemId' is set
			if (params.itemId == null) {
				throw new Error('Missing required parameter itemId when calling serviceBoardsIdItemsItemIdPut');
			}
			// verify required parameter 'item' is set
			if (params.item == null) {
				throw new Error('Missing required parameter item when calling serviceBoardsIdItemsItemIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.item)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Item
         * @param id
         * @param item
         */
		serviceBoardsIdItemsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/items'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdItemsPost');
			}
			// verify required parameter 'item' is set
			if (params.item == null) {
				throw new Error('Missing required parameter item when calling serviceBoardsIdItemsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.item)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return BoardItemsApi;
})());
export { BoardItemsApi };
const BoardStatusesApi = ((() => {
	class BoardStatusesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Statuses Count
         * @param id
         * @param conditions
         */
		serviceBoardsIdStatusesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/statuses/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Statuses
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceBoardsIdStatusesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/statuses'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Statuses
         * @param id
         * @param status
         */
		serviceBoardsIdStatusesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/statuses'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesPost');
			}
			// verify required parameter 'status' is set
			if (params.status == null) {
				throw new Error('Missing required parameter status when calling serviceBoardsIdStatusesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.status)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Status By Id
         * @param id
         * @param statusId
         */
		serviceBoardsIdStatusesStatusIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/statuses/{statusId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'statusId' + '}', String(params.statusId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesStatusIdDelete');
			}
			// verify required parameter 'statusId' is set
			if (params.statusId == null) {
				throw new Error('Missing required parameter statusId when calling serviceBoardsIdStatusesStatusIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Status By Id
         * @param id
         * @param statusId
         */
		serviceBoardsIdStatusesStatusIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/statuses/{statusId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'statusId' + '}', String(params.statusId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesStatusIdGet');
			}
			// verify required parameter 'statusId' is set
			if (params.statusId == null) {
				throw new Error('Missing required parameter statusId when calling serviceBoardsIdStatusesStatusIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Status
         * @param id
         * @param statusId
         * @param operations
         */
		serviceBoardsIdStatusesStatusIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/statuses/{statusId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'statusId' + '}', String(params.statusId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesStatusIdPatch');
			}
			// verify required parameter 'statusId' is set
			if (params.statusId == null) {
				throw new Error('Missing required parameter statusId when calling serviceBoardsIdStatusesStatusIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceBoardsIdStatusesStatusIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Statuses
         * @param id
         * @param statusId
         * @param status
         */
		serviceBoardsIdStatusesStatusIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/statuses/{statusId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'statusId' + '}', String(params.statusId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesStatusIdPut');
			}
			// verify required parameter 'statusId' is set
			if (params.statusId == null) {
				throw new Error('Missing required parameter statusId when calling serviceBoardsIdStatusesStatusIdPut');
			}
			// verify required parameter 'status' is set
			if (params.status == null) {
				throw new Error('Missing required parameter status when calling serviceBoardsIdStatusesStatusIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.status)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return BoardStatusesApi;
})());
export { BoardStatusesApi };
const BoardSubTypesApi = ((() => {
	class BoardSubTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Subtypes Count
         * @param id
         * @param conditions
         */
		serviceBoardsIdSubtypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/subtypes/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Subtypes
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceBoardsIdSubtypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/subtypes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Subtype
         * @param id
         * @param subType
         */
		serviceBoardsIdSubtypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/subtypes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesPost');
			}
			// verify required parameter 'subType' is set
			if (params.subType == null) {
				throw new Error('Missing required parameter subType when calling serviceBoardsIdSubtypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.subType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Subtype By Id
         * @param id
         * @param subtypeId
         */
		serviceBoardsIdSubtypesSubtypeIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/subtypes/{subtypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subtypeId' + '}', String(params.subtypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesSubtypeIdDelete');
			}
			// verify required parameter 'subtypeId' is set
			if (params.subtypeId == null) {
				throw new Error('Missing required parameter subtypeId when calling serviceBoardsIdSubtypesSubtypeIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Subtype By Id
         * @param id
         * @param subtypeId
         */
		serviceBoardsIdSubtypesSubtypeIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/subtypes/{subtypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subtypeId' + '}', String(params.subtypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesSubtypeIdGet');
			}
			// verify required parameter 'subtypeId' is set
			if (params.subtypeId == null) {
				throw new Error('Missing required parameter subtypeId when calling serviceBoardsIdSubtypesSubtypeIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Subtype
         * @param id
         * @param subtypeId
         * @param operations
         */
		serviceBoardsIdSubtypesSubtypeIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/subtypes/{subtypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subtypeId' + '}', String(params.subtypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesSubtypeIdPatch');
			}
			// verify required parameter 'subtypeId' is set
			if (params.subtypeId == null) {
				throw new Error('Missing required parameter subtypeId when calling serviceBoardsIdSubtypesSubtypeIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceBoardsIdSubtypesSubtypeIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Subtype
         * @param id
         * @param subtypeId
         * @param subType
         */
		serviceBoardsIdSubtypesSubtypeIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/subtypes/{subtypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subtypeId' + '}', String(params.subtypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesSubtypeIdPut');
			}
			// verify required parameter 'subtypeId' is set
			if (params.subtypeId == null) {
				throw new Error('Missing required parameter subtypeId when calling serviceBoardsIdSubtypesSubtypeIdPut');
			}
			// verify required parameter 'subType' is set
			if (params.subType == null) {
				throw new Error('Missing required parameter subType when calling serviceBoardsIdSubtypesSubtypeIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.subType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return BoardSubTypesApi;
})());
export { BoardSubTypesApi };
const BoardSubtypeAssociationsApi = ((() => {
	class BoardSubtypeAssociationsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Subtype Association By Id
         * @param boardId
         * @param subtypeId
         * @param associationId
         */
		serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{boardId}/subTypes/{subtypeId}/associations/{associationId}'
				.replace('{' + 'boardId' + '}', String(params.boardId))
				.replace('{' + 'subtypeId' + '}', String(params.subtypeId))
				.replace('{' + 'associationId' + '}', String(params.associationId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'boardId' is set
			if (params.boardId == null) {
				throw new Error('Missing required parameter boardId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdDelete');
			}
			// verify required parameter 'subtypeId' is set
			if (params.subtypeId == null) {
				throw new Error('Missing required parameter subtypeId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdDelete');
			}
			// verify required parameter 'associationId' is set
			if (params.associationId == null) {
				throw new Error('Missing required parameter associationId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Subtype Association By Id
         * @param boardId
         * @param subtypeId
         * @param associationId
         */
		serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{boardId}/subTypes/{subtypeId}/associations/{associationId}'
				.replace('{' + 'boardId' + '}', String(params.boardId))
				.replace('{' + 'subtypeId' + '}', String(params.subtypeId))
				.replace('{' + 'associationId' + '}', String(params.associationId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'boardId' is set
			if (params.boardId == null) {
				throw new Error('Missing required parameter boardId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdGet');
			}
			// verify required parameter 'subtypeId' is set
			if (params.subtypeId == null) {
				throw new Error('Missing required parameter subtypeId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdGet');
			}
			// verify required parameter 'associationId' is set
			if (params.associationId == null) {
				throw new Error('Missing required parameter associationId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Subtype Association Count
         * @param boardId
         * @param subtypeId
         * @param conditions
         */
		serviceBoardsBoardIdSubTypesSubtypeIdAssociationsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{boardId}/subTypes/{subtypeId}/associations/count'
				.replace('{' + 'boardId' + '}', String(params.boardId))
				.replace('{' + 'subtypeId' + '}', String(params.subtypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'boardId' is set
			if (params.boardId == null) {
				throw new Error('Missing required parameter boardId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsCountGet');
			}
			// verify required parameter 'subtypeId' is set
			if (params.subtypeId == null) {
				throw new Error('Missing required parameter subtypeId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Subtype Association
         * @param boardId
         * @param subtypeId
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceBoardsBoardIdSubTypesSubtypeIdAssociationsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{boardId}/subTypes/{subtypeId}/associations'
				.replace('{' + 'boardId' + '}', String(params.boardId))
				.replace('{' + 'subtypeId' + '}', String(params.subtypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'boardId' is set
			if (params.boardId == null) {
				throw new Error('Missing required parameter boardId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsGet');
			}
			// verify required parameter 'subtypeId' is set
			if (params.subtypeId == null) {
				throw new Error('Missing required parameter subtypeId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Subtype Association
         * @param boardId
         * @param subtypeId
         * @param subtypeAssociation
         */
		serviceBoardsBoardIdSubTypesSubtypeIdAssociationsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{boardId}/subTypes/{subtypeId}/associations'
				.replace('{' + 'boardId' + '}', String(params.boardId))
				.replace('{' + 'subtypeId' + '}', String(params.subtypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'boardId' is set
			if (params.boardId == null) {
				throw new Error('Missing required parameter boardId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsPost');
			}
			// verify required parameter 'subtypeId' is set
			if (params.subtypeId == null) {
				throw new Error('Missing required parameter subtypeId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsPost');
			}
			// verify required parameter 'subtypeAssociation' is set
			if (params.subtypeAssociation == null) {
				throw new Error('Missing required parameter subtypeAssociation when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.subtypeAssociation)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return BoardSubtypeAssociationsApi;
})());
export { BoardSubtypeAssociationsApi };
const BoardTeamsApi = ((() => {
	class BoardTeamsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Teams Count
         * @param id
         * @param conditions
         */
		serviceBoardsIdTeamsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/teams/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Teams
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceBoardsIdTeamsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/teams'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Team
         * @param id
         * @param team
         */
		serviceBoardsIdTeamsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/teams'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsPost');
			}
			// verify required parameter 'team' is set
			if (params.team == null) {
				throw new Error('Missing required parameter team when calling serviceBoardsIdTeamsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.team)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Team By Id
         * @param id
         * @param teamId
         */
		serviceBoardsIdTeamsTeamIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/teams/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsTeamIdDelete');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling serviceBoardsIdTeamsTeamIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Team By Id
         * @param id
         * @param teamId
         */
		serviceBoardsIdTeamsTeamIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/teams/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsTeamIdGet');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling serviceBoardsIdTeamsTeamIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Team
         * @param id
         * @param teamId
         * @param operations
         */
		serviceBoardsIdTeamsTeamIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/teams/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsTeamIdPatch');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling serviceBoardsIdTeamsTeamIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceBoardsIdTeamsTeamIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Team
         * @param id
         * @param teamId
         * @param team
         */
		serviceBoardsIdTeamsTeamIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/teams/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsTeamIdPut');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling serviceBoardsIdTeamsTeamIdPut');
			}
			// verify required parameter 'team' is set
			if (params.team == null) {
				throw new Error('Missing required parameter team when calling serviceBoardsIdTeamsTeamIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.team)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return BoardTeamsApi;
})());
export { BoardTeamsApi };
const BoardTypesApi = ((() => {
	class BoardTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Types Count
         * @param id
         * @param conditions
         */
		serviceBoardsIdTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/types/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTypesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Types
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceBoardsIdTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/types'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTypesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Type
         * @param id
         * @param type
         */
		serviceBoardsIdTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/types'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTypesPost');
			}
			// verify required parameter 'type' is set
			if (params.type == null) {
				throw new Error('Missing required parameter type when calling serviceBoardsIdTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.type)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Type By Id
         * @param id
         * @param typeId
         */
		serviceBoardsIdTypesTypeIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/types/{typeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'typeId' + '}', String(params.typeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTypesTypeIdDelete');
			}
			// verify required parameter 'typeId' is set
			if (params.typeId == null) {
				throw new Error('Missing required parameter typeId when calling serviceBoardsIdTypesTypeIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Type By Id
         * @param id
         * @param typeId
         */
		serviceBoardsIdTypesTypeIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/types/{typeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'typeId' + '}', String(params.typeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTypesTypeIdGet');
			}
			// verify required parameter 'typeId' is set
			if (params.typeId == null) {
				throw new Error('Missing required parameter typeId when calling serviceBoardsIdTypesTypeIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Types
         * @param id
         * @param typeId
         * @param operations
         */
		serviceBoardsIdTypesTypeIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/types/{typeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'typeId' + '}', String(params.typeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTypesTypeIdPatch');
			}
			// verify required parameter 'typeId' is set
			if (params.typeId == null) {
				throw new Error('Missing required parameter typeId when calling serviceBoardsIdTypesTypeIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceBoardsIdTypesTypeIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Types
         * @param id
         * @param typeId
         * @param type
         */
		serviceBoardsIdTypesTypeIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/types/{typeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'typeId' + '}', String(params.typeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTypesTypeIdPut');
			}
			// verify required parameter 'typeId' is set
			if (params.typeId == null) {
				throw new Error('Missing required parameter typeId when calling serviceBoardsIdTypesTypeIdPut');
			}
			// verify required parameter 'type' is set
			if (params.type == null) {
				throw new Error('Missing required parameter type when calling serviceBoardsIdTypesTypeIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.type)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Sub Type Association
         * @param id
         * @param typeId
         */
		serviceBoardsIdTypesTypeIdSubTypeAssociationGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}/types/{typeId}/subTypeAssociation'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'typeId' + '}', String(params.typeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdTypesTypeIdSubTypeAssociationGet');
			}
			// verify required parameter 'typeId' is set
			if (params.typeId == null) {
				throw new Error('Missing required parameter typeId when calling serviceBoardsIdTypesTypeIdSubTypeAssociationGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return BoardTypesApi;
})());
export { BoardTypesApi };
const BoardsApi = ((() => {
	class BoardsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Boards Count
         * @param conditions
         */
		serviceBoardsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/boards/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Boards
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceBoardsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/boards`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Board By Id
         * @param id
         */
		serviceBoardsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Board By Id
         * @param id
         */
		serviceBoardsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Board
         * @param id
         * @param operations
         */
		serviceBoardsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceBoardsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Board
         * @param id
         * @param board
         */
		serviceBoardsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/boards/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceBoardsIdPut');
			}
			// verify required parameter 'board' is set
			if (params.board == null) {
				throw new Error('Missing required parameter board when calling serviceBoardsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.board)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Board
         * @param board
         */
		serviceBoardsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/boards`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'board' is set
			if (params.board == null) {
				throw new Error('Missing required parameter board when calling serviceBoardsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.board)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return BoardsApi;
})());
export { BoardsApi };
const CallbacksApi = ((() => {
	class CallbacksApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Callback Entries Count
         * @param conditions
         */
		systemCallbacksCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/callbacks/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Callback Entries
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemCallbacksGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/callbacks`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Callback Entry By Id
         * @param id
         */
		systemCallbacksIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/callbacks/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemCallbacksIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Callback Entry By Id
         * @param id
         */
		systemCallbacksIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/callbacks/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemCallbacksIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Callback Entry
         * @param id
         * @param operations
         */
		systemCallbacksIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/callbacks/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemCallbacksIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemCallbacksIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Callback Entry
         * @param id
         * @param callbackEntry
         */
		systemCallbacksIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/callbacks/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemCallbacksIdPut');
			}
			// verify required parameter 'callbackEntry' is set
			if (params.callbackEntry == null) {
				throw new Error('Missing required parameter callbackEntry when calling systemCallbacksIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.callbackEntry)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Callback Entry
         * @param callbackEntry
         */
		systemCallbacksPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/callbacks`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'callbackEntry' is set
			if (params.callbackEntry == null) {
				throw new Error('Missing required parameter callbackEntry when calling systemCallbacksPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.callbackEntry)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CallbacksApi;
})());
export { CallbacksApi };
const CampaignAuditsApi = ((() => {
	class CampaignAuditsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Campaign Audit By Id
         * @param id
         * @param auditId
         */
		marketingCampaignsIdAuditsAuditIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/audits/{auditId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'auditId' + '}', String(params.auditId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsAuditIdDelete');
			}
			// verify required parameter 'auditId' is set
			if (params.auditId == null) {
				throw new Error('Missing required parameter auditId when calling marketingCampaignsIdAuditsAuditIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Audit By Id
         * @param id
         * @param auditId
         */
		marketingCampaignsIdAuditsAuditIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/audits/{auditId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'auditId' + '}', String(params.auditId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsAuditIdGet');
			}
			// verify required parameter 'auditId' is set
			if (params.auditId == null) {
				throw new Error('Missing required parameter auditId when calling marketingCampaignsIdAuditsAuditIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Campaign Audit
         * @param id
         * @param auditId
         * @param operations
         */
		marketingCampaignsIdAuditsAuditIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/audits/{auditId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'auditId' + '}', String(params.auditId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsAuditIdPatch');
			}
			// verify required parameter 'auditId' is set
			if (params.auditId == null) {
				throw new Error('Missing required parameter auditId when calling marketingCampaignsIdAuditsAuditIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling marketingCampaignsIdAuditsAuditIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Campaign Audit
         * @param id
         * @param auditId
         * @param campaignAudit
         */
		marketingCampaignsIdAuditsAuditIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/audits/{auditId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'auditId' + '}', String(params.auditId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsAuditIdPut');
			}
			// verify required parameter 'auditId' is set
			if (params.auditId == null) {
				throw new Error('Missing required parameter auditId when calling marketingCampaignsIdAuditsAuditIdPut');
			}
			// verify required parameter 'campaignAudit' is set
			if (params.campaignAudit == null) {
				throw new Error('Missing required parameter campaignAudit when calling marketingCampaignsIdAuditsAuditIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.campaignAudit)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Audits Count
         * @param id
         * @param conditions
         */
		marketingCampaignsIdAuditsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/audits/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Audits
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		marketingCampaignsIdAuditsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/audits'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Campaign Audit
         * @param id
         * @param campaignAudit
         */
		marketingCampaignsIdAuditsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/audits'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsPost');
			}
			// verify required parameter 'campaignAudit' is set
			if (params.campaignAudit == null) {
				throw new Error('Missing required parameter campaignAudit when calling marketingCampaignsIdAuditsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.campaignAudit)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CampaignAuditsApi;
})());
export { CampaignAuditsApi };
const CampaignEmailsOpenedApi = ((() => {
	class CampaignEmailsOpenedApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Emails Opened Count
         * @param id
         * @param conditions
         */
		marketingCampaignsIdEmailsOpenedCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Email Opened By Id
         * @param id
         * @param emailOpenedId
         */
		marketingCampaignsIdEmailsOpenedEmailOpenedIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened/{emailOpenedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'emailOpenedId' + '}', String(params.emailOpenedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdDelete');
			}
			// verify required parameter 'emailOpenedId' is set
			if (params.emailOpenedId == null) {
				throw new Error('Missing required parameter emailOpenedId when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Email Opened By Id
         * @param id
         * @param emailOpenedId
         */
		marketingCampaignsIdEmailsOpenedEmailOpenedIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened/{emailOpenedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'emailOpenedId' + '}', String(params.emailOpenedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdGet');
			}
			// verify required parameter 'emailOpenedId' is set
			if (params.emailOpenedId == null) {
				throw new Error('Missing required parameter emailOpenedId when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Email Opened
         * @param id
         * @param emailOpenedId
         * @param operations
         */
		marketingCampaignsIdEmailsOpenedEmailOpenedIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened/{emailOpenedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'emailOpenedId' + '}', String(params.emailOpenedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPatch');
			}
			// verify required parameter 'emailOpenedId' is set
			if (params.emailOpenedId == null) {
				throw new Error('Missing required parameter emailOpenedId when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Email Opened
         * @param id
         * @param emailOpenedId
         * @param emailOpened
         */
		marketingCampaignsIdEmailsOpenedEmailOpenedIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened/{emailOpenedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'emailOpenedId' + '}', String(params.emailOpenedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPut');
			}
			// verify required parameter 'emailOpenedId' is set
			if (params.emailOpenedId == null) {
				throw new Error('Missing required parameter emailOpenedId when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPut');
			}
			// verify required parameter 'emailOpened' is set
			if (params.emailOpened == null) {
				throw new Error('Missing required parameter emailOpened when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.emailOpened)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Emails Opened
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		marketingCampaignsIdEmailsOpenedGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Email Opened
         * @param id
         * @param emailOpened
         */
		marketingCampaignsIdEmailsOpenedPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedPost');
			}
			// verify required parameter 'emailOpened' is set
			if (params.emailOpened == null) {
				throw new Error('Missing required parameter emailOpened when calling marketingCampaignsIdEmailsOpenedPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.emailOpened)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CampaignEmailsOpenedApi;
})());
export { CampaignEmailsOpenedApi };
const CampaignFormsSubmittedApi = ((() => {
	class CampaignFormsSubmittedApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Forms Submitted Count
         * @param id
         * @param conditions
         */
		marketingCampaignsIdFormsSubmittedCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Form Submitted By Id
         * @param id
         * @param formSubmittedId
         */
		marketingCampaignsIdFormsSubmittedFormSubmittedIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted/{formSubmittedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'formSubmittedId' + '}', String(params.formSubmittedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdDelete');
			}
			// verify required parameter 'formSubmittedId' is set
			if (params.formSubmittedId == null) {
				throw new Error('Missing required parameter formSubmittedId when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Form Submitted By Id
         * @param id
         * @param formSubmittedId
         */
		marketingCampaignsIdFormsSubmittedFormSubmittedIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted/{formSubmittedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'formSubmittedId' + '}', String(params.formSubmittedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdGet');
			}
			// verify required parameter 'formSubmittedId' is set
			if (params.formSubmittedId == null) {
				throw new Error('Missing required parameter formSubmittedId when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Form Submitted
         * @param id
         * @param formSubmittedId
         * @param operations
         */
		marketingCampaignsIdFormsSubmittedFormSubmittedIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted/{formSubmittedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'formSubmittedId' + '}', String(params.formSubmittedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPatch');
			}
			// verify required parameter 'formSubmittedId' is set
			if (params.formSubmittedId == null) {
				throw new Error('Missing required parameter formSubmittedId when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Form Submitted
         * @param id
         * @param formSubmittedId
         * @param formSubmitted
         */
		marketingCampaignsIdFormsSubmittedFormSubmittedIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted/{formSubmittedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'formSubmittedId' + '}', String(params.formSubmittedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPut');
			}
			// verify required parameter 'formSubmittedId' is set
			if (params.formSubmittedId == null) {
				throw new Error('Missing required parameter formSubmittedId when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPut');
			}
			// verify required parameter 'formSubmitted' is set
			if (params.formSubmitted == null) {
				throw new Error('Missing required parameter formSubmitted when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.formSubmitted)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Forms Submitted
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		marketingCampaignsIdFormsSubmittedGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Form Submitted
         * @param id
         * @param formSubmitted
         */
		marketingCampaignsIdFormsSubmittedPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedPost');
			}
			// verify required parameter 'formSubmitted' is set
			if (params.formSubmitted == null) {
				throw new Error('Missing required parameter formSubmitted when calling marketingCampaignsIdFormsSubmittedPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.formSubmitted)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CampaignFormsSubmittedApi;
})());
export { CampaignFormsSubmittedApi };
const CampaignLinksClickedApi = ((() => {
	class CampaignLinksClickedApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Links Clicked Count
         * @param id
         * @param conditions
         */
		marketingCampaignsIdLinksClickedCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Links Clicked
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		marketingCampaignsIdLinksClickedGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Link Clicked By Id
         * @param id
         * @param linkClickedId
         */
		marketingCampaignsIdLinksClickedLinkClickedIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked/{linkClickedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'linkClickedId' + '}', String(params.linkClickedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedLinkClickedIdDelete');
			}
			// verify required parameter 'linkClickedId' is set
			if (params.linkClickedId == null) {
				throw new Error('Missing required parameter linkClickedId when calling marketingCampaignsIdLinksClickedLinkClickedIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Link Clicked By Id
         * @param id
         * @param linkClickedId
         */
		marketingCampaignsIdLinksClickedLinkClickedIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked/{linkClickedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'linkClickedId' + '}', String(params.linkClickedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedLinkClickedIdGet');
			}
			// verify required parameter 'linkClickedId' is set
			if (params.linkClickedId == null) {
				throw new Error('Missing required parameter linkClickedId when calling marketingCampaignsIdLinksClickedLinkClickedIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Link Clicked
         * @param id
         * @param linkClickedId
         * @param operations
         */
		marketingCampaignsIdLinksClickedLinkClickedIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked/{linkClickedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'linkClickedId' + '}', String(params.linkClickedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedLinkClickedIdPatch');
			}
			// verify required parameter 'linkClickedId' is set
			if (params.linkClickedId == null) {
				throw new Error('Missing required parameter linkClickedId when calling marketingCampaignsIdLinksClickedLinkClickedIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling marketingCampaignsIdLinksClickedLinkClickedIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Link Clicked
         * @param id
         * @param linkClickedId
         * @param linkClicked
         */
		marketingCampaignsIdLinksClickedLinkClickedIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked/{linkClickedId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'linkClickedId' + '}', String(params.linkClickedId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedLinkClickedIdPut');
			}
			// verify required parameter 'linkClickedId' is set
			if (params.linkClickedId == null) {
				throw new Error('Missing required parameter linkClickedId when calling marketingCampaignsIdLinksClickedLinkClickedIdPut');
			}
			// verify required parameter 'linkClicked' is set
			if (params.linkClicked == null) {
				throw new Error('Missing required parameter linkClicked when calling marketingCampaignsIdLinksClickedLinkClickedIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.linkClicked)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Link Clicked
         * @param id
         * @param linkClicked
         */
		marketingCampaignsIdLinksClickedPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedPost');
			}
			// verify required parameter 'linkClicked' is set
			if (params.linkClicked == null) {
				throw new Error('Missing required parameter linkClicked when calling marketingCampaignsIdLinksClickedPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.linkClicked)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CampaignLinksClickedApi;
})());
export { CampaignLinksClickedApi };
const CampaignStatusesApi = ((() => {
	class CampaignStatusesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Campaign Statuses Count
         * @param conditions
         */
		marketingCampaignsStatusesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/campaigns/statuses/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Statuses
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		marketingCampaignsStatusesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/campaigns/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Campaign Status By Id
         * @param id
         */
		marketingCampaignsStatusesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsStatusesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Status By Id
         * @param id
         */
		marketingCampaignsStatusesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsStatusesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Campaign Status
         * @param id
         * @param operations
         */
		marketingCampaignsStatusesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsStatusesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling marketingCampaignsStatusesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Campaign Status
         * @param id
         * @param campaignStatus
         */
		marketingCampaignsStatusesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsStatusesIdPut');
			}
			// verify required parameter 'campaignStatus' is set
			if (params.campaignStatus == null) {
				throw new Error('Missing required parameter campaignStatus when calling marketingCampaignsStatusesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.campaignStatus)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Campaign Status
         * @param campaignStatus
         */
		marketingCampaignsStatusesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/campaigns/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'campaignStatus' is set
			if (params.campaignStatus == null) {
				throw new Error('Missing required parameter campaignStatus when calling marketingCampaignsStatusesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.campaignStatus)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CampaignStatusesApi;
})());
export { CampaignStatusesApi };
const CampaignSubTypesApi = ((() => {
	class CampaignSubTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Campaign Sub Types Count
         * @param id
         * @param conditions
         */
		marketingCampaignsTypesIdSubTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Sub Types
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		marketingCampaignsTypesIdSubTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Campaign Sub Type
         * @param id
         * @param campaignSubType
         */
		marketingCampaignsTypesIdSubTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesPost');
			}
			// verify required parameter 'campaignSubType' is set
			if (params.campaignSubType == null) {
				throw new Error('Missing required parameter campaignSubType when calling marketingCampaignsTypesIdSubTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.campaignSubType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Campaign Sub Type By Id
         * @param id
         * @param subTypeId
         */
		marketingCampaignsTypesIdSubTypesSubTypeIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes/{subTypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subTypeId' + '}', String(params.subTypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesSubTypeIdDelete');
			}
			// verify required parameter 'subTypeId' is set
			if (params.subTypeId == null) {
				throw new Error('Missing required parameter subTypeId when calling marketingCampaignsTypesIdSubTypesSubTypeIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Sub Type By Id
         * @param id
         * @param subTypeId
         */
		marketingCampaignsTypesIdSubTypesSubTypeIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes/{subTypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subTypeId' + '}', String(params.subTypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesSubTypeIdGet');
			}
			// verify required parameter 'subTypeId' is set
			if (params.subTypeId == null) {
				throw new Error('Missing required parameter subTypeId when calling marketingCampaignsTypesIdSubTypesSubTypeIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Campaign Sub Type
         * @param id
         * @param subTypeId
         * @param operations
         */
		marketingCampaignsTypesIdSubTypesSubTypeIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes/{subTypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subTypeId' + '}', String(params.subTypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesSubTypeIdPatch');
			}
			// verify required parameter 'subTypeId' is set
			if (params.subTypeId == null) {
				throw new Error('Missing required parameter subTypeId when calling marketingCampaignsTypesIdSubTypesSubTypeIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling marketingCampaignsTypesIdSubTypesSubTypeIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Campaign Sub Type
         * @param id
         * @param subTypeId
         * @param campaignSubType
         */
		marketingCampaignsTypesIdSubTypesSubTypeIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes/{subTypeId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subTypeId' + '}', String(params.subTypeId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesSubTypeIdPut');
			}
			// verify required parameter 'subTypeId' is set
			if (params.subTypeId == null) {
				throw new Error('Missing required parameter subTypeId when calling marketingCampaignsTypesIdSubTypesSubTypeIdPut');
			}
			// verify required parameter 'campaignSubType' is set
			if (params.campaignSubType == null) {
				throw new Error('Missing required parameter campaignSubType when calling marketingCampaignsTypesIdSubTypesSubTypeIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.campaignSubType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CampaignSubTypesApi;
})());
export { CampaignSubTypesApi };
const CampaignTypesApi = ((() => {
	class CampaignTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Campaign Types Count
         * @param conditions
         */
		marketingCampaignsTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/campaigns/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Types
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		marketingCampaignsTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/campaigns/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Campaign Type By Id
         * @param id
         */
		marketingCampaignsTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Type By Id
         * @param id
         */
		marketingCampaignsTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Campaign Type
         * @param id
         * @param operations
         */
		marketingCampaignsTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling marketingCampaignsTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Campaign Type
         * @param id
         * @param campaignType
         */
		marketingCampaignsTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdPut');
			}
			// verify required parameter 'campaignType' is set
			if (params.campaignType == null) {
				throw new Error('Missing required parameter campaignType when calling marketingCampaignsTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.campaignType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Campaign Type
         * @param campaignType
         */
		marketingCampaignsTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/campaigns/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'campaignType' is set
			if (params.campaignType == null) {
				throw new Error('Missing required parameter campaignType when calling marketingCampaignsTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.campaignType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CampaignTypesApi;
})());
export { CampaignTypesApi };
const CampaignsApi = ((() => {
	class CampaignsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Campaigns Count
         * @param conditions
         */
		marketingCampaignsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/campaigns/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaigns
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		marketingCampaignsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/campaigns`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Activities Count
         * @param id
         */
		marketingCampaignsIdActivitiesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/activities/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdActivitiesCountGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Activities
         * @param id
         * @param page
         * @param pageSize
         */
		marketingCampaignsIdActivitiesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/activities'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdActivitiesGet');
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Campaign By Id
         * @param id
         */
		marketingCampaignsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign By Id
         * @param id
         */
		marketingCampaignsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Opportunities Count
         * @param id
         */
		marketingCampaignsIdOpportunitiesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/opportunities/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdOpportunitiesCountGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Campaign Opportunities
         * @param id
         * @param page
         * @param pageSize
         */
		marketingCampaignsIdOpportunitiesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}/opportunities'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdOpportunitiesGet');
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Campaign
         * @param id
         * @param operations
         */
		marketingCampaignsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling marketingCampaignsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Campaign
         * @param id
         * @param campaign
         */
		marketingCampaignsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/campaigns/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingCampaignsIdPut');
			}
			// verify required parameter 'campaign' is set
			if (params.campaign == null) {
				throw new Error('Missing required parameter campaign when calling marketingCampaignsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.campaign)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Campaign
         * @param campaign
         */
		marketingCampaignsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/campaigns`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'campaign' is set
			if (params.campaign == null) {
				throw new Error('Missing required parameter campaign when calling marketingCampaignsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.campaign)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CampaignsApi;
})());
export { CampaignsApi };
const CatalogComponentsApi = ((() => {
	class CatalogComponentsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Catalog Component By Id
         * @param id
         * @param componentId
         */
		procurementCatalogIdComponentsComponentIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{id}/components/{componentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'componentId' + '}', String(params.componentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsComponentIdDelete');
			}
			// verify required parameter 'componentId' is set
			if (params.componentId == null) {
				throw new Error('Missing required parameter componentId when calling procurementCatalogIdComponentsComponentIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Catalog Component By Id
         * @param id
         * @param componentId
         */
		procurementCatalogIdComponentsComponentIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{id}/components/{componentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'componentId' + '}', String(params.componentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsComponentIdGet');
			}
			// verify required parameter 'componentId' is set
			if (params.componentId == null) {
				throw new Error('Missing required parameter componentId when calling procurementCatalogIdComponentsComponentIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Catalog Component
         * @param id
         * @param componentId
         * @param operations
         */
		procurementCatalogIdComponentsComponentIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{id}/components/{componentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'componentId' + '}', String(params.componentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsComponentIdPatch');
			}
			// verify required parameter 'componentId' is set
			if (params.componentId == null) {
				throw new Error('Missing required parameter componentId when calling procurementCatalogIdComponentsComponentIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementCatalogIdComponentsComponentIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Catalog Component
         * @param id
         * @param componentId
         * @param catalogComponent
         */
		procurementCatalogIdComponentsComponentIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{id}/components/{componentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'componentId' + '}', String(params.componentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsComponentIdPut');
			}
			// verify required parameter 'componentId' is set
			if (params.componentId == null) {
				throw new Error('Missing required parameter componentId when calling procurementCatalogIdComponentsComponentIdPut');
			}
			// verify required parameter 'catalogComponent' is set
			if (params.catalogComponent == null) {
				throw new Error('Missing required parameter catalogComponent when calling procurementCatalogIdComponentsComponentIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.catalogComponent)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Catalog Components Count
         * @param id
         * @param conditions
         */
		procurementCatalogIdComponentsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{id}/components/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Catalog Components
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementCatalogIdComponentsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{id}/components'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Catalog Component
         * @param id
         * @param catalogComponent
         */
		procurementCatalogIdComponentsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{id}/components'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsPost');
			}
			// verify required parameter 'catalogComponent' is set
			if (params.catalogComponent == null) {
				throw new Error('Missing required parameter catalogComponent when calling procurementCatalogIdComponentsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.catalogComponent)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CatalogComponentsApi;
})());
export { CatalogComponentsApi };
const CatalogsItemApi = ((() => {
	class CatalogsItemApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Inventory Quantity On Hand
         * @param catalogItemIdentifier
         * @param warehouseBinId
         */
		procurementCatalogCatalogItemIdentifierQuantityOnHandGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{catalogItemIdentifier}/quantityOnHand'
				.replace('{' + 'catalogItemIdentifier' + '}', String(params.catalogItemIdentifier));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'catalogItemIdentifier' is set
			if (params.catalogItemIdentifier == null) {
				throw new Error('Missing required parameter catalogItemIdentifier when calling procurementCatalogCatalogItemIdentifierQuantityOnHandGet');
			}
			if (params.warehouseBinId !== undefined) {
				queryParameters['warehouseBinId'] = params.warehouseBinId;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Catalogs Count
         * @param conditions
         */
		procurementCatalogCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/catalog/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Catalogs
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementCatalogGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/catalog`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Catalog By Id
         * @param id
         */
		procurementCatalogIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCatalogIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Catalog By Id
         * @param id
         */
		procurementCatalogIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCatalogIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Catalog
         * @param id
         * @param operations
         */
		procurementCatalogIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCatalogIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementCatalogIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Catalog
         * @param id
         * @param catalogItem
         */
		procurementCatalogIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/catalog/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCatalogIdPut');
			}
			// verify required parameter 'catalogItem' is set
			if (params.catalogItem == null) {
				throw new Error('Missing required parameter catalogItem when calling procurementCatalogIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.catalogItem)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Catalog
         * @param catalogItem
         */
		procurementCatalogPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/catalog`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'catalogItem' is set
			if (params.catalogItem == null) {
				throw new Error('Missing required parameter catalogItem when calling procurementCatalogPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.catalogItem)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CatalogsItemApi;
})());
export { CatalogsItemApi };
const CategoriesApi = ((() => {
	class CategoriesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Categories Count
         * @param conditions
         */
		procurementCategoriesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/categories/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Categories
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementCategoriesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/categories`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Category By Id
         * @param id
         */
		procurementCategoriesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/categories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCategoriesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Category By Id
         * @param id
         */
		procurementCategoriesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/categories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCategoriesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Category
         * @param id
         * @param operations
         */
		procurementCategoriesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/categories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCategoriesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementCategoriesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Category
         * @param id
         * @param category
         */
		procurementCategoriesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/categories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCategoriesIdPut');
			}
			// verify required parameter 'category' is set
			if (params.category == null) {
				throw new Error('Missing required parameter category when calling procurementCategoriesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.category)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Category
         * @param category
         */
		procurementCategoriesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/categories`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'category' is set
			if (params.category == null) {
				throw new Error('Missing required parameter category when calling procurementCategoriesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.category)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CategoriesApi;
})());
export { CategoriesApi };
const CertificationsApi = ((() => {
	class CertificationsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Certification Count
         * @param conditions
         */
		systemCertificationsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/certifications/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Certification
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemCertificationsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/certifications`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Certification By Id
         * @param id
         */
		systemCertificationsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/certifications/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemCertificationsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Certification By Id
         * @param id
         */
		systemCertificationsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/certifications/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemCertificationsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Certification
         * @param id
         * @param operations
         */
		systemCertificationsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/certifications/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemCertificationsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemCertificationsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Certification
         * @param id
         * @param certification
         */
		systemCertificationsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/certifications/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemCertificationsIdPut');
			}
			// verify required parameter 'certification' is set
			if (params.certification == null) {
				throw new Error('Missing required parameter certification when calling systemCertificationsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.certification)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Certification
         * @param certification
         */
		systemCertificationsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/certifications`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'certification' is set
			if (params.certification == null) {
				throw new Error('Missing required parameter certification when calling systemCertificationsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.certification)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CertificationsApi;
})());
export { CertificationsApi };
const CodesApi = ((() => {
	class CodesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Create Codes Count
         * @param conditions
         */
		serviceCodesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/codes/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Codes
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceCodesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/codes`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Code By Id
         * @param id
         */
		serviceCodesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/codes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceCodesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Code By Id
         * @param id
         */
		serviceCodesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/codes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceCodesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Code
         * @param id
         * @param operations
         */
		serviceCodesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/codes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceCodesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceCodesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Code
         * @param id
         * @param code
         */
		serviceCodesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/codes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceCodesIdPut');
			}
			// verify required parameter 'code' is set
			if (params.code == null) {
				throw new Error('Missing required parameter code when calling serviceCodesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.code)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Codes
         * @param code
         */
		serviceCodesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/codes`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'code' is set
			if (params.code == null) {
				throw new Error('Missing required parameter code when calling serviceCodesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.code)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CodesApi;
})());
export { CodesApi };
const CompaniesApi = ((() => {
	class CompaniesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Companies Count
         * @param conditions
         * @param customFieldConditions
         */
		companyCompaniesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/companies/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Companies
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyCompaniesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/companies`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Company By Id
         * @param id
         */
		companyCompaniesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Company By Id
         * @param id
         */
		companyCompaniesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Merge Company
         * @param id
         * @param merge
         */
		companyCompaniesIdMergePost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/merge'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdMergePost');
			}
			// verify required parameter 'merge' is set
			if (params.merge == null) {
				throw new Error('Missing required parameter merge when calling companyCompaniesIdMergePost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.merge)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Company
         * @param id
         * @param operations
         */
		companyCompaniesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyCompaniesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Company
         * @param id
         * @param company
         */
		companyCompaniesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdPut');
			}
			// verify required parameter 'company' is set
			if (params.company == null) {
				throw new Error('Missing required parameter company when calling companyCompaniesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.company)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Company
         * @param company
         */
		companyCompaniesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/companies`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'company' is set
			if (params.company == null) {
				throw new Error('Missing required parameter company when calling companyCompaniesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.company)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CompaniesApi;
})());
export { CompaniesApi };
const CompanyCustomNotesApi = ((() => {
	class CompanyCustomNotesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Custom Note Count
         * @param id
         * @param conditions
         */
		companyCompaniesIdCustomStatusNotesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Custom Note By Id
         * @param id
         * @param customNoteId
         */
		companyCompaniesIdCustomStatusNotesCustomNoteIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes/{customNoteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'customNoteId' + '}', String(params.customNoteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesCustomNoteIdDelete');
			}
			// verify required parameter 'customNoteId' is set
			if (params.customNoteId == null) {
				throw new Error('Missing required parameter customNoteId when calling companyCompaniesIdCustomStatusNotesCustomNoteIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Custom Note By Id
         * @param id
         * @param customNoteId
         */
		companyCompaniesIdCustomStatusNotesCustomNoteIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes/{customNoteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'customNoteId' + '}', String(params.customNoteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesCustomNoteIdGet');
			}
			// verify required parameter 'customNoteId' is set
			if (params.customNoteId == null) {
				throw new Error('Missing required parameter customNoteId when calling companyCompaniesIdCustomStatusNotesCustomNoteIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Custom Note
         * @param id
         * @param customNoteId
         * @param operations
         */
		companyCompaniesIdCustomStatusNotesCustomNoteIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes/{customNoteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'customNoteId' + '}', String(params.customNoteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPatch');
			}
			// verify required parameter 'customNoteId' is set
			if (params.customNoteId == null) {
				throw new Error('Missing required parameter customNoteId when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Custom Note
         * @param id
         * @param customNoteId
         * @param customNote
         */
		companyCompaniesIdCustomStatusNotesCustomNoteIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes/{customNoteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'customNoteId' + '}', String(params.customNoteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPut');
			}
			// verify required parameter 'customNoteId' is set
			if (params.customNoteId == null) {
				throw new Error('Missing required parameter customNoteId when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPut');
			}
			// verify required parameter 'customNote' is set
			if (params.customNote == null) {
				throw new Error('Missing required parameter customNote when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.customNote)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Custom Note
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyCompaniesIdCustomStatusNotesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Custom Note
         * @param id
         * @param customNote
         */
		companyCompaniesIdCustomStatusNotesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesPost');
			}
			// verify required parameter 'customNote' is set
			if (params.customNote == null) {
				throw new Error('Missing required parameter customNote when calling companyCompaniesIdCustomStatusNotesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.customNote)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CompanyCustomNotesApi;
})());
export { CompanyCustomNotesApi };
const CompanyManagementSummaryReportsApi = ((() => {
	class CompanyManagementSummaryReportsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Company Types Count
         * @param id
         * @param conditions
         */
		companyCompaniesIdManagementSummaryReportsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Management Summarys
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyCompaniesIdManagementSummaryReportsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Management Summary
         * @param id
         * @param managementSummary
         */
		companyCompaniesIdManagementSummaryReportsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsPost');
			}
			// verify required parameter 'managementSummary' is set
			if (params.managementSummary == null) {
				throw new Error('Missing required parameter managementSummary when calling companyCompaniesIdManagementSummaryReportsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.managementSummary)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Management Summary By Id
         * @param id
         * @param reportId
         */
		companyCompaniesIdManagementSummaryReportsReportIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports/{reportId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'reportId' + '}', String(params.reportId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsReportIdDelete');
			}
			// verify required parameter 'reportId' is set
			if (params.reportId == null) {
				throw new Error('Missing required parameter reportId when calling companyCompaniesIdManagementSummaryReportsReportIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Management Summary By Id
         * @param id
         * @param reportId
         */
		companyCompaniesIdManagementSummaryReportsReportIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports/{reportId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'reportId' + '}', String(params.reportId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsReportIdGet');
			}
			// verify required parameter 'reportId' is set
			if (params.reportId == null) {
				throw new Error('Missing required parameter reportId when calling companyCompaniesIdManagementSummaryReportsReportIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Management Summary
         * @param id
         * @param reportId
         * @param operations
         */
		companyCompaniesIdManagementSummaryReportsReportIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports/{reportId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'reportId' + '}', String(params.reportId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsReportIdPatch');
			}
			// verify required parameter 'reportId' is set
			if (params.reportId == null) {
				throw new Error('Missing required parameter reportId when calling companyCompaniesIdManagementSummaryReportsReportIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyCompaniesIdManagementSummaryReportsReportIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Management Summary
         * @param id
         * @param reportId
         * @param managementSummary
         */
		companyCompaniesIdManagementSummaryReportsReportIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports/{reportId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'reportId' + '}', String(params.reportId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsReportIdPut');
			}
			// verify required parameter 'reportId' is set
			if (params.reportId == null) {
				throw new Error('Missing required parameter reportId when calling companyCompaniesIdManagementSummaryReportsReportIdPut');
			}
			// verify required parameter 'managementSummary' is set
			if (params.managementSummary == null) {
				throw new Error('Missing required parameter managementSummary when calling companyCompaniesIdManagementSummaryReportsReportIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.managementSummary)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CompanyManagementSummaryReportsApi;
})());
export { CompanyManagementSummaryReportsApi };
const CompanyNoteTypesApi = ((() => {
	class CompanyNoteTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Note Type Count
         * @param conditions
         */
		companyNoteTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/noteTypes/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Note Type
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyNoteTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/noteTypes`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Note Type By Id
         * @param id
         */
		companyNoteTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/noteTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyNoteTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Note Type By Id
         * @param id
         */
		companyNoteTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/noteTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyNoteTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Note Type
         * @param id
         * @param operations
         */
		companyNoteTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/noteTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyNoteTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyNoteTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Note Type
         * @param id
         * @param noteType
         */
		companyNoteTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/noteTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyNoteTypesIdPut');
			}
			// verify required parameter 'noteType' is set
			if (params.noteType == null) {
				throw new Error('Missing required parameter noteType when calling companyNoteTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.noteType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Note Type
         * @param noteType
         */
		companyNoteTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/noteTypes`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'noteType' is set
			if (params.noteType == null) {
				throw new Error('Missing required parameter noteType when calling companyNoteTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.noteType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CompanyNoteTypesApi;
})());
export { CompanyNoteTypesApi };
const CompanyNotesApi = ((() => {
	class CompanyNotesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Company Notes Count
         * @param id
         * @param conditions
         */
		companyCompaniesIdNotesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/notes/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdNotesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Company Notes
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyCompaniesIdNotesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/notes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdNotesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Company Note By Id
         * @param id
         * @param noteId
         */
		companyCompaniesIdNotesNoteIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdNotesNoteIdDelete');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling companyCompaniesIdNotesNoteIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Company Note By Id
         * @param id
         * @param noteId
         */
		companyCompaniesIdNotesNoteIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdNotesNoteIdGet');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling companyCompaniesIdNotesNoteIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Company Note
         * @param id
         * @param noteId
         * @param operations
         */
		companyCompaniesIdNotesNoteIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdNotesNoteIdPatch');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling companyCompaniesIdNotesNoteIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyCompaniesIdNotesNoteIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Company Note
         * @param id
         * @param noteId
         * @param companyNote
         */
		companyCompaniesIdNotesNoteIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdNotesNoteIdPut');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling companyCompaniesIdNotesNoteIdPut');
			}
			// verify required parameter 'companyNote' is set
			if (params.companyNote == null) {
				throw new Error('Missing required parameter companyNote when calling companyCompaniesIdNotesNoteIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.companyNote)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Company Note
         * @param id
         * @param companyNote
         */
		companyCompaniesIdNotesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/notes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdNotesPost');
			}
			// verify required parameter 'companyNote' is set
			if (params.companyNote == null) {
				throw new Error('Missing required parameter companyNote when calling companyCompaniesIdNotesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.companyNote)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CompanyNotesApi;
})());
export { CompanyNotesApi };
const CompanySitesApi = ((() => {
	class CompanySitesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Sites Count
         * @param id
         * @param conditions
         */
		companyCompaniesIdSitesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/sites/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdSitesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Sites
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyCompaniesIdSitesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/sites'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdSitesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Site
         * @param id
         * @param site
         */
		companyCompaniesIdSitesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/sites'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdSitesPost');
			}
			// verify required parameter 'site' is set
			if (params.site == null) {
				throw new Error('Missing required parameter site when calling companyCompaniesIdSitesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.site)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Site By Id
         * @param id
         * @param siteId
         */
		companyCompaniesIdSitesSiteIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/sites/{siteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'siteId' + '}', String(params.siteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdSitesSiteIdDelete');
			}
			// verify required parameter 'siteId' is set
			if (params.siteId == null) {
				throw new Error('Missing required parameter siteId when calling companyCompaniesIdSitesSiteIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Site By Id
         * @param id
         * @param siteId
         */
		companyCompaniesIdSitesSiteIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/sites/{siteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'siteId' + '}', String(params.siteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdSitesSiteIdGet');
			}
			// verify required parameter 'siteId' is set
			if (params.siteId == null) {
				throw new Error('Missing required parameter siteId when calling companyCompaniesIdSitesSiteIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Site
         * @param id
         * @param siteId
         * @param operations
         */
		companyCompaniesIdSitesSiteIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/sites/{siteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'siteId' + '}', String(params.siteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdSitesSiteIdPatch');
			}
			// verify required parameter 'siteId' is set
			if (params.siteId == null) {
				throw new Error('Missing required parameter siteId when calling companyCompaniesIdSitesSiteIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyCompaniesIdSitesSiteIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Site
         * @param id
         * @param siteId
         * @param site
         */
		companyCompaniesIdSitesSiteIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/sites/{siteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'siteId' + '}', String(params.siteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdSitesSiteIdPut');
			}
			// verify required parameter 'siteId' is set
			if (params.siteId == null) {
				throw new Error('Missing required parameter siteId when calling companyCompaniesIdSitesSiteIdPut');
			}
			// verify required parameter 'site' is set
			if (params.site == null) {
				throw new Error('Missing required parameter site when calling companyCompaniesIdSitesSiteIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.site)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CompanySitesApi;
})());
export { CompanySitesApi };
const CompanyStatusesApi = ((() => {
	class CompanyStatusesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Company Statuses Count
         * @param conditions
         */
		companyCompaniesStatusesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/companies/statuses/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Company Statuses
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyCompaniesStatusesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/companies/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Company Status By Id
         * @param id
         */
		companyCompaniesStatusesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesStatusesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Company Status By Id
         * @param id
         */
		companyCompaniesStatusesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesStatusesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Company Status
         * @param id
         * @param operations
         */
		companyCompaniesStatusesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesStatusesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyCompaniesStatusesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Company Status
         * @param id
         * @param companyStatus
         */
		companyCompaniesStatusesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesStatusesIdPut');
			}
			// verify required parameter 'companyStatus' is set
			if (params.companyStatus == null) {
				throw new Error('Missing required parameter companyStatus when calling companyCompaniesStatusesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.companyStatus)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Company Status
         * @param companyStatus
         */
		companyCompaniesStatusesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/companies/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'companyStatus' is set
			if (params.companyStatus == null) {
				throw new Error('Missing required parameter companyStatus when calling companyCompaniesStatusesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.companyStatus)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CompanyStatusesApi;
})());
export { CompanyStatusesApi };
const CompanyTeamsApi = ((() => {
	class CompanyTeamsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Company Teams Count
         * @param id
         * @param conditions
         */
		companyCompaniesIdTeamsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/teams/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Company Teams
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyCompaniesIdTeamsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/teams'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Company Team
         * @param id
         * @param companyTeam
         */
		companyCompaniesIdTeamsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/teams'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsPost');
			}
			// verify required parameter 'companyTeam' is set
			if (params.companyTeam == null) {
				throw new Error('Missing required parameter companyTeam when calling companyCompaniesIdTeamsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.companyTeam)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Company Team By Id
         * @param id
         * @param teamId
         */
		companyCompaniesIdTeamsTeamIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/teams/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsTeamIdDelete');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling companyCompaniesIdTeamsTeamIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Company Team By Id
         * @param id
         * @param teamId
         */
		companyCompaniesIdTeamsTeamIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/teams/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsTeamIdGet');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling companyCompaniesIdTeamsTeamIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Company Team
         * @param id
         * @param teamId
         * @param operations
         */
		companyCompaniesIdTeamsTeamIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/teams/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsTeamIdPatch');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling companyCompaniesIdTeamsTeamIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyCompaniesIdTeamsTeamIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Company Team
         * @param id
         * @param teamId
         * @param companyTeam
         */
		companyCompaniesIdTeamsTeamIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/{id}/teams/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsTeamIdPut');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling companyCompaniesIdTeamsTeamIdPut');
			}
			// verify required parameter 'companyTeam' is set
			if (params.companyTeam == null) {
				throw new Error('Missing required parameter companyTeam when calling companyCompaniesIdTeamsTeamIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.companyTeam)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CompanyTeamsApi;
})());
export { CompanyTeamsApi };
const CompanyTypesApi = ((() => {
	class CompanyTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Company Types Count
         * @param conditions
         */
		companyCompaniesTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/companies/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Company Types
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyCompaniesTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/companies/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Company Type By Id
         * @param id
         */
		companyCompaniesTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Company Type By Id
         * @param id
         */
		companyCompaniesTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Company Type
         * @param id
         * @param operations
         */
		companyCompaniesTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyCompaniesTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Company Type
         * @param id
         * @param companyType
         */
		companyCompaniesTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/companies/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyCompaniesTypesIdPut');
			}
			// verify required parameter 'companyType' is set
			if (params.companyType == null) {
				throw new Error('Missing required parameter companyType when calling companyCompaniesTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.companyType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Company Type
         * @param companyType
         */
		companyCompaniesTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/companies/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'companyType' is set
			if (params.companyType == null) {
				throw new Error('Missing required parameter companyType when calling companyCompaniesTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.companyType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CompanyTypesApi;
})());
export { CompanyTypesApi };
const ConfigurationStatusesApi = ((() => {
	class ConfigurationStatusesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Configuration Statuses Count
         * @param conditions
         */
		companyConfigurationsStatusesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/configurations/statuses/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Configuration Statuses
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyConfigurationsStatusesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/configurations/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Configuration Status By Id
         * @param id
         */
		companyConfigurationsStatusesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsStatusesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Configuration Status By Id
         * @param id
         */
		companyConfigurationsStatusesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsStatusesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Configuration Status
         * @param id
         * @param operations
         */
		companyConfigurationsStatusesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsStatusesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyConfigurationsStatusesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Configuration Status
         * @param id
         * @param configurationStatus
         */
		companyConfigurationsStatusesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsStatusesIdPut');
			}
			// verify required parameter 'configurationStatus' is set
			if (params.configurationStatus == null) {
				throw new Error('Missing required parameter configurationStatus when calling companyConfigurationsStatusesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.configurationStatus)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Configuration Status
         * @param configurationStatus
         */
		companyConfigurationsStatusesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/configurations/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'configurationStatus' is set
			if (params.configurationStatus == null) {
				throw new Error('Missing required parameter configurationStatus when calling companyConfigurationsStatusesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.configurationStatus)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ConfigurationStatusesApi;
})());
export { ConfigurationStatusesApi };
const ConfigurationTypeQuestionsApi = ((() => {
	class ConfigurationTypeQuestionsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Configuration Type Questions Count
         * @param id
         * @param conditions
         */
		companyConfigurationsTypesIdQuestionsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/types/{id}/questions/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Configuration Type Questions
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyConfigurationsTypesIdQuestionsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/types/{id}/questions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Configuration Type Question
         * @param id
         * @param configurationTypeQuestion
         */
		companyConfigurationsTypesIdQuestionsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/types/{id}/questions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsPost');
			}
			// verify required parameter 'configurationTypeQuestion' is set
			if (params.configurationTypeQuestion == null) {
				throw new Error('Missing required parameter configurationTypeQuestion when calling companyConfigurationsTypesIdQuestionsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.configurationTypeQuestion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Configuration Type Question By Id
         * @param id
         * @param questionId
         */
		companyConfigurationsTypesIdQuestionsQuestionIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/types/{id}/questions/{questionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'questionId' + '}', String(params.questionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsQuestionIdDelete');
			}
			// verify required parameter 'questionId' is set
			if (params.questionId == null) {
				throw new Error('Missing required parameter questionId when calling companyConfigurationsTypesIdQuestionsQuestionIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Configuration Type Question By Id
         * @param id
         * @param questionId
         */
		companyConfigurationsTypesIdQuestionsQuestionIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/types/{id}/questions/{questionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'questionId' + '}', String(params.questionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsQuestionIdGet');
			}
			// verify required parameter 'questionId' is set
			if (params.questionId == null) {
				throw new Error('Missing required parameter questionId when calling companyConfigurationsTypesIdQuestionsQuestionIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Configuration Type Question
         * @param id
         * @param questionId
         * @param operations
         */
		companyConfigurationsTypesIdQuestionsQuestionIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/types/{id}/questions/{questionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'questionId' + '}', String(params.questionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsQuestionIdPatch');
			}
			// verify required parameter 'questionId' is set
			if (params.questionId == null) {
				throw new Error('Missing required parameter questionId when calling companyConfigurationsTypesIdQuestionsQuestionIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyConfigurationsTypesIdQuestionsQuestionIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Configuration Type Question
         * @param id
         * @param questionId
         * @param configurationTypeQuestion
         */
		companyConfigurationsTypesIdQuestionsQuestionIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/types/{id}/questions/{questionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'questionId' + '}', String(params.questionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsQuestionIdPut');
			}
			// verify required parameter 'questionId' is set
			if (params.questionId == null) {
				throw new Error('Missing required parameter questionId when calling companyConfigurationsTypesIdQuestionsQuestionIdPut');
			}
			// verify required parameter 'configurationTypeQuestion' is set
			if (params.configurationTypeQuestion == null) {
				throw new Error('Missing required parameter configurationTypeQuestion when calling companyConfigurationsTypesIdQuestionsQuestionIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.configurationTypeQuestion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ConfigurationTypeQuestionsApi;
})());
export { ConfigurationTypeQuestionsApi };
const ConfigurationTypesApi = ((() => {
	class ConfigurationTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Configuration Types Count
         * @param conditions
         */
		companyConfigurationsTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/configurations/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Configuration Types
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyConfigurationsTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/configurations/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Configuration Type By Id
         * @param id
         */
		companyConfigurationsTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Configuration Type By Id
         * @param id
         */
		companyConfigurationsTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Configuration Type
         * @param id
         * @param operations
         */
		companyConfigurationsTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyConfigurationsTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Configuration Type
         * @param id
         * @param configurationType
         */
		companyConfigurationsTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdPut');
			}
			// verify required parameter 'configurationType' is set
			if (params.configurationType == null) {
				throw new Error('Missing required parameter configurationType when calling companyConfigurationsTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.configurationType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Configuration Type
         * @param configurationType
         */
		companyConfigurationsTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/configurations/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'configurationType' is set
			if (params.configurationType == null) {
				throw new Error('Missing required parameter configurationType when calling companyConfigurationsTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.configurationType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ConfigurationTypesApi;
})());
export { ConfigurationTypesApi };
const ConfigurationsApi = ((() => {
	class ConfigurationsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Configurations Count
         * @param conditions
         * @param managedIdentifier
         */
		companyConfigurationsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/configurations/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.managedIdentifier !== undefined) {
				queryParameters['managedIdentifier'] = params.managedIdentifier;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Configurations
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         * @param managedIdentifier
         */
		companyConfigurationsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/configurations`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			if (params.managedIdentifier !== undefined) {
				queryParameters['managedIdentifier'] = params.managedIdentifier;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Configuration By Id
         * @param id
         */
		companyConfigurationsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Configuration By Id
         * @param id
         */
		companyConfigurationsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Configuration
         * @param id
         * @param operations
         * @param managementSolutionName
         * @param managedIdentifier
         * @param type
         * @param level
         * @param childConfigurationsMatchingOn
         * @param inactivateConfigurationsMatchingOn
         * @param inactiveConfigurationStatusId
         */
		companyConfigurationsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyConfigurationsIdPatch');
			}
			if (params.managementSolutionName !== undefined) {
				queryParameters['managementSolutionName'] = params.managementSolutionName;
			}
			if (params.managedIdentifier !== undefined) {
				queryParameters['managedIdentifier'] = params.managedIdentifier;
			}
			if (params.type !== undefined) {
				queryParameters['type'] = params.type;
			}
			if (params.level !== undefined) {
				queryParameters['level'] = params.level;
			}
			if (params.childConfigurationsMatchingOn !== undefined) {
				queryParameters['childConfigurationsMatchingOn'] = params.childConfigurationsMatchingOn;
			}
			if (params.inactivateConfigurationsMatchingOn !== undefined) {
				queryParameters['inactivateConfigurationsMatchingOn'] = params.inactivateConfigurationsMatchingOn;
			}
			if (params.inactiveConfigurationStatusId !== undefined) {
				queryParameters['inactiveConfigurationStatusId'] = params.inactiveConfigurationStatusId;
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Configuration
         * @param id
         * @param configuration
         * @param managementSolutionName
         * @param managedIdentifier
         * @param type
         * @param level
         * @param childConfigurationsMatchingOn
         * @param inactivateConfigurationsMatchingOn
         * @param inactiveConfigurationStatusId
         */
		companyConfigurationsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/configurations/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyConfigurationsIdPut');
			}
			// verify required parameter 'configuration' is set
			if (params.configuration == null) {
				throw new Error('Missing required parameter configuration when calling companyConfigurationsIdPut');
			}
			if (params.managementSolutionName !== undefined) {
				queryParameters['managementSolutionName'] = params.managementSolutionName;
			}
			if (params.managedIdentifier !== undefined) {
				queryParameters['managedIdentifier'] = params.managedIdentifier;
			}
			if (params.type !== undefined) {
				queryParameters['type'] = params.type;
			}
			if (params.level !== undefined) {
				queryParameters['level'] = params.level;
			}
			if (params.childConfigurationsMatchingOn !== undefined) {
				queryParameters['childConfigurationsMatchingOn'] = params.childConfigurationsMatchingOn;
			}
			if (params.inactivateConfigurationsMatchingOn !== undefined) {
				queryParameters['inactivateConfigurationsMatchingOn'] = params.inactivateConfigurationsMatchingOn;
			}
			if (params.inactiveConfigurationStatusId !== undefined) {
				queryParameters['inactiveConfigurationStatusId'] = params.inactiveConfigurationStatusId;
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.configuration)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Configuration
         * @param configuration
         * @param managementSolutionName
         * @param managedIdentifier
         * @param type
         * @param level
         * @param childConfigurationsMatchingOn
         * @param inactivateConfigurationsMatchingOn
         * @param inactiveConfigurationStatusId
         */
		companyConfigurationsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/configurations`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'configuration' is set
			if (params.configuration == null) {
				throw new Error('Missing required parameter configuration when calling companyConfigurationsPost');
			}
			if (params.managementSolutionName !== undefined) {
				queryParameters['managementSolutionName'] = params.managementSolutionName;
			}
			if (params.managedIdentifier !== undefined) {
				queryParameters['managedIdentifier'] = params.managedIdentifier;
			}
			if (params.type !== undefined) {
				queryParameters['type'] = params.type;
			}
			if (params.level !== undefined) {
				queryParameters['level'] = params.level;
			}
			if (params.childConfigurationsMatchingOn !== undefined) {
				queryParameters['childConfigurationsMatchingOn'] = params.childConfigurationsMatchingOn;
			}
			if (params.inactivateConfigurationsMatchingOn !== undefined) {
				queryParameters['inactivateConfigurationsMatchingOn'] = params.inactivateConfigurationsMatchingOn;
			}
			if (params.inactiveConfigurationStatusId !== undefined) {
				queryParameters['inactiveConfigurationStatusId'] = params.inactiveConfigurationStatusId;
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.configuration)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ConfigurationsApi;
})());
export { ConfigurationsApi };
const ConnectWiseHostedSetupsApi = ((() => {
	class ConnectWiseHostedSetupsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Connect Wise Hosted Setups Count
         * @param conditions
         */
		systemConnectwisehostedsetupsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/connectwisehostedsetups/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Connect Wise Hosted Setups
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemConnectwisehostedsetupsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/connectwisehostedsetups`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Connect Wise Hosted Setup By Id
         * @param id
         */
		systemConnectwisehostedsetupsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/connectwisehostedsetups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemConnectwisehostedsetupsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Connect Wise Hosted Setup By Id
         * @param id
         */
		systemConnectwisehostedsetupsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/connectwisehostedsetups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemConnectwisehostedsetupsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Connect Wise Hosted Setup
         * @param id
         * @param operations
         */
		systemConnectwisehostedsetupsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/connectwisehostedsetups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemConnectwisehostedsetupsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemConnectwisehostedsetupsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Connect Wise Hosted Setup
         * @param id
         * @param connectWiseHostedSetup
         */
		systemConnectwisehostedsetupsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/connectwisehostedsetups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemConnectwisehostedsetupsIdPut');
			}
			// verify required parameter 'connectWiseHostedSetup' is set
			if (params.connectWiseHostedSetup == null) {
				throw new Error('Missing required parameter connectWiseHostedSetup when calling systemConnectwisehostedsetupsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.connectWiseHostedSetup)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Connect Wise Hosted Setup
         * @param connectWiseHostedSetup
         */
		systemConnectwisehostedsetupsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/connectwisehostedsetups`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'connectWiseHostedSetup' is set
			if (params.connectWiseHostedSetup == null) {
				throw new Error('Missing required parameter connectWiseHostedSetup when calling systemConnectwisehostedsetupsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.connectWiseHostedSetup)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ConnectWiseHostedSetupsApi;
})());
export { ConnectWiseHostedSetupsApi };
const ContactCommunicationsApi = ((() => {
	class ContactCommunicationsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Contact Communication By Id
         * @param id
         * @param communicationId
         */
		companyContactsIdCommunicationsCommunicationIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/communications/{communicationId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'communicationId' + '}', String(params.communicationId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsCommunicationIdDelete');
			}
			// verify required parameter 'communicationId' is set
			if (params.communicationId == null) {
				throw new Error('Missing required parameter communicationId when calling companyContactsIdCommunicationsCommunicationIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Communication By Id
         * @param id
         * @param communicationId
         */
		companyContactsIdCommunicationsCommunicationIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/communications/{communicationId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'communicationId' + '}', String(params.communicationId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsCommunicationIdGet');
			}
			// verify required parameter 'communicationId' is set
			if (params.communicationId == null) {
				throw new Error('Missing required parameter communicationId when calling companyContactsIdCommunicationsCommunicationIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Contact Communication
         * @param id
         * @param communicationId
         * @param operations
         */
		companyContactsIdCommunicationsCommunicationIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/communications/{communicationId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'communicationId' + '}', String(params.communicationId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsCommunicationIdPatch');
			}
			// verify required parameter 'communicationId' is set
			if (params.communicationId == null) {
				throw new Error('Missing required parameter communicationId when calling companyContactsIdCommunicationsCommunicationIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyContactsIdCommunicationsCommunicationIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Contact Communication
         * @param id
         * @param communicationId
         * @param contactCommunication
         */
		companyContactsIdCommunicationsCommunicationIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/communications/{communicationId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'communicationId' + '}', String(params.communicationId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsCommunicationIdPut');
			}
			// verify required parameter 'communicationId' is set
			if (params.communicationId == null) {
				throw new Error('Missing required parameter communicationId when calling companyContactsIdCommunicationsCommunicationIdPut');
			}
			// verify required parameter 'contactCommunication' is set
			if (params.contactCommunication == null) {
				throw new Error('Missing required parameter contactCommunication when calling companyContactsIdCommunicationsCommunicationIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.contactCommunication)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Communications Count
         * @param id
         * @param conditions
         */
		companyContactsIdCommunicationsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/communications/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Communications
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyContactsIdCommunicationsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/communications'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Contact Communication
         * @param id
         * @param contactCommunication
         */
		companyContactsIdCommunicationsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/communications'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsPost');
			}
			// verify required parameter 'contactCommunication' is set
			if (params.contactCommunication == null) {
				throw new Error('Missing required parameter contactCommunication when calling companyContactsIdCommunicationsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.contactCommunication)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ContactCommunicationsApi;
})());
export { ContactCommunicationsApi };
const ContactDepartmentsApi = ((() => {
	class ContactDepartmentsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Contact Departments Count
         * @param conditions
         */
		companyContactsDepartmentsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/departments/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Departments
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyContactsDepartmentsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/departments`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Contact Department By Id
         * @param id
         */
		companyContactsDepartmentsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/departments/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsDepartmentsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Department By Id
         * @param id
         */
		companyContactsDepartmentsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/departments/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsDepartmentsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Contact Department
         * @param id
         * @param operations
         */
		companyContactsDepartmentsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/departments/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsDepartmentsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyContactsDepartmentsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Contact Department
         * @param id
         * @param contactDepartment
         */
		companyContactsDepartmentsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/departments/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsDepartmentsIdPut');
			}
			// verify required parameter 'contactDepartment' is set
			if (params.contactDepartment == null) {
				throw new Error('Missing required parameter contactDepartment when calling companyContactsDepartmentsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.contactDepartment)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Contact Department
         * @param contactDepartment
         */
		companyContactsDepartmentsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/departments`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'contactDepartment' is set
			if (params.contactDepartment == null) {
				throw new Error('Missing required parameter contactDepartment when calling companyContactsDepartmentsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.contactDepartment)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ContactDepartmentsApi;
})());
export { ContactDepartmentsApi };
const ContactNotesApi = ((() => {
	class ContactNotesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Contact Notes Count
         * @param id
         * @param conditions
         */
		companyContactsIdNotesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/notes/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdNotesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Notes
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyContactsIdNotesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/notes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdNotesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Contact Note By Id
         * @param id
         * @param noteId
         */
		companyContactsIdNotesNoteIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdNotesNoteIdDelete');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling companyContactsIdNotesNoteIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Note By Id
         * @param id
         * @param noteId
         */
		companyContactsIdNotesNoteIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdNotesNoteIdGet');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling companyContactsIdNotesNoteIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Contact Note
         * @param id
         * @param noteId
         * @param operations
         */
		companyContactsIdNotesNoteIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdNotesNoteIdPatch');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling companyContactsIdNotesNoteIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyContactsIdNotesNoteIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Contact Note
         * @param id
         * @param noteId
         * @param contactNote
         */
		companyContactsIdNotesNoteIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdNotesNoteIdPut');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling companyContactsIdNotesNoteIdPut');
			}
			// verify required parameter 'contactNote' is set
			if (params.contactNote == null) {
				throw new Error('Missing required parameter contactNote when calling companyContactsIdNotesNoteIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.contactNote)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Contact Note
         * @param id
         * @param contactNote
         */
		companyContactsIdNotesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/notes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdNotesPost');
			}
			// verify required parameter 'contactNote' is set
			if (params.contactNote == null) {
				throw new Error('Missing required parameter contactNote when calling companyContactsIdNotesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.contactNote)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ContactNotesApi;
})());
export { ContactNotesApi };
const ContactRelationshipsApi = ((() => {
	class ContactRelationshipsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Contact Relationships Count
         * @param conditions
         */
		companyContactsRelationshipsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/relationships/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Relationships
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyContactsRelationshipsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/relationships`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Contact Relationship By Id
         * @param id
         */
		companyContactsRelationshipsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/relationships/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsRelationshipsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Relationship By Id
         * @param id
         */
		companyContactsRelationshipsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/relationships/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsRelationshipsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Contact Relationship
         * @param id
         * @param operations
         */
		companyContactsRelationshipsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/relationships/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsRelationshipsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyContactsRelationshipsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Contact Relationship
         * @param id
         * @param contactRelationship
         */
		companyContactsRelationshipsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/relationships/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsRelationshipsIdPut');
			}
			// verify required parameter 'contactRelationship' is set
			if (params.contactRelationship == null) {
				throw new Error('Missing required parameter contactRelationship when calling companyContactsRelationshipsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.contactRelationship)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Contact Relationship
         * @param contactRelationship
         */
		companyContactsRelationshipsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/relationships`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'contactRelationship' is set
			if (params.contactRelationship == null) {
				throw new Error('Missing required parameter contactRelationship when calling companyContactsRelationshipsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.contactRelationship)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ContactRelationshipsApi;
})());
export { ContactRelationshipsApi };
const ContactTracksApi = ((() => {
	class ContactTracksApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Tracks Count
         * @param id
         * @param conditions
         */
		companyContactsIdTracksCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/tracks/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdTracksCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Tracks
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyContactsIdTracksGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/tracks'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdTracksGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Track
         * @param id
         * @param track
         */
		companyContactsIdTracksPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/tracks'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdTracksPost');
			}
			// verify required parameter 'track' is set
			if (params.track == null) {
				throw new Error('Missing required parameter track when calling companyContactsIdTracksPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.track)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Track By Id
         * @param id
         * @param trackId
         */
		companyContactsIdTracksTrackIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/tracks/{trackId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'trackId' + '}', String(params.trackId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdTracksTrackIdDelete');
			}
			// verify required parameter 'trackId' is set
			if (params.trackId == null) {
				throw new Error('Missing required parameter trackId when calling companyContactsIdTracksTrackIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Track By Id
         * @param id
         * @param trackId
         */
		companyContactsIdTracksTrackIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/tracks/{trackId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'trackId' + '}', String(params.trackId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdTracksTrackIdGet');
			}
			// verify required parameter 'trackId' is set
			if (params.trackId == null) {
				throw new Error('Missing required parameter trackId when calling companyContactsIdTracksTrackIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ContactTracksApi;
})());
export { ContactTracksApi };
const ContactTypesApi = ((() => {
	class ContactTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Contact Types Count
         * @param conditions
         */
		companyContactsTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Types
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyContactsTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Contact Type By Id
         * @param id
         */
		companyContactsTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Type By Id
         * @param id
         */
		companyContactsTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Contact Type
         * @param id
         * @param operations
         */
		companyContactsTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyContactsTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Contact Type
         * @param id
         * @param contactType
         */
		companyContactsTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsTypesIdPut');
			}
			// verify required parameter 'contactType' is set
			if (params.contactType == null) {
				throw new Error('Missing required parameter contactType when calling companyContactsTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.contactType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Contact Type
         * @param contactType
         */
		companyContactsTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'contactType' is set
			if (params.contactType == null) {
				throw new Error('Missing required parameter contactType when calling companyContactsTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.contactType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ContactTypesApi;
})());
export { ContactTypesApi };
const ContactsApi = ((() => {
	class ContactsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Contacts Count
         * @param conditions
         * @param customFieldConditions
         * @param childConditions
         */
		companyContactsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			if (params.childConditions !== undefined) {
				queryParameters['childConditions'] = params.childConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contacts
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyContactsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Contact By Id
         * @param id
         * @param transferContactId
         */
		companyContactsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdDelete');
			}
			if (params.transferContactId !== undefined) {
				queryParameters['transferContactId'] = params.transferContactId;
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact By Id
         * @param id
         */
		companyContactsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Contact Image
         * @param id
         * @param useDefaultFlag
         * @param lastModified
         */
		companyContactsIdImageGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/image'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdImageGet');
			}
			if (params.useDefaultFlag !== undefined) {
				queryParameters['useDefaultFlag'] = params.useDefaultFlag;
			}
			if (params.lastModified !== undefined) {
				queryParameters['lastModified'] = params.lastModified;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Contact
         * @param id
         * @param operations
         */
		companyContactsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyContactsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Portal Security
         * @param id
         */
		companyContactsIdPortalSecurityGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}/portalSecurity'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdPortalSecurityGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Contact
         * @param id
         * @param contact
         */
		companyContactsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/contacts/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyContactsIdPut');
			}
			// verify required parameter 'contact' is set
			if (params.contact == null) {
				throw new Error('Missing required parameter contact when calling companyContactsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.contact)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Contact
         * @param contact
         */
		companyContactsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'contact' is set
			if (params.contact == null) {
				throw new Error('Missing required parameter contact when calling companyContactsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.contact)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Request Password
         * @param request
         */
		companyContactsRequestPasswordPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/requestPassword`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'request' is set
			if (params.request == null) {
				throw new Error('Missing required parameter request when calling companyContactsRequestPasswordPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.request)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Validate Portal Credentials
         * @param request
         */
		companyContactsValidatePortalCredentialsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/contacts/validatePortalCredentials`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'request' is set
			if (params.request == null) {
				throw new Error('Missing required parameter request when calling companyContactsValidatePortalCredentialsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.request)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ContactsApi;
})());
export { ContactsApi };
const CurrenciesApi = ((() => {
	class CurrenciesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Currencies Count
         * @param conditions
         */
		financeCurrenciesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/currencies/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Currencies
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeCurrenciesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/currencies`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Currency By Id
         * @param id
         */
		financeCurrenciesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/currencies/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeCurrenciesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Currency By Id
         * @param id
         */
		financeCurrenciesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/currencies/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeCurrenciesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Currency
         * @param id
         * @param operations
         */
		financeCurrenciesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/currencies/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeCurrenciesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeCurrenciesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Currency
         * @param id
         * @param currency
         */
		financeCurrenciesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/currencies/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeCurrenciesIdPut');
			}
			// verify required parameter 'currency' is set
			if (params.currency == null) {
				throw new Error('Missing required parameter currency when calling financeCurrenciesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.currency)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Currency
         * @param currency
         */
		financeCurrenciesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/currencies`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'currency' is set
			if (params.currency == null) {
				throw new Error('Missing required parameter currency when calling financeCurrenciesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.currency)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return CurrenciesApi;
})());
export { CurrenciesApi };
const DocumentsApi = ((() => {
	class DocumentsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Documents Info Count
         * @param recordType
         * @param recordId
         */
		systemDocumentsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/documents/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.recordType !== undefined) {
				queryParameters['recordType'] = params.recordType;
			}
			if (params.recordId !== undefined) {
				queryParameters['recordId'] = params.recordId;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Documents Info
         * @param recordType
         * @param recordId
         * @param page
         * @param pageSize
         */
		systemDocumentsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/documents`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.recordType !== undefined) {
				queryParameters['recordType'] = params.recordType;
			}
			if (params.recordId !== undefined) {
				queryParameters['recordId'] = params.recordId;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Document Info By Id
         * @param id
         */
		systemDocumentsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/documents/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemDocumentsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Download Document
         * @param id
         * @param lastModified
         */
		systemDocumentsIdDownloadGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/documents/{id}/download'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemDocumentsIdDownloadGet');
			}
			if (params.lastModified !== undefined) {
				queryParameters['lastModified'] = params.lastModified;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Document Info By Id
         * @param id
         */
		systemDocumentsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/documents/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemDocumentsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Document By Id
         * @param id
         * @param recordId Entity id
         * @param recordType Entity type
         * @param title Document title
         * @param url Document url
         * @param file File to upload
         * @param privateFlag Indicates if document is private
         * @param readOnlyFlag Indicates if document is readonly
         */
		systemDocumentsIdPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/documents/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			const formParams = {};
			headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemDocumentsIdPost');
			}
			// verify required parameter 'recordId' is set
			if (params.recordId == null) {
				throw new Error('Missing required parameter recordId when calling systemDocumentsIdPost');
			}
			// verify required parameter 'recordType' is set
			if (params.recordType == null) {
				throw new Error('Missing required parameter recordType when calling systemDocumentsIdPost');
			}
			// verify required parameter 'title' is set
			if (params.title == null) {
				throw new Error('Missing required parameter title when calling systemDocumentsIdPost');
			}
			// verify required parameter 'url' is set
			if (params.url == null) {
				throw new Error('Missing required parameter url when calling systemDocumentsIdPost');
			}
			formParams['file'] = params.file;
			formParams['recordId'] = params.recordId;
			formParams['recordType'] = params.recordType;
			formParams['title'] = params.title;
			formParams['url'] = params.url;
			formParams['privateFlag'] = params.privateFlag;
			formParams['readOnlyFlag'] = params.readOnlyFlag;
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: querystring.stringify(formParams)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Insert Document
         * @param recordType Entity type
         * @param title Document title
         * @param url Document url
         * @param file File to upload
         * @param recordId Entity id
         * @param privateFlag Indicates if document is private
         * @param readOnlyFlag Indicates if document is readonly
         */
		systemDocumentsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/documents`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			const formParams = {};
			headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
			// verify required parameter 'recordType' is set
			if (params.recordType == null) {
				throw new Error('Missing required parameter recordType when calling systemDocumentsPost');
			}
			// verify required parameter 'title' is set
			if (params.title == null) {
				throw new Error('Missing required parameter title when calling systemDocumentsPost');
			}
			// verify required parameter 'url' is set
			if (params.url == null) {
				throw new Error('Missing required parameter url when calling systemDocumentsPost');
			}
			formParams['file'] = params.file;
			formParams['recordId'] = params.recordId;
			formParams['recordType'] = params.recordType;
			formParams['title'] = params.title;
			formParams['url'] = params.url;
			formParams['privateFlag'] = params.privateFlag;
			formParams['readOnlyFlag'] = params.readOnlyFlag;
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: querystring.stringify(formParams)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Upload Sample Page
         */
		systemDocumentsUploadsampleGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/documents/uploadsample`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return DocumentsApi;
})());
export { DocumentsApi };
const ExpenseEntriesApi = ((() => {
	class ExpenseEntriesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Expense Entries Count
         * @param conditions
         * @param customFieldConditions
         * @param childConditions
         */
		expenseEntriesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/expense/entries/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			if (params.childConditions !== undefined) {
				queryParameters['childConditions'] = params.childConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Expense Entries
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		expenseEntriesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/expense/entries`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Expense Entry By Id
         * @param id
         */
		expenseEntriesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/expense/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling expenseEntriesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Expense Entry By Id
         * @param id
         */
		expenseEntriesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/expense/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling expenseEntriesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Expense Entry
         * @param id
         * @param operations
         */
		expenseEntriesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/expense/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling expenseEntriesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling expenseEntriesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Expense Entry
         * @param id
         * @param expenseEntry
         */
		expenseEntriesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/expense/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling expenseEntriesIdPut');
			}
			// verify required parameter 'expenseEntry' is set
			if (params.expenseEntry == null) {
				throw new Error('Missing required parameter expenseEntry when calling expenseEntriesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.expenseEntry)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Expense Entry
         * @param expenseEntry
         */
		expenseEntriesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/expense/entries`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'expenseEntry' is set
			if (params.expenseEntry == null) {
				throw new Error('Missing required parameter expenseEntry when calling expenseEntriesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.expenseEntry)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ExpenseEntriesApi;
})());
export { ExpenseEntriesApi };
const ExpenseTypesApi = ((() => {
	class ExpenseTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Expense Types Count
         * @param conditions
         */
		expenseTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/expense/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Expense Types
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		expenseTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/expense/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Expense Type By Id
         * @param id
         */
		expenseTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/expense/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling expenseTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Expense Type By Id
         * @param id
         */
		expenseTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/expense/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling expenseTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Expense Type
         * @param id
         * @param operations
         */
		expenseTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/expense/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling expenseTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling expenseTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Expense Type
         * @param id
         * @param expenseType
         */
		expenseTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/expense/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling expenseTypesIdPut');
			}
			// verify required parameter 'expenseType' is set
			if (params.expenseType == null) {
				throw new Error('Missing required parameter expenseType when calling expenseTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.expenseType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Expense Type
         * @param expenseType
         */
		expenseTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/expense/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'expenseType' is set
			if (params.expenseType == null) {
				throw new Error('Missing required parameter expenseType when calling expenseTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.expenseType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ExpenseTypesApi;
})());
export { ExpenseTypesApi };
const GroupCompaniesApi = ((() => {
	class GroupCompaniesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Marketing Company By Id
         * @param id
         * @param companyId
         */
		marketingGroupsIdCompaniesCompanyIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/companies/{companyId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'companyId' + '}', String(params.companyId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesCompanyIdDelete');
			}
			// verify required parameter 'companyId' is set
			if (params.companyId == null) {
				throw new Error('Missing required parameter companyId when calling marketingGroupsIdCompaniesCompanyIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Marketing Company By Id
         * @param id
         * @param companyId
         */
		marketingGroupsIdCompaniesCompanyIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/companies/{companyId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'companyId' + '}', String(params.companyId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesCompanyIdGet');
			}
			// verify required parameter 'companyId' is set
			if (params.companyId == null) {
				throw new Error('Missing required parameter companyId when calling marketingGroupsIdCompaniesCompanyIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Marketing Company
         * @param id
         * @param companyId
         * @param operations
         */
		marketingGroupsIdCompaniesCompanyIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/companies/{companyId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'companyId' + '}', String(params.companyId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesCompanyIdPatch');
			}
			// verify required parameter 'companyId' is set
			if (params.companyId == null) {
				throw new Error('Missing required parameter companyId when calling marketingGroupsIdCompaniesCompanyIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling marketingGroupsIdCompaniesCompanyIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Marketing Company
         * @param id
         * @param companyId
         * @param marketingCompany
         */
		marketingGroupsIdCompaniesCompanyIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/companies/{companyId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'companyId' + '}', String(params.companyId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesCompanyIdPut');
			}
			// verify required parameter 'companyId' is set
			if (params.companyId == null) {
				throw new Error('Missing required parameter companyId when calling marketingGroupsIdCompaniesCompanyIdPut');
			}
			// verify required parameter 'marketingCompany' is set
			if (params.marketingCompany == null) {
				throw new Error('Missing required parameter marketingCompany when calling marketingGroupsIdCompaniesCompanyIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.marketingCompany)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Marketing Companys Count
         * @param id
         * @param conditions
         */
		marketingGroupsIdCompaniesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/companies/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Marketing Companys
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		marketingGroupsIdCompaniesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/companies'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Marketing Company
         * @param id
         * @param marketingCompany
         */
		marketingGroupsIdCompaniesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/companies'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesPost');
			}
			// verify required parameter 'marketingCompany' is set
			if (params.marketingCompany == null) {
				throw new Error('Missing required parameter marketingCompany when calling marketingGroupsIdCompaniesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.marketingCompany)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return GroupCompaniesApi;
})());
export { GroupCompaniesApi };
const GroupContactsApi = ((() => {
	class GroupContactsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Marketing Contact By Id
         * @param id
         * @param contactId
         */
		marketingGroupsIdContactsContactIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/contacts/{contactId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'contactId' + '}', String(params.contactId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdContactsContactIdDelete');
			}
			// verify required parameter 'contactId' is set
			if (params.contactId == null) {
				throw new Error('Missing required parameter contactId when calling marketingGroupsIdContactsContactIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Marketing Contact By Id
         * @param id
         * @param contactId
         */
		marketingGroupsIdContactsContactIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/contacts/{contactId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'contactId' + '}', String(params.contactId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdContactsContactIdGet');
			}
			// verify required parameter 'contactId' is set
			if (params.contactId == null) {
				throw new Error('Missing required parameter contactId when calling marketingGroupsIdContactsContactIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Marketing Contact
         * @param id
         * @param contactId
         * @param operations
         */
		marketingGroupsIdContactsContactIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/contacts/{contactId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'contactId' + '}', String(params.contactId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdContactsContactIdPatch');
			}
			// verify required parameter 'contactId' is set
			if (params.contactId == null) {
				throw new Error('Missing required parameter contactId when calling marketingGroupsIdContactsContactIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling marketingGroupsIdContactsContactIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Marketing Contact
         * @param id
         * @param contactId
         * @param marketingContact
         */
		marketingGroupsIdContactsContactIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/contacts/{contactId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'contactId' + '}', String(params.contactId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdContactsContactIdPut');
			}
			// verify required parameter 'contactId' is set
			if (params.contactId == null) {
				throw new Error('Missing required parameter contactId when calling marketingGroupsIdContactsContactIdPut');
			}
			// verify required parameter 'marketingContact' is set
			if (params.marketingContact == null) {
				throw new Error('Missing required parameter marketingContact when calling marketingGroupsIdContactsContactIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.marketingContact)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Marketing Contacts Count
         * @param id
         * @param conditions
         */
		marketingGroupsIdContactsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/contacts/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdContactsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Marketing Contacts
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		marketingGroupsIdContactsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/contacts'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdContactsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Marketing Contact
         * @param id
         * @param marketingContact
         */
		marketingGroupsIdContactsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}/contacts'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdContactsPost');
			}
			// verify required parameter 'marketingContact' is set
			if (params.marketingContact == null) {
				throw new Error('Missing required parameter marketingContact when calling marketingGroupsIdContactsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.marketingContact)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return GroupContactsApi;
})());
export { GroupContactsApi };
const GroupsApi = ((() => {
	class GroupsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Groups Count
         * @param conditions
         */
		marketingGroupsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/groups/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Groups
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		marketingGroupsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/groups`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Group By Id
         * @param id
         */
		marketingGroupsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Group By Id
         * @param id
         */
		marketingGroupsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Group
         * @param id
         * @param operations
         */
		marketingGroupsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling marketingGroupsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Group
         * @param id
         * @param group
         */
		marketingGroupsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/marketing/groups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling marketingGroupsIdPut');
			}
			// verify required parameter 'group' is set
			if (params.group == null) {
				throw new Error('Missing required parameter group when calling marketingGroupsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.group)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Group
         * @param group
         */
		marketingGroupsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/marketing/groups`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'group' is set
			if (params.group == null) {
				throw new Error('Missing required parameter group when calling marketingGroupsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.group)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return GroupsApi;
})());
export { GroupsApi };
const InOutBoardsApi = ((() => {
	class InOutBoardsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get In Out Board Count
         * @param conditions
         */
		systemInOutBoardsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/inOutBoards/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get In Out Board
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemInOutBoardsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/inOutBoards`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete In Out Board By Id
         * @param id
         */
		systemInOutBoardsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/inOutBoards/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemInOutBoardsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get In Out Board By Id
         * @param id
         */
		systemInOutBoardsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/inOutBoards/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemInOutBoardsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update In Out Board
         * @param id
         * @param operations
         */
		systemInOutBoardsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/inOutBoards/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemInOutBoardsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemInOutBoardsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace In Out Board
         * @param id
         * @param inOutBoard
         */
		systemInOutBoardsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/inOutBoards/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemInOutBoardsIdPut');
			}
			// verify required parameter 'inOutBoard' is set
			if (params.inOutBoard == null) {
				throw new Error('Missing required parameter inOutBoard when calling systemInOutBoardsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.inOutBoard)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create In Out Board
         * @param inOutBoard
         */
		systemInOutBoardsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/inOutBoards`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'inOutBoard' is set
			if (params.inOutBoard == null) {
				throw new Error('Missing required parameter inOutBoard when calling systemInOutBoardsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.inOutBoard)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return InOutBoardsApi;
})());
export { InOutBoardsApi };
const InOutTypesApi = ((() => {
	class InOutTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get In Out Type Count
         * @param conditions
         */
		systemInOutTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/inOutTypes/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get In Out Type
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemInOutTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/inOutTypes`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete In Out Type By Id
         * @param id
         */
		systemInOutTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/inOutTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemInOutTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get In Out Type By Id
         * @param id
         */
		systemInOutTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/inOutTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemInOutTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update In Out Type
         * @param id
         * @param operations
         */
		systemInOutTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/inOutTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemInOutTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemInOutTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace In Out Type
         * @param id
         * @param inOutType
         */
		systemInOutTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/inOutTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemInOutTypesIdPut');
			}
			// verify required parameter 'inOutType' is set
			if (params.inOutType == null) {
				throw new Error('Missing required parameter inOutType when calling systemInOutTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.inOutType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create In Out Type
         * @param inOutType
         */
		systemInOutTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/inOutTypes`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'inOutType' is set
			if (params.inOutType == null) {
				throw new Error('Missing required parameter inOutType when calling systemInOutTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.inOutType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return InOutTypesApi;
})());
export { InOutTypesApi };
const InfoApi = ((() => {
	class InfoApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Infos
         */
		systemInfoGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/info`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return InfoApi;
})());
export { InfoApi };
const InvoicePaymentsApi = ((() => {
	class InvoicePaymentsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Payments
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeInvoicesIdPaymentsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/invoices/{id}/payments'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Payment By Id
         * @param id
         * @param paymentId
         */
		financeInvoicesIdPaymentsPaymentIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/invoices/{id}/payments/{paymentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'paymentId' + '}', String(params.paymentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsPaymentIdDelete');
			}
			// verify required parameter 'paymentId' is set
			if (params.paymentId == null) {
				throw new Error('Missing required parameter paymentId when calling financeInvoicesIdPaymentsPaymentIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Payment By Id
         * @param id
         * @param paymentId
         */
		financeInvoicesIdPaymentsPaymentIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/invoices/{id}/payments/{paymentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'paymentId' + '}', String(params.paymentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsPaymentIdGet');
			}
			// verify required parameter 'paymentId' is set
			if (params.paymentId == null) {
				throw new Error('Missing required parameter paymentId when calling financeInvoicesIdPaymentsPaymentIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Payment
         * @param id
         * @param paymentId
         * @param operations
         */
		financeInvoicesIdPaymentsPaymentIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/invoices/{id}/payments/{paymentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'paymentId' + '}', String(params.paymentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsPaymentIdPatch');
			}
			// verify required parameter 'paymentId' is set
			if (params.paymentId == null) {
				throw new Error('Missing required parameter paymentId when calling financeInvoicesIdPaymentsPaymentIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeInvoicesIdPaymentsPaymentIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Payment
         * @param id
         * @param paymentId
         * @param payment
         */
		financeInvoicesIdPaymentsPaymentIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/invoices/{id}/payments/{paymentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'paymentId' + '}', String(params.paymentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsPaymentIdPut');
			}
			// verify required parameter 'paymentId' is set
			if (params.paymentId == null) {
				throw new Error('Missing required parameter paymentId when calling financeInvoicesIdPaymentsPaymentIdPut');
			}
			// verify required parameter 'payment' is set
			if (params.payment == null) {
				throw new Error('Missing required parameter payment when calling financeInvoicesIdPaymentsPaymentIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.payment)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Payment
         * @param id
         * @param payment
         */
		financeInvoicesIdPaymentsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/invoices/{id}/payments'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsPost');
			}
			// verify required parameter 'payment' is set
			if (params.payment == null) {
				throw new Error('Missing required parameter payment when calling financeInvoicesIdPaymentsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.payment)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return InvoicePaymentsApi;
})());
export { InvoicePaymentsApi };
const InvoicesApi = ((() => {
	class InvoicesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Invoices Count
         * @param conditions
         * @param customFieldConditions
         */
		financeInvoicesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/invoices/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Invoices
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeInvoicesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/invoices`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Invoice By Id
         * @param id
         */
		financeInvoicesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/invoices/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeInvoicesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Invoice By Id
         * @param id
         */
		financeInvoicesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/invoices/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeInvoicesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Invoice
         * @param id
         * @param operations
         */
		financeInvoicesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/invoices/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeInvoicesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeInvoicesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Invoice Pdf
         * @param id
         */
		financeInvoicesIdPdfGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/invoices/{id}/pdf'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeInvoicesIdPdfGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Invoice
         * @param id
         * @param invoice
         */
		financeInvoicesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/invoices/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeInvoicesIdPut');
			}
			// verify required parameter 'invoice' is set
			if (params.invoice == null) {
				throw new Error('Missing required parameter invoice when calling financeInvoicesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.invoice)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Invoice
         * @param invoice
         */
		financeInvoicesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/invoices`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'invoice' is set
			if (params.invoice == null) {
				throw new Error('Missing required parameter invoice when calling financeInvoicesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.invoice)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return InvoicesApi;
})());
export { InvoicesApi };
const KnowledgeBaseArticlesApi = ((() => {
	class KnowledgeBaseArticlesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Knowledge Base Articles Count
         * @param conditions
         * @param customFieldConditions
         */
		serviceKnowledgeBaseArticlesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/knowledgeBaseArticles/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Knowledge Base Articles
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceKnowledgeBaseArticlesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/knowledgeBaseArticles`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Knowledge Base Article By Id
         * @param id
         */
		serviceKnowledgeBaseArticlesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/knowledgeBaseArticles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceKnowledgeBaseArticlesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Knowledge Base Article By Id
         * @param id
         */
		serviceKnowledgeBaseArticlesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/knowledgeBaseArticles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceKnowledgeBaseArticlesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Knowledge Base Article
         * @param id
         * @param operations
         */
		serviceKnowledgeBaseArticlesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/knowledgeBaseArticles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceKnowledgeBaseArticlesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceKnowledgeBaseArticlesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Knowledge Base Article
         * @param id
         * @param knowledgeBaseArticle
         */
		serviceKnowledgeBaseArticlesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/knowledgeBaseArticles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceKnowledgeBaseArticlesIdPut');
			}
			// verify required parameter 'knowledgeBaseArticle' is set
			if (params.knowledgeBaseArticle == null) {
				throw new Error('Missing required parameter knowledgeBaseArticle when calling serviceKnowledgeBaseArticlesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.knowledgeBaseArticle)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Knowledge Base Article
         * @param knowledgeBaseArticle
         */
		serviceKnowledgeBaseArticlesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/knowledgeBaseArticles`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'knowledgeBaseArticle' is set
			if (params.knowledgeBaseArticle == null) {
				throw new Error('Missing required parameter knowledgeBaseArticle when calling serviceKnowledgeBaseArticlesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.knowledgeBaseArticle)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return KnowledgeBaseArticlesApi;
})());
export { KnowledgeBaseArticlesApi };
const LinksApi = ((() => {
	class LinksApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Links Count
         * @param conditions
         */
		systemLinksCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/links/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Links
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemLinksGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/links`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Link By Id
         * @param id
         */
		systemLinksIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/links/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemLinksIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Link By Id
         * @param id
         */
		systemLinksIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/links/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemLinksIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Link
         * @param id
         * @param operations
         */
		systemLinksIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/links/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemLinksIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemLinksIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Link
         * @param id
         * @param link
         */
		systemLinksIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/links/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemLinksIdPut');
			}
			// verify required parameter 'link' is set
			if (params.link == null) {
				throw new Error('Missing required parameter link when calling systemLinksIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.link)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Link
         * @param link
         */
		systemLinksPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/links`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'link' is set
			if (params.link == null) {
				throw new Error('Missing required parameter link when calling systemLinksPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.link)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return LinksApi;
})());
export { LinksApi };
const LocationsApi = ((() => {
	class LocationsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Create Locations Count
         * @param conditions
         */
		serviceLocationsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/locations/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Locations
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceLocationsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/locations`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Location By Id
         * @param id
         */
		serviceLocationsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/locations/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceLocationsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Location By Id
         * @param id
         */
		serviceLocationsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/locations/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceLocationsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Location
         * @param id
         * @param operations
         */
		serviceLocationsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/locations/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceLocationsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceLocationsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Location
         * @param id
         * @param location
         */
		serviceLocationsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/locations/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceLocationsIdPut');
			}
			// verify required parameter 'location' is set
			if (params.location == null) {
				throw new Error('Missing required parameter location when calling serviceLocationsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.location)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Location
         * @param location
         */
		serviceLocationsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/locations`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'location' is set
			if (params.location == null) {
				throw new Error('Missing required parameter location when calling serviceLocationsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.location)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return LocationsApi;
})());
export { LocationsApi };
const ManagementBackupsApi = ((() => {
	class ManagementBackupsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Management Backup Count
         * @param conditions
         */
		companyManagementBackupsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/managementBackups/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Management Backup
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyManagementBackupsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/managementBackups`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Management Backup By Id
         * @param id
         */
		companyManagementBackupsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/managementBackups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyManagementBackupsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Management Backup By Id
         * @param id
         */
		companyManagementBackupsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/managementBackups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyManagementBackupsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Management Backup
         * @param id
         * @param operations
         */
		companyManagementBackupsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/managementBackups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyManagementBackupsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyManagementBackupsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Management Backup
         * @param id
         * @param managementBackup
         */
		companyManagementBackupsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/managementBackups/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyManagementBackupsIdPut');
			}
			// verify required parameter 'managementBackup' is set
			if (params.managementBackup == null) {
				throw new Error('Missing required parameter managementBackup when calling companyManagementBackupsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.managementBackup)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Management Backup
         * @param managementBackup
         */
		companyManagementBackupsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/managementBackups`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'managementBackup' is set
			if (params.managementBackup == null) {
				throw new Error('Missing required parameter managementBackup when calling companyManagementBackupsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.managementBackup)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ManagementBackupsApi;
})());
export { ManagementBackupsApi };
const ManagementEmailsApi = ((() => {
	class ManagementEmailsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Management Email Count
         * @param conditions
         */
		companyManagementEmailsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/managementEmails/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Management Email
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyManagementEmailsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/managementEmails`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Management Email By Id
         * @param id
         */
		companyManagementEmailsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/managementEmails/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyManagementEmailsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Management Email By Id
         * @param id
         */
		companyManagementEmailsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/managementEmails/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyManagementEmailsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Management Email
         * @param id
         * @param operations
         */
		companyManagementEmailsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/managementEmails/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyManagementEmailsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyManagementEmailsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Management Email
         * @param id
         * @param managementEmail
         */
		companyManagementEmailsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/managementEmails/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyManagementEmailsIdPut');
			}
			// verify required parameter 'managementEmail' is set
			if (params.managementEmail == null) {
				throw new Error('Missing required parameter managementEmail when calling companyManagementEmailsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.managementEmail)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Management Email
         * @param managementEmail
         */
		companyManagementEmailsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/managementEmails`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'managementEmail' is set
			if (params.managementEmail == null) {
				throw new Error('Missing required parameter managementEmail when calling companyManagementEmailsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.managementEmail)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ManagementEmailsApi;
})());
export { ManagementEmailsApi };
const ManufacturersApi = ((() => {
	class ManufacturersApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Manufacturers Count
         * @param conditions
         */
		procurementManufacturersCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/manufacturers/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Manufacturers
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementManufacturersGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/manufacturers`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Manufacturer By Id
         * @param id
         */
		procurementManufacturersIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/manufacturers/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementManufacturersIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Manufacturer By Id
         * @param id
         */
		procurementManufacturersIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/manufacturers/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementManufacturersIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Manufacturer
         * @param id
         * @param operations
         */
		procurementManufacturersIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/manufacturers/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementManufacturersIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementManufacturersIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Manufacturer
         * @param id
         * @param manufacturer
         */
		procurementManufacturersIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/manufacturers/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementManufacturersIdPut');
			}
			// verify required parameter 'manufacturer' is set
			if (params.manufacturer == null) {
				throw new Error('Missing required parameter manufacturer when calling procurementManufacturersIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.manufacturer)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Manufacturer
         * @param manufacturer
         */
		procurementManufacturersPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/manufacturers`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'manufacturer' is set
			if (params.manufacturer == null) {
				throw new Error('Missing required parameter manufacturer when calling procurementManufacturersPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.manufacturer)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ManufacturersApi;
})());
export { ManufacturersApi };
const MarketDescriptionsApi = ((() => {
	class MarketDescriptionsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Market Description Count
         * @param conditions
         */
		companyMarketDescriptionsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/marketDescriptions/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Market Description
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyMarketDescriptionsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/marketDescriptions`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Market Description By Id
         * @param id
         */
		companyMarketDescriptionsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/marketDescriptions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyMarketDescriptionsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Market Description By Id
         * @param id
         */
		companyMarketDescriptionsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/marketDescriptions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyMarketDescriptionsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Market Description
         * @param id
         * @param operations
         */
		companyMarketDescriptionsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/marketDescriptions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyMarketDescriptionsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyMarketDescriptionsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Market Description
         * @param id
         * @param marketDescription
         */
		companyMarketDescriptionsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/marketDescriptions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyMarketDescriptionsIdPut');
			}
			// verify required parameter 'marketDescription' is set
			if (params.marketDescription == null) {
				throw new Error('Missing required parameter marketDescription when calling companyMarketDescriptionsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.marketDescription)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Market Description
         * @param marketDescription
         */
		companyMarketDescriptionsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/marketDescriptions`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'marketDescription' is set
			if (params.marketDescription == null) {
				throw new Error('Missing required parameter marketDescription when calling companyMarketDescriptionsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.marketDescription)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return MarketDescriptionsApi;
})());
export { MarketDescriptionsApi };
const MemberTypesApi = ((() => {
	class MemberTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Type Count
         * @param conditions
         */
		systemMembersTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/members/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Type
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemMembersTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/members/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Type By Id
         * @param id
         */
		systemMembersTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/members/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemMembersTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Type By Id
         * @param id
         */
		systemMembersTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/members/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemMembersTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Type
         * @param id
         * @param operations
         */
		systemMembersTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/members/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemMembersTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemMembersTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Type
         * @param id
         * @param type
         */
		systemMembersTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/members/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemMembersTypesIdPut');
			}
			// verify required parameter 'type' is set
			if (params.type == null) {
				throw new Error('Missing required parameter type when calling systemMembersTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.type)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Type
         * @param type
         */
		systemMembersTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/members/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'type' is set
			if (params.type == null) {
				throw new Error('Missing required parameter type when calling systemMembersTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.type)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return MemberTypesApi;
})());
export { MemberTypesApi };
const MembersApi = ((() => {
	class MembersApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Members Count
         * @param conditions
         */
		systemMembersCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/members/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Members
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemMembersGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/members`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Member By Id
         * @param memberIdentifier
         */
		systemMembersMemberIdentifierGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/members/{memberIdentifier}'
				.replace('{' + 'memberIdentifier' + '}', String(params.memberIdentifier));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'memberIdentifier' is set
			if (params.memberIdentifier == null) {
				throw new Error('Missing required parameter memberIdentifier when calling systemMembersMemberIdentifierGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Member Image
         * @param memberIdentifier
         * @param useDefaultFlag
         * @param lastmodified
         */
		systemMembersMemberIdentifierImageGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/members/{memberIdentifier}/image'
				.replace('{' + 'memberIdentifier' + '}', String(params.memberIdentifier));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'memberIdentifier' is set
			if (params.memberIdentifier == null) {
				throw new Error('Missing required parameter memberIdentifier when calling systemMembersMemberIdentifierImageGet');
			}
			if (params.useDefaultFlag !== undefined) {
				queryParameters['useDefaultFlag'] = params.useDefaultFlag;
			}
			if (params.lastmodified !== undefined) {
				queryParameters['lastmodified'] = params.lastmodified;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Token By Member Identifier
         * @param memberIdentifier
         */
		systemMembersMemberIdentifierTokensPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/members/{memberIdentifier}/tokens'
				.replace('{' + 'memberIdentifier' + '}', String(params.memberIdentifier));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'memberIdentifier' is set
			if (params.memberIdentifier == null) {
				throw new Error('Missing required parameter memberIdentifier when calling systemMembersMemberIdentifierTokensPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return MembersApi;
})());
export { MembersApi };
const MenuEntriesApi = ((() => {
	class MenuEntriesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Menu Entries Count
         * @param conditions
         */
		systemMenuentriesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/menuentries/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Menu Entries
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemMenuentriesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/menuentries`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Menu Entry By Id
         * @param id
         */
		systemMenuentriesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/menuentries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemMenuentriesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Menu Entry By Id
         * @param id
         */
		systemMenuentriesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/menuentries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemMenuentriesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Menu Entry Image
         * @param id
         * @param lastmodified
         * @param largeFlag
         */
		systemMenuentriesIdImageGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/menuentries/{id}/image'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemMenuentriesIdImageGet');
			}
			if (params.lastmodified !== undefined) {
				queryParameters['lastmodified'] = params.lastmodified;
			}
			if (params.largeFlag !== undefined) {
				queryParameters['largeFlag'] = params.largeFlag;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Upload Menu Entry Image
         * @param id
         * @param file File to upload
         */
		systemMenuentriesIdImagePost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/menuentries/{id}/image'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			const formParams = {};
			headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemMenuentriesIdImagePost');
			}
			formParams['file'] = params.file;
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: querystring.stringify(formParams)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Menu Entry
         * @param id
         * @param operations
         */
		systemMenuentriesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/menuentries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemMenuentriesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemMenuentriesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Menu Entry
         * @param id
         * @param menuEntry
         */
		systemMenuentriesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/menuentries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemMenuentriesIdPut');
			}
			// verify required parameter 'menuEntry' is set
			if (params.menuEntry == null) {
				throw new Error('Missing required parameter menuEntry when calling systemMenuentriesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.menuEntry)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Menu Entry
         * @param menuEntry
         */
		systemMenuentriesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/menuentries`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'menuEntry' is set
			if (params.menuEntry == null) {
				throw new Error('Missing required parameter menuEntry when calling systemMenuentriesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.menuEntry)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return MenuEntriesApi;
})());
export { MenuEntriesApi };
const OpportunitiesApi = ((() => {
	class OpportunitiesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Opportunities Count
         * @param conditions
         * @param customFieldConditions
         */
		salesOpportunitiesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Opportunities
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesOpportunitiesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Convert Opportunity To Agreement
         * @param id
         * @param conversion
         */
		salesOpportunitiesIdConvertToAgreementPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/convertToAgreement'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdConvertToAgreementPost');
			}
			// verify required parameter 'conversion' is set
			if (params.conversion == null) {
				throw new Error('Missing required parameter conversion when calling salesOpportunitiesIdConvertToAgreementPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.conversion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Convert Opportunity To Project
         * @param id
         * @param conversion
         */
		salesOpportunitiesIdConvertToProjectPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/convertToProject'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdConvertToProjectPost');
			}
			// verify required parameter 'conversion' is set
			if (params.conversion == null) {
				throw new Error('Missing required parameter conversion when calling salesOpportunitiesIdConvertToProjectPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.conversion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Convert Opportunity To Sales Order
         * @param id
         * @param conversion
         */
		salesOpportunitiesIdConvertToSalesOrderPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/convertToSalesOrder'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdConvertToSalesOrderPost');
			}
			// verify required parameter 'conversion' is set
			if (params.conversion == null) {
				throw new Error('Missing required parameter conversion when calling salesOpportunitiesIdConvertToSalesOrderPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.conversion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Convert Opportunity To Service Ticket
         * @param id
         * @param conversion
         */
		salesOpportunitiesIdConvertToServiceTicketPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/convertToServiceTicket'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdConvertToServiceTicketPost');
			}
			// verify required parameter 'conversion' is set
			if (params.conversion == null) {
				throw new Error('Missing required parameter conversion when calling salesOpportunitiesIdConvertToServiceTicketPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.conversion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Opportunity By Id
         * @param id
         */
		salesOpportunitiesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Opportunity By Id
         * @param id
         */
		salesOpportunitiesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Opportunity
         * @param id
         * @param operations
         */
		salesOpportunitiesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesOpportunitiesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Opportunity
         * @param id
         * @param opportunity
         */
		salesOpportunitiesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdPut');
			}
			// verify required parameter 'opportunity' is set
			if (params.opportunity == null) {
				throw new Error('Missing required parameter opportunity when calling salesOpportunitiesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.opportunity)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Opportunity
         * @param opportunity
         */
		salesOpportunitiesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'opportunity' is set
			if (params.opportunity == null) {
				throw new Error('Missing required parameter opportunity when calling salesOpportunitiesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.opportunity)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OpportunitiesApi;
})());
export { OpportunitiesApi };
const OpportunityContactsApi = ((() => {
	class OpportunityContactsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Opportunity Contact By Id
         * @param id
         * @param contactId
         */
		salesOpportunitiesIdContactsContactIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/contacts/{contactId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'contactId' + '}', String(params.contactId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsContactIdDelete');
			}
			// verify required parameter 'contactId' is set
			if (params.contactId == null) {
				throw new Error('Missing required parameter contactId when calling salesOpportunitiesIdContactsContactIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Opportunity Contact By Id
         * @param id
         * @param contactId
         */
		salesOpportunitiesIdContactsContactIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/contacts/{contactId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'contactId' + '}', String(params.contactId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsContactIdGet');
			}
			// verify required parameter 'contactId' is set
			if (params.contactId == null) {
				throw new Error('Missing required parameter contactId when calling salesOpportunitiesIdContactsContactIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Opportunity Contact
         * @param id
         * @param contactId
         * @param operations
         */
		salesOpportunitiesIdContactsContactIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/contacts/{contactId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'contactId' + '}', String(params.contactId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsContactIdPatch');
			}
			// verify required parameter 'contactId' is set
			if (params.contactId == null) {
				throw new Error('Missing required parameter contactId when calling salesOpportunitiesIdContactsContactIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesOpportunitiesIdContactsContactIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Opportunity Contact
         * @param id
         * @param contactId
         * @param opportunityContact
         */
		salesOpportunitiesIdContactsContactIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/contacts/{contactId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'contactId' + '}', String(params.contactId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsContactIdPut');
			}
			// verify required parameter 'contactId' is set
			if (params.contactId == null) {
				throw new Error('Missing required parameter contactId when calling salesOpportunitiesIdContactsContactIdPut');
			}
			// verify required parameter 'opportunityContact' is set
			if (params.opportunityContact == null) {
				throw new Error('Missing required parameter opportunityContact when calling salesOpportunitiesIdContactsContactIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.opportunityContact)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Opportunity Contacts Count
         * @param id
         * @param conditions
         */
		salesOpportunitiesIdContactsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/contacts/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Opportunity Contacts
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesOpportunitiesIdContactsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/contacts'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Opportunity Contact
         * @param id
         * @param opportunityContact
         */
		salesOpportunitiesIdContactsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/contacts'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsPost');
			}
			// verify required parameter 'opportunityContact' is set
			if (params.opportunityContact == null) {
				throw new Error('Missing required parameter opportunityContact when calling salesOpportunitiesIdContactsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.opportunityContact)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OpportunityContactsApi;
})());
export { OpportunityContactsApi };
const OpportunityForecastsApi = ((() => {
	class OpportunityForecastsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Forecasts Count
         * @param id
         * @param conditions
         */
		salesOpportunitiesIdForecastCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/forecast/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Forecast By Id
         * @param id
         * @param forecastId
         */
		salesOpportunitiesIdForecastForecastIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/forecast/{forecastId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'forecastId' + '}', String(params.forecastId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastForecastIdDelete');
			}
			// verify required parameter 'forecastId' is set
			if (params.forecastId == null) {
				throw new Error('Missing required parameter forecastId when calling salesOpportunitiesIdForecastForecastIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Forecast By Id
         * @param id
         * @param forecastId
         */
		salesOpportunitiesIdForecastForecastIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/forecast/{forecastId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'forecastId' + '}', String(params.forecastId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastForecastIdGet');
			}
			// verify required parameter 'forecastId' is set
			if (params.forecastId == null) {
				throw new Error('Missing required parameter forecastId when calling salesOpportunitiesIdForecastForecastIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Forecast
         * @param id
         * @param forecastId
         * @param operations
         */
		salesOpportunitiesIdForecastForecastIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/forecast/{forecastId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'forecastId' + '}', String(params.forecastId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastForecastIdPatch');
			}
			// verify required parameter 'forecastId' is set
			if (params.forecastId == null) {
				throw new Error('Missing required parameter forecastId when calling salesOpportunitiesIdForecastForecastIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesOpportunitiesIdForecastForecastIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Forecast
         * @param id
         * @param forecastId
         * @param forecast
         */
		salesOpportunitiesIdForecastForecastIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/forecast/{forecastId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'forecastId' + '}', String(params.forecastId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastForecastIdPut');
			}
			// verify required parameter 'forecastId' is set
			if (params.forecastId == null) {
				throw new Error('Missing required parameter forecastId when calling salesOpportunitiesIdForecastForecastIdPut');
			}
			// verify required parameter 'forecast' is set
			if (params.forecast == null) {
				throw new Error('Missing required parameter forecast when calling salesOpportunitiesIdForecastForecastIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.forecast)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Forecasts
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesOpportunitiesIdForecastGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/forecast'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Forecast
         * @param id
         * @param forecast
         */
		salesOpportunitiesIdForecastPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/forecast'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastPost');
			}
			// verify required parameter 'forecast' is set
			if (params.forecast == null) {
				throw new Error('Missing required parameter forecast when calling salesOpportunitiesIdForecastPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.forecast)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OpportunityForecastsApi;
})());
export { OpportunityForecastsApi };
const OpportunityNotesApi = ((() => {
	class OpportunityNotesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Opportunity Notes Count
         * @param id
         * @param conditions
         */
		salesOpportunitiesIdNotesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/notes/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Opportunity Notes
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesOpportunitiesIdNotesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/notes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Opportunity Note By Id
         * @param id
         * @param noteId
         */
		salesOpportunitiesIdNotesNoteIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesNoteIdDelete');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling salesOpportunitiesIdNotesNoteIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Opportunity Note By Id
         * @param id
         * @param noteId
         */
		salesOpportunitiesIdNotesNoteIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesNoteIdGet');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling salesOpportunitiesIdNotesNoteIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Opportunity Note
         * @param id
         * @param noteId
         * @param operations
         */
		salesOpportunitiesIdNotesNoteIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesNoteIdPatch');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling salesOpportunitiesIdNotesNoteIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesOpportunitiesIdNotesNoteIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Opportunity Note
         * @param id
         * @param noteId
         * @param note
         */
		salesOpportunitiesIdNotesNoteIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesNoteIdPut');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling salesOpportunitiesIdNotesNoteIdPut');
			}
			// verify required parameter 'note' is set
			if (params.note == null) {
				throw new Error('Missing required parameter note when calling salesOpportunitiesIdNotesNoteIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.note)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Opportunity Note
         * @param id
         * @param note
         */
		salesOpportunitiesIdNotesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/notes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesPost');
			}
			// verify required parameter 'note' is set
			if (params.note == null) {
				throw new Error('Missing required parameter note when calling salesOpportunitiesIdNotesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.note)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OpportunityNotesApi;
})());
export { OpportunityNotesApi };
const OpportunityRatingsApi = ((() => {
	class OpportunityRatingsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Opportunity Ratings Count
         * @param conditions
         */
		salesOpportunitiesRatingsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities/ratings/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Opportunity Ratings
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesOpportunitiesRatingsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities/ratings`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Opportunity Rating By Id
         * @param id
         */
		salesOpportunitiesRatingsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/ratings/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesRatingsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Opportunity Rating By Id
         * @param id
         */
		salesOpportunitiesRatingsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/ratings/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesRatingsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Opportunity Rating
         * @param id
         * @param operations
         */
		salesOpportunitiesRatingsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/ratings/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesRatingsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesOpportunitiesRatingsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Opportunity Rating
         * @param id
         * @param opportunityRating
         */
		salesOpportunitiesRatingsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/ratings/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesRatingsIdPut');
			}
			// verify required parameter 'opportunityRating' is set
			if (params.opportunityRating == null) {
				throw new Error('Missing required parameter opportunityRating when calling salesOpportunitiesRatingsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.opportunityRating)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Opportunity Rating
         * @param opportunityRating
         */
		salesOpportunitiesRatingsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities/ratings`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'opportunityRating' is set
			if (params.opportunityRating == null) {
				throw new Error('Missing required parameter opportunityRating when calling salesOpportunitiesRatingsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.opportunityRating)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OpportunityRatingsApi;
})());
export { OpportunityRatingsApi };
const OpportunityStagesApi = ((() => {
	class OpportunityStagesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Stage Count
         * @param conditions
         */
		salesStagesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/stages/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Stage
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesStagesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/stages`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Stage By Id
         * @param id
         */
		salesStagesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/stages/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesStagesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Stage By Id
         * @param id
         */
		salesStagesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/stages/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesStagesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Stage
         * @param id
         * @param operations
         */
		salesStagesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/stages/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesStagesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesStagesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Stage
         * @param id
         * @param stage
         */
		salesStagesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/stages/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesStagesIdPut');
			}
			// verify required parameter 'stage' is set
			if (params.stage == null) {
				throw new Error('Missing required parameter stage when calling salesStagesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.stage)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Stage
         * @param stage
         */
		salesStagesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/stages`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'stage' is set
			if (params.stage == null) {
				throw new Error('Missing required parameter stage when calling salesStagesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.stage)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OpportunityStagesApi;
})());
export { OpportunityStagesApi };
const OpportunityStatusesApi = ((() => {
	class OpportunityStatusesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Statuses Count
         * @param conditions
         */
		salesOpportunitiesStatusesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities/statuses/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Statuses
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesOpportunitiesStatusesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Status By Id
         * @param id
         */
		salesOpportunitiesStatusesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesStatusesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Status By Id
         * @param id
         */
		salesOpportunitiesStatusesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesStatusesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Status
         * @param id
         * @param operations
         */
		salesOpportunitiesStatusesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesStatusesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesOpportunitiesStatusesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Status
         * @param id
         * @param status
         */
		salesOpportunitiesStatusesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesStatusesIdPut');
			}
			// verify required parameter 'status' is set
			if (params.status == null) {
				throw new Error('Missing required parameter status when calling salesOpportunitiesStatusesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.status)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Status
         * @param status
         */
		salesOpportunitiesStatusesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'status' is set
			if (params.status == null) {
				throw new Error('Missing required parameter status when calling salesOpportunitiesStatusesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.status)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OpportunityStatusesApi;
})());
export { OpportunityStatusesApi };
const OpportunityTeamsApi = ((() => {
	class OpportunityTeamsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Teams Count
         * @param id
         * @param conditions
         */
		salesOpportunitiesIdTeamCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/team/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Teams
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesOpportunitiesIdTeamGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/team'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Team
         * @param id
         * @param team
         */
		salesOpportunitiesIdTeamPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/team'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamPost');
			}
			// verify required parameter 'team' is set
			if (params.team == null) {
				throw new Error('Missing required parameter team when calling salesOpportunitiesIdTeamPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.team)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Team By Id
         * @param id
         * @param teamId
         */
		salesOpportunitiesIdTeamTeamIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/team/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamTeamIdDelete');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling salesOpportunitiesIdTeamTeamIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Team By Id
         * @param id
         * @param teamId
         */
		salesOpportunitiesIdTeamTeamIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/team/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamTeamIdGet');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling salesOpportunitiesIdTeamTeamIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Team
         * @param id
         * @param teamId
         * @param operations
         */
		salesOpportunitiesIdTeamTeamIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/team/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamTeamIdPatch');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling salesOpportunitiesIdTeamTeamIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesOpportunitiesIdTeamTeamIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Team
         * @param id
         * @param teamId
         * @param team
         */
		salesOpportunitiesIdTeamTeamIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/{id}/team/{teamId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamId' + '}', String(params.teamId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamTeamIdPut');
			}
			// verify required parameter 'teamId' is set
			if (params.teamId == null) {
				throw new Error('Missing required parameter teamId when calling salesOpportunitiesIdTeamTeamIdPut');
			}
			// verify required parameter 'team' is set
			if (params.team == null) {
				throw new Error('Missing required parameter team when calling salesOpportunitiesIdTeamTeamIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.team)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OpportunityTeamsApi;
})());
export { OpportunityTeamsApi };
const OpportunityTypesApi = ((() => {
	class OpportunityTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Opportunity Types Count
         * @param conditions
         */
		salesOpportunitiesTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Opportunity Types
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesOpportunitiesTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Opportunity Type By Id
         * @param id
         */
		salesOpportunitiesTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Opportunity Type By Id
         * @param id
         */
		salesOpportunitiesTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Opportunity Type
         * @param id
         * @param operations
         */
		salesOpportunitiesTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesOpportunitiesTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Opportunity Type
         * @param id
         * @param opportunityType
         */
		salesOpportunitiesTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/opportunities/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOpportunitiesTypesIdPut');
			}
			// verify required parameter 'opportunityType' is set
			if (params.opportunityType == null) {
				throw new Error('Missing required parameter opportunityType when calling salesOpportunitiesTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.opportunityType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Opportunity Type
         * @param opportunityType
         */
		salesOpportunitiesTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/opportunities/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'opportunityType' is set
			if (params.opportunityType == null) {
				throw new Error('Missing required parameter opportunityType when calling salesOpportunitiesTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.opportunityType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OpportunityTypesApi;
})());
export { OpportunityTypesApi };
const OrderStatusesApi = ((() => {
	class OrderStatusesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Order Statuses Count
         * @param conditions
         */
		salesOrdersStatusesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/orders/statuses/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Order Statuses
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesOrdersStatusesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/orders/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Order Status By Id
         * @param id
         */
		salesOrdersStatusesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/orders/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOrdersStatusesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Order Status By Id
         * @param id
         */
		salesOrdersStatusesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/orders/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOrdersStatusesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Order Status
         * @param id
         * @param operations
         */
		salesOrdersStatusesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/orders/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOrdersStatusesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesOrdersStatusesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Order Status
         * @param id
         * @param status
         */
		salesOrdersStatusesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/orders/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOrdersStatusesIdPut');
			}
			// verify required parameter 'status' is set
			if (params.status == null) {
				throw new Error('Missing required parameter status when calling salesOrdersStatusesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.status)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Order Status
         * @param status
         */
		salesOrdersStatusesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/orders/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'status' is set
			if (params.status == null) {
				throw new Error('Missing required parameter status when calling salesOrdersStatusesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.status)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OrderStatusesApi;
})());
export { OrderStatusesApi };
const OrdersApi = ((() => {
	class OrdersApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Sales Orders Count
         * @param conditions
         * @param customFieldConditions
         */
		salesOrdersCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/orders/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Sales Orders
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesOrdersGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/orders`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Sales Order By Id
         * @param id
         */
		salesOrdersIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/orders/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOrdersIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Sales Order By Id
         * @param id
         */
		salesOrdersIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/orders/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOrdersIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Sales Order
         * @param id
         * @param operations
         */
		salesOrdersIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/orders/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOrdersIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesOrdersIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Sales Order
         * @param id
         * @param order
         */
		salesOrdersIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/orders/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesOrdersIdPut');
			}
			// verify required parameter 'order' is set
			if (params.order == null) {
				throw new Error('Missing required parameter order when calling salesOrdersIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.order)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Sales Order
         * @param order
         */
		salesOrdersPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/orders`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'order' is set
			if (params.order == null) {
				throw new Error('Missing required parameter order when calling salesOrdersPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.order)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OrdersApi;
})());
export { OrdersApi };
const OwnershipTypesApi = ((() => {
	class OwnershipTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Ownership Type Count
         * @param conditions
         */
		companyOwnershipTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/ownershipTypes/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ownership Type
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyOwnershipTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/ownershipTypes`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Ownership Type By Id
         * @param id
         */
		companyOwnershipTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/ownershipTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyOwnershipTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ownership Type By Id
         * @param id
         */
		companyOwnershipTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/ownershipTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyOwnershipTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Ownership Type
         * @param id
         * @param operations
         */
		companyOwnershipTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/ownershipTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyOwnershipTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyOwnershipTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Ownership Type
         * @param id
         * @param ownershipType
         */
		companyOwnershipTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/ownershipTypes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyOwnershipTypesIdPut');
			}
			// verify required parameter 'ownershipType' is set
			if (params.ownershipType == null) {
				throw new Error('Missing required parameter ownershipType when calling companyOwnershipTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.ownershipType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Ownership Type
         * @param ownershipType
         */
		companyOwnershipTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/ownershipTypes`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'ownershipType' is set
			if (params.ownershipType == null) {
				throw new Error('Missing required parameter ownershipType when calling companyOwnershipTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.ownershipType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return OwnershipTypesApi;
})());
export { OwnershipTypesApi };
const PricingBreaksApi = ((() => {
	class PricingBreaksApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Pricing Break By Id
         * @param schedId
         * @param detailId
         * @param breakId
         */
		procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks/{breakId}'
				.replace('{' + 'schedId' + '}', String(params.schedId))
				.replace('{' + 'detailId' + '}', String(params.detailId))
				.replace('{' + 'breakId' + '}', String(params.breakId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'schedId' is set
			if (params.schedId == null) {
				throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdDelete');
			}
			// verify required parameter 'detailId' is set
			if (params.detailId == null) {
				throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdDelete');
			}
			// verify required parameter 'breakId' is set
			if (params.breakId == null) {
				throw new Error('Missing required parameter breakId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Pricing Break By Id
         * @param schedId
         * @param detailId
         * @param breakId
         */
		procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks/{breakId}'
				.replace('{' + 'schedId' + '}', String(params.schedId))
				.replace('{' + 'detailId' + '}', String(params.detailId))
				.replace('{' + 'breakId' + '}', String(params.breakId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'schedId' is set
			if (params.schedId == null) {
				throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdGet');
			}
			// verify required parameter 'detailId' is set
			if (params.detailId == null) {
				throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdGet');
			}
			// verify required parameter 'breakId' is set
			if (params.breakId == null) {
				throw new Error('Missing required parameter breakId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Pricing Break
         * @param schedId
         * @param detailId
         * @param breakId
         * @param operations
         */
		procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks/{breakId}'
				.replace('{' + 'schedId' + '}', String(params.schedId))
				.replace('{' + 'detailId' + '}', String(params.detailId))
				.replace('{' + 'breakId' + '}', String(params.breakId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'schedId' is set
			if (params.schedId == null) {
				throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch');
			}
			// verify required parameter 'detailId' is set
			if (params.detailId == null) {
				throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch');
			}
			// verify required parameter 'breakId' is set
			if (params.breakId == null) {
				throw new Error('Missing required parameter breakId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Pricing Break
         * @param schedId
         * @param detailId
         * @param breakId
         * @param pricingBreak
         */
		procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks/{breakId}'
				.replace('{' + 'schedId' + '}', String(params.schedId))
				.replace('{' + 'detailId' + '}', String(params.detailId))
				.replace('{' + 'breakId' + '}', String(params.breakId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'schedId' is set
			if (params.schedId == null) {
				throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut');
			}
			// verify required parameter 'detailId' is set
			if (params.detailId == null) {
				throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut');
			}
			// verify required parameter 'breakId' is set
			if (params.breakId == null) {
				throw new Error('Missing required parameter breakId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut');
			}
			// verify required parameter 'pricingBreak' is set
			if (params.pricingBreak == null) {
				throw new Error('Missing required parameter pricingBreak when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.pricingBreak)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Pricing Break Count
         * @param schedId
         * @param detailId
         * @param conditions
         */
		procurementPricingschedulesSchedIdDetailsDetailIdBreaksCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks/count'
				.replace('{' + 'schedId' + '}', String(params.schedId))
				.replace('{' + 'detailId' + '}', String(params.detailId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'schedId' is set
			if (params.schedId == null) {
				throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksCountGet');
			}
			// verify required parameter 'detailId' is set
			if (params.detailId == null) {
				throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Pricing Break
         * @param schedId
         * @param detailId
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementPricingschedulesSchedIdDetailsDetailIdBreaksGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks'
				.replace('{' + 'schedId' + '}', String(params.schedId))
				.replace('{' + 'detailId' + '}', String(params.detailId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'schedId' is set
			if (params.schedId == null) {
				throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksGet');
			}
			// verify required parameter 'detailId' is set
			if (params.detailId == null) {
				throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Pricing Break
         * @param schedId
         * @param detailId
         * @param pricingBreak
         */
		procurementPricingschedulesSchedIdDetailsDetailIdBreaksPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks'
				.replace('{' + 'schedId' + '}', String(params.schedId))
				.replace('{' + 'detailId' + '}', String(params.detailId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'schedId' is set
			if (params.schedId == null) {
				throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksPost');
			}
			// verify required parameter 'detailId' is set
			if (params.detailId == null) {
				throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksPost');
			}
			// verify required parameter 'pricingBreak' is set
			if (params.pricingBreak == null) {
				throw new Error('Missing required parameter pricingBreak when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.pricingBreak)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return PricingBreaksApi;
})());
export { PricingBreaksApi };
const PricingDetailsApi = ((() => {
	class PricingDetailsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Pricing Detail Count
         * @param id
         * @param conditions
         */
		procurementPricingschedulesIdDetailsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Pricing Detail By Id
         * @param id
         * @param detailID
         */
		procurementPricingschedulesIdDetailsDetailIDDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details/{detailID}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'detailID' + '}', String(params.detailID));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsDetailIDDelete');
			}
			// verify required parameter 'detailID' is set
			if (params.detailID == null) {
				throw new Error('Missing required parameter detailID when calling procurementPricingschedulesIdDetailsDetailIDDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Pricing Detail By Id
         * @param id
         * @param detailID
         */
		procurementPricingschedulesIdDetailsDetailIDGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details/{detailID}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'detailID' + '}', String(params.detailID));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsDetailIDGet');
			}
			// verify required parameter 'detailID' is set
			if (params.detailID == null) {
				throw new Error('Missing required parameter detailID when calling procurementPricingschedulesIdDetailsDetailIDGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Pricing Detail
         * @param id
         * @param detailID
         * @param operations
         */
		procurementPricingschedulesIdDetailsDetailIDPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details/{detailID}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'detailID' + '}', String(params.detailID));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsDetailIDPatch');
			}
			// verify required parameter 'detailID' is set
			if (params.detailID == null) {
				throw new Error('Missing required parameter detailID when calling procurementPricingschedulesIdDetailsDetailIDPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementPricingschedulesIdDetailsDetailIDPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Pricing Detail
         * @param id
         * @param detailID
         * @param pricingDetail
         */
		procurementPricingschedulesIdDetailsDetailIDPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details/{detailID}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'detailID' + '}', String(params.detailID));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsDetailIDPut');
			}
			// verify required parameter 'detailID' is set
			if (params.detailID == null) {
				throw new Error('Missing required parameter detailID when calling procurementPricingschedulesIdDetailsDetailIDPut');
			}
			// verify required parameter 'pricingDetail' is set
			if (params.pricingDetail == null) {
				throw new Error('Missing required parameter pricingDetail when calling procurementPricingschedulesIdDetailsDetailIDPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.pricingDetail)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Pricing Detail
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementPricingschedulesIdDetailsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Pricing Detail
         * @param id
         * @param pricingDetail
         */
		procurementPricingschedulesIdDetailsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsPost');
			}
			// verify required parameter 'pricingDetail' is set
			if (params.pricingDetail == null) {
				throw new Error('Missing required parameter pricingDetail when calling procurementPricingschedulesIdDetailsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.pricingDetail)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return PricingDetailsApi;
})());
export { PricingDetailsApi };
const PricingSchedulesApi = ((() => {
	class PricingSchedulesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Pricing Schedules Count
         * @param conditions
         */
		procurementPricingschedulesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/pricingschedules/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Pricing Schedules
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementPricingschedulesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/pricingschedules`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Pricing Schedule By Id
         * @param id
         */
		procurementPricingschedulesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Pricing Schedule By Id
         * @param id
         */
		procurementPricingschedulesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPricingschedulesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Pricing Schedule
         * @param id
         * @param operations
         */
		procurementPricingschedulesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPricingschedulesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementPricingschedulesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Pricing Schedule
         * @param id
         * @param pricingSchedule
         */
		procurementPricingschedulesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/pricingschedules/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPricingschedulesIdPut');
			}
			// verify required parameter 'pricingSchedule' is set
			if (params.pricingSchedule == null) {
				throw new Error('Missing required parameter pricingSchedule when calling procurementPricingschedulesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.pricingSchedule)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Pricing Schedule
         * @param pricingSchedule
         */
		procurementPricingschedulesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/pricingschedules`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'pricingSchedule' is set
			if (params.pricingSchedule == null) {
				throw new Error('Missing required parameter pricingSchedule when calling procurementPricingschedulesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.pricingSchedule)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return PricingSchedulesApi;
})());
export { PricingSchedulesApi };
const PrioritiesApi = ((() => {
	class PrioritiesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Create Priorities Count
         * @param conditions
         */
		servicePrioritiesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/priorities/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Priorities
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		servicePrioritiesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/priorities`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Priority By Id
         * @param id
         */
		servicePrioritiesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/priorities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling servicePrioritiesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Priority By Id
         * @param id
         */
		servicePrioritiesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/priorities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling servicePrioritiesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Priority Image
         * @param id
         * @param useDefaultFlag
         * @param lastModified
         */
		servicePrioritiesIdImageGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/priorities/{id}/image'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling servicePrioritiesIdImageGet');
			}
			if (params.useDefaultFlag !== undefined) {
				queryParameters['useDefaultFlag'] = params.useDefaultFlag;
			}
			if (params.lastModified !== undefined) {
				queryParameters['lastModified'] = params.lastModified;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Priority
         * @param id
         * @param operations
         */
		servicePrioritiesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/priorities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling servicePrioritiesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling servicePrioritiesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Priority
         * @param id
         * @param priority
         */
		servicePrioritiesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/priorities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling servicePrioritiesIdPut');
			}
			// verify required parameter 'priority' is set
			if (params.priority == null) {
				throw new Error('Missing required parameter priority when calling servicePrioritiesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.priority)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Priority
         * @param priority
         */
		servicePrioritiesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/priorities`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'priority' is set
			if (params.priority == null) {
				throw new Error('Missing required parameter priority when calling servicePrioritiesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.priority)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return PrioritiesApi;
})());
export { PrioritiesApi };
const ProductComponentsApi = ((() => {
	class ProductComponentsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Product Component By Id
         * @param id
         * @param componentId
         */
		procurementProductsIdComponentsComponentIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/components/{componentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'componentId' + '}', String(params.componentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdComponentsComponentIdDelete');
			}
			// verify required parameter 'componentId' is set
			if (params.componentId == null) {
				throw new Error('Missing required parameter componentId when calling procurementProductsIdComponentsComponentIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Product Component By Id
         * @param id
         * @param componentId
         */
		procurementProductsIdComponentsComponentIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/components/{componentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'componentId' + '}', String(params.componentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdComponentsComponentIdGet');
			}
			// verify required parameter 'componentId' is set
			if (params.componentId == null) {
				throw new Error('Missing required parameter componentId when calling procurementProductsIdComponentsComponentIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Product Component
         * @param id
         * @param componentId
         * @param operations
         */
		procurementProductsIdComponentsComponentIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/components/{componentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'componentId' + '}', String(params.componentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdComponentsComponentIdPatch');
			}
			// verify required parameter 'componentId' is set
			if (params.componentId == null) {
				throw new Error('Missing required parameter componentId when calling procurementProductsIdComponentsComponentIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementProductsIdComponentsComponentIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Product Component
         * @param id
         * @param componentId
         * @param productComponent
         */
		procurementProductsIdComponentsComponentIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/components/{componentId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'componentId' + '}', String(params.componentId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdComponentsComponentIdPut');
			}
			// verify required parameter 'componentId' is set
			if (params.componentId == null) {
				throw new Error('Missing required parameter componentId when calling procurementProductsIdComponentsComponentIdPut');
			}
			// verify required parameter 'productComponent' is set
			if (params.productComponent == null) {
				throw new Error('Missing required parameter productComponent when calling procurementProductsIdComponentsComponentIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.productComponent)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Product Components Count
         * @param id
         * @param conditions
         */
		procurementProductsIdComponentsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/components/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdComponentsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Product Components
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementProductsIdComponentsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/components'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdComponentsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Product Component
         * @param id
         * @param productComponent
         */
		procurementProductsIdComponentsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/components'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdComponentsPost');
			}
			// verify required parameter 'productComponent' is set
			if (params.productComponent == null) {
				throw new Error('Missing required parameter productComponent when calling procurementProductsIdComponentsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.productComponent)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ProductComponentsApi;
})());
export { ProductComponentsApi };
const ProductPickingShippingDetailsApi = ((() => {
	class ProductPickingShippingDetailsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Product Picking Shipping Details Count
         * @param id
         * @param conditions
         */
		procurementProductsIdPickingShippingDetailsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Product Picking Shipping Details
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementProductsIdPickingShippingDetailsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Products By Id
         * @param id
         * @param pickingShippingDetailId
         */
		procurementProductsIdPickingShippingDetailsPickingShippingDetailIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails/{pickingShippingDetailId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'pickingShippingDetailId' + '}', String(params.pickingShippingDetailId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdDelete');
			}
			// verify required parameter 'pickingShippingDetailId' is set
			if (params.pickingShippingDetailId == null) {
				throw new Error('Missing required parameter pickingShippingDetailId when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Products By Id
         * @param id
         * @param pickingShippingDetailId
         */
		procurementProductsIdPickingShippingDetailsPickingShippingDetailIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails/{pickingShippingDetailId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'pickingShippingDetailId' + '}', String(params.pickingShippingDetailId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdGet');
			}
			// verify required parameter 'pickingShippingDetailId' is set
			if (params.pickingShippingDetailId == null) {
				throw new Error('Missing required parameter pickingShippingDetailId when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Products
         * @param id
         * @param pickingShippingDetailId
         * @param operations
         */
		procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails/{pickingShippingDetailId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'pickingShippingDetailId' + '}', String(params.pickingShippingDetailId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPatch');
			}
			// verify required parameter 'pickingShippingDetailId' is set
			if (params.pickingShippingDetailId == null) {
				throw new Error('Missing required parameter pickingShippingDetailId when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Products
         * @param id
         * @param pickingShippingDetailId
         * @param productPickingShippingDetails
         */
		procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails/{pickingShippingDetailId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'pickingShippingDetailId' + '}', String(params.pickingShippingDetailId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPut');
			}
			// verify required parameter 'pickingShippingDetailId' is set
			if (params.pickingShippingDetailId == null) {
				throw new Error('Missing required parameter pickingShippingDetailId when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPut');
			}
			// verify required parameter 'productPickingShippingDetails' is set
			if (params.productPickingShippingDetails == null) {
				throw new Error('Missing required parameter productPickingShippingDetails when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.productPickingShippingDetails)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Product Picking Shipping Detail
         * @param id
         * @param productPickingShippingDetails
         */
		procurementProductsIdPickingShippingDetailsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsPost');
			}
			// verify required parameter 'productPickingShippingDetails' is set
			if (params.productPickingShippingDetails == null) {
				throw new Error('Missing required parameter productPickingShippingDetails when calling procurementProductsIdPickingShippingDetailsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.productPickingShippingDetails)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ProductPickingShippingDetailsApi;
})());
export { ProductPickingShippingDetailsApi };
const ProductTypesApi = ((() => {
	class ProductTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Product Typess Count
         * @param conditions
         */
		procurementTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Product Typess
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Product Types By Id
         * @param id
         */
		procurementTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Product Types By Id
         * @param id
         */
		procurementTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Product Types
         * @param id
         * @param operations
         */
		procurementTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Product Types
         * @param id
         * @param productTypes
         */
		procurementTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementTypesIdPut');
			}
			// verify required parameter 'productTypes' is set
			if (params.productTypes == null) {
				throw new Error('Missing required parameter productTypes when calling procurementTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.productTypes)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Product Types
         * @param productTypes
         */
		procurementTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'productTypes' is set
			if (params.productTypes == null) {
				throw new Error('Missing required parameter productTypes when calling procurementTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.productTypes)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ProductTypesApi;
})());
export { ProductTypesApi };
const ProductsItemApi = ((() => {
	class ProductsItemApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Products Count
         * @param conditions
         */
		procurementProductsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/products/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Products
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementProductsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/products`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Product By Id
         * @param id
         */
		procurementProductsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Product By Id
         * @param id
         */
		procurementProductsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Product
         * @param id
         * @param operations
         */
		procurementProductsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementProductsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Product
         * @param id
         * @param productItem
         */
		procurementProductsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/products/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementProductsIdPut');
			}
			// verify required parameter 'productItem' is set
			if (params.productItem == null) {
				throw new Error('Missing required parameter productItem when calling procurementProductsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.productItem)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Product
         * @param productItem
         */
		procurementProductsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/products`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'productItem' is set
			if (params.productItem == null) {
				throw new Error('Missing required parameter productItem when calling procurementProductsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.productItem)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ProductsItemApi;
})());
export { ProductsItemApi };
const ProjectContactsApi = ((() => {
	class ProjectContactsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Project Contact By Id
         * @param id
         * @param contactId
         */
		projectProjectsIdContactsContactIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/contacts/{contactId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'contactId' + '}', String(params.contactId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdContactsContactIdDelete');
			}
			// verify required parameter 'contactId' is set
			if (params.contactId == null) {
				throw new Error('Missing required parameter contactId when calling projectProjectsIdContactsContactIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Project Contact By Id
         * @param id
         * @param contactId
         */
		projectProjectsIdContactsContactIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/contacts/{contactId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'contactId' + '}', String(params.contactId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdContactsContactIdGet');
			}
			// verify required parameter 'contactId' is set
			if (params.contactId == null) {
				throw new Error('Missing required parameter contactId when calling projectProjectsIdContactsContactIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Project Contacts
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		projectProjectsIdContactsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/contacts'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdContactsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Project Contact
         * @param id
         * @param contact
         */
		projectProjectsIdContactsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/contacts'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdContactsPost');
			}
			// verify required parameter 'contact' is set
			if (params.contact == null) {
				throw new Error('Missing required parameter contact when calling projectProjectsIdContactsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.contact)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ProjectContactsApi;
})());
export { ProjectContactsApi };
const ProjectNotesApi = ((() => {
	class ProjectNotesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Project Notes Count
         * @param id
         * @param conditions
         */
		projectProjectsIdNotesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/notes/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdNotesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Project Notes
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		projectProjectsIdNotesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/notes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdNotesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Project Note By Id
         * @param id
         * @param noteId
         */
		projectProjectsIdNotesNoteIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdNotesNoteIdDelete');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling projectProjectsIdNotesNoteIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Project Note By Id
         * @param id
         * @param noteId
         */
		projectProjectsIdNotesNoteIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdNotesNoteIdGet');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling projectProjectsIdNotesNoteIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Project Note
         * @param id
         * @param noteId
         * @param operations
         */
		projectProjectsIdNotesNoteIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdNotesNoteIdPatch');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling projectProjectsIdNotesNoteIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling projectProjectsIdNotesNoteIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Project Note
         * @param id
         * @param noteId
         * @param note
         */
		projectProjectsIdNotesNoteIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdNotesNoteIdPut');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling projectProjectsIdNotesNoteIdPut');
			}
			// verify required parameter 'note' is set
			if (params.note == null) {
				throw new Error('Missing required parameter note when calling projectProjectsIdNotesNoteIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.note)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Project Note
         * @param id
         * @param note
         */
		projectProjectsIdNotesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/notes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdNotesPost');
			}
			// verify required parameter 'note' is set
			if (params.note == null) {
				throw new Error('Missing required parameter note when calling projectProjectsIdNotesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.note)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ProjectNotesApi;
})());
export { ProjectNotesApi };
const ProjectPhasesApi = ((() => {
	class ProjectPhasesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Project Phases Count
         * @param id
         * @param conditions
         */
		projectProjectsIdPhasesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/phases/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdPhasesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Project Phases
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		projectProjectsIdPhasesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/phases'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdPhasesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Project Phase By Id
         * @param id
         * @param phaseId
         */
		projectProjectsIdPhasesPhaseIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/phases/{phaseId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'phaseId' + '}', String(params.phaseId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdPhasesPhaseIdDelete');
			}
			// verify required parameter 'phaseId' is set
			if (params.phaseId == null) {
				throw new Error('Missing required parameter phaseId when calling projectProjectsIdPhasesPhaseIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Project Phase By Id
         * @param id
         * @param phaseId
         */
		projectProjectsIdPhasesPhaseIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/phases/{phaseId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'phaseId' + '}', String(params.phaseId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdPhasesPhaseIdGet');
			}
			// verify required parameter 'phaseId' is set
			if (params.phaseId == null) {
				throw new Error('Missing required parameter phaseId when calling projectProjectsIdPhasesPhaseIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Project Phase
         * @param id
         * @param phaseId
         * @param operations
         */
		projectProjectsIdPhasesPhaseIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/phases/{phaseId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'phaseId' + '}', String(params.phaseId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdPhasesPhaseIdPatch');
			}
			// verify required parameter 'phaseId' is set
			if (params.phaseId == null) {
				throw new Error('Missing required parameter phaseId when calling projectProjectsIdPhasesPhaseIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling projectProjectsIdPhasesPhaseIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Project Phase
         * @param id
         * @param phaseId
         * @param projectPhase
         */
		projectProjectsIdPhasesPhaseIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/phases/{phaseId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'phaseId' + '}', String(params.phaseId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdPhasesPhaseIdPut');
			}
			// verify required parameter 'phaseId' is set
			if (params.phaseId == null) {
				throw new Error('Missing required parameter phaseId when calling projectProjectsIdPhasesPhaseIdPut');
			}
			// verify required parameter 'projectPhase' is set
			if (params.projectPhase == null) {
				throw new Error('Missing required parameter projectPhase when calling projectProjectsIdPhasesPhaseIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.projectPhase)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Project Phase
         * @param id
         * @param projectPhase
         */
		projectProjectsIdPhasesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/phases'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdPhasesPost');
			}
			// verify required parameter 'projectPhase' is set
			if (params.projectPhase == null) {
				throw new Error('Missing required parameter projectPhase when calling projectProjectsIdPhasesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.projectPhase)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ProjectPhasesApi;
})());
export { ProjectPhasesApi };
const ProjectsApi = ((() => {
	class ProjectsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Projects Count
         * @param conditions
         * @param customFieldConditions
         */
		projectProjectsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/project/projects/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Projects
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		projectProjectsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/project/projects`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Project By Id
         * @param id
         */
		projectProjectsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Project By Id
         * @param id
         */
		projectProjectsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Project
         * @param id
         * @param operations
         */
		projectProjectsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling projectProjectsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Project
         * @param id
         * @param project
         */
		projectProjectsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdPut');
			}
			// verify required parameter 'project' is set
			if (params.project == null) {
				throw new Error('Missing required parameter project when calling projectProjectsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.project)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Project
         * @param project
         */
		projectProjectsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/project/projects`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'project' is set
			if (params.project == null) {
				throw new Error('Missing required parameter project when calling projectProjectsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.project)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ProjectsApi;
})());
export { ProjectsApi };
const ProjectsTeammembersApi = ((() => {
	class ProjectsTeammembersApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Team Members Count
         * @param id
         * @param conditions
         */
		projectProjectsIdTeamMembersCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/teamMembers/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Team Members
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		projectProjectsIdTeamMembersGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/teamMembers'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Team Member
         * @param id
         * @param teamMember
         */
		projectProjectsIdTeamMembersPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/teamMembers'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersPost');
			}
			// verify required parameter 'teamMember' is set
			if (params.teamMember == null) {
				throw new Error('Missing required parameter teamMember when calling projectProjectsIdTeamMembersPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.teamMember)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Team Member By Id
         * @param id
         * @param teamMemberId
         */
		projectProjectsIdTeamMembersTeamMemberIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/teamMembers/{teamMemberId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamMemberId' + '}', String(params.teamMemberId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersTeamMemberIdDelete');
			}
			// verify required parameter 'teamMemberId' is set
			if (params.teamMemberId == null) {
				throw new Error('Missing required parameter teamMemberId when calling projectProjectsIdTeamMembersTeamMemberIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Team Member By Id
         * @param id
         * @param teamMemberId
         */
		projectProjectsIdTeamMembersTeamMemberIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/teamMembers/{teamMemberId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamMemberId' + '}', String(params.teamMemberId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersTeamMemberIdGet');
			}
			// verify required parameter 'teamMemberId' is set
			if (params.teamMemberId == null) {
				throw new Error('Missing required parameter teamMemberId when calling projectProjectsIdTeamMembersTeamMemberIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Team Member
         * @param id
         * @param teamMemberId
         * @param operations
         */
		projectProjectsIdTeamMembersTeamMemberIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/teamMembers/{teamMemberId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamMemberId' + '}', String(params.teamMemberId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersTeamMemberIdPatch');
			}
			// verify required parameter 'teamMemberId' is set
			if (params.teamMemberId == null) {
				throw new Error('Missing required parameter teamMemberId when calling projectProjectsIdTeamMembersTeamMemberIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling projectProjectsIdTeamMembersTeamMemberIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Team Member
         * @param id
         * @param teamMemberId
         * @param teamMember
         */
		projectProjectsIdTeamMembersTeamMemberIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/project/projects/{id}/teamMembers/{teamMemberId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'teamMemberId' + '}', String(params.teamMemberId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersTeamMemberIdPut');
			}
			// verify required parameter 'teamMemberId' is set
			if (params.teamMemberId == null) {
				throw new Error('Missing required parameter teamMemberId when calling projectProjectsIdTeamMembersTeamMemberIdPut');
			}
			// verify required parameter 'teamMember' is set
			if (params.teamMember == null) {
				throw new Error('Missing required parameter teamMember when calling projectProjectsIdTeamMembersTeamMemberIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.teamMember)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ProjectsTeammembersApi;
})());
export { ProjectsTeammembersApi };
const PurchaseOrderLineItemsApi = ((() => {
	class PurchaseOrderLineItemsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Purchase Order Line Items Count
         * @param id
         * @param conditions
         */
		procurementPurchaseordersIdLineitemsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Purchase Order Line Items
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementPurchaseordersIdLineitemsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Purchase Order Line Item By Id
         * @param id
         * @param lineItemId
         */
		procurementPurchaseordersIdLineitemsLineItemIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems/{lineItemId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'lineItemId' + '}', String(params.lineItemId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsLineItemIdDelete');
			}
			// verify required parameter 'lineItemId' is set
			if (params.lineItemId == null) {
				throw new Error('Missing required parameter lineItemId when calling procurementPurchaseordersIdLineitemsLineItemIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Purchase Order Line Item By Id
         * @param id
         * @param lineItemId
         */
		procurementPurchaseordersIdLineitemsLineItemIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems/{lineItemId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'lineItemId' + '}', String(params.lineItemId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsLineItemIdGet');
			}
			// verify required parameter 'lineItemId' is set
			if (params.lineItemId == null) {
				throw new Error('Missing required parameter lineItemId when calling procurementPurchaseordersIdLineitemsLineItemIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Purchase Order Line Item
         * @param id
         * @param lineItemId
         * @param operations
         */
		procurementPurchaseordersIdLineitemsLineItemIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems/{lineItemId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'lineItemId' + '}', String(params.lineItemId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsLineItemIdPatch');
			}
			// verify required parameter 'lineItemId' is set
			if (params.lineItemId == null) {
				throw new Error('Missing required parameter lineItemId when calling procurementPurchaseordersIdLineitemsLineItemIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementPurchaseordersIdLineitemsLineItemIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Purchase Order Line Item
         * @param id
         * @param lineItemId
         * @param purchaseOrderLineItem
         */
		procurementPurchaseordersIdLineitemsLineItemIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems/{lineItemId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'lineItemId' + '}', String(params.lineItemId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsLineItemIdPut');
			}
			// verify required parameter 'lineItemId' is set
			if (params.lineItemId == null) {
				throw new Error('Missing required parameter lineItemId when calling procurementPurchaseordersIdLineitemsLineItemIdPut');
			}
			// verify required parameter 'purchaseOrderLineItem' is set
			if (params.purchaseOrderLineItem == null) {
				throw new Error('Missing required parameter purchaseOrderLineItem when calling procurementPurchaseordersIdLineitemsLineItemIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.purchaseOrderLineItem)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Purchase Order Line Item
         * @param id
         * @param purchaseOrderLineItem
         */
		procurementPurchaseordersIdLineitemsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsPost');
			}
			// verify required parameter 'purchaseOrderLineItem' is set
			if (params.purchaseOrderLineItem == null) {
				throw new Error('Missing required parameter purchaseOrderLineItem when calling procurementPurchaseordersIdLineitemsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.purchaseOrderLineItem)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return PurchaseOrderLineItemsApi;
})());
export { PurchaseOrderLineItemsApi };
const PurchaseOrdersApi = ((() => {
	class PurchaseOrdersApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Purchase Orders Count
         * @param conditions
         */
		procurementPurchaseordersCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/purchaseorders/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Purchase Orders
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementPurchaseordersGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/purchaseorders`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Purchase Order By Id
         * @param id
         */
		procurementPurchaseordersIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/purchaseorders/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPurchaseordersIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Purchase Order By Id
         * @param id
         */
		procurementPurchaseordersIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/purchaseorders/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPurchaseordersIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Purchase Order
         * @param id
         * @param operations
         */
		procurementPurchaseordersIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/purchaseorders/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPurchaseordersIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementPurchaseordersIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Purchase Order
         * @param id
         * @param purchaseOrder
         */
		procurementPurchaseordersIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/purchaseorders/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementPurchaseordersIdPut');
			}
			// verify required parameter 'purchaseOrder' is set
			if (params.purchaseOrder == null) {
				throw new Error('Missing required parameter purchaseOrder when calling procurementPurchaseordersIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.purchaseOrder)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Purchase Order
         * @param purchaseOrder
         */
		procurementPurchaseordersPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/purchaseorders`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'purchaseOrder' is set
			if (params.purchaseOrder == null) {
				throw new Error('Missing required parameter purchaseOrder when calling procurementPurchaseordersPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.purchaseOrder)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return PurchaseOrdersApi;
})());
export { PurchaseOrdersApi };
const RMAActionsApi = ((() => {
	class RMAActionsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get R M A Action Count
         * @param conditions
         */
		procurementRmaActionsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/rmaActions/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get R M A Action
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementRmaActionsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/rmaActions`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete R M A Action By Id
         * @param id
         */
		procurementRmaActionsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/rmaActions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementRmaActionsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get R M A Action By Id
         * @param id
         */
		procurementRmaActionsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/rmaActions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementRmaActionsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update R M A Action
         * @param id
         * @param operations
         */
		procurementRmaActionsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/rmaActions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementRmaActionsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementRmaActionsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace R M A Action
         * @param id
         * @param rmaAction
         */
		procurementRmaActionsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/rmaActions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementRmaActionsIdPut');
			}
			// verify required parameter 'rmaAction' is set
			if (params.rmaAction == null) {
				throw new Error('Missing required parameter rmaAction when calling procurementRmaActionsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.rmaAction)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create R M A Action
         * @param rmaAction
         */
		procurementRmaActionsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/rmaActions`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'rmaAction' is set
			if (params.rmaAction == null) {
				throw new Error('Missing required parameter rmaAction when calling procurementRmaActionsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.rmaAction)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return RMAActionsApi;
})());
export { RMAActionsApi };
const RMADispositionsApi = ((() => {
	class RMADispositionsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get R M A Disposition Count
         * @param conditions
         */
		procurementRMADispositionsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/RMADispositions/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get R M A Disposition
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementRMADispositionsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/RMADispositions`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete R M A Disposition By Id
         * @param id
         */
		procurementRMADispositionsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/RMADispositions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementRMADispositionsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get R M A Disposition By Id
         * @param id
         */
		procurementRMADispositionsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/RMADispositions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementRMADispositionsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update R M A Disposition
         * @param id
         * @param operations
         */
		procurementRMADispositionsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/RMADispositions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementRMADispositionsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementRMADispositionsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace R M A Disposition
         * @param id
         * @param rMADisposition
         */
		procurementRMADispositionsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/RMADispositions/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementRMADispositionsIdPut');
			}
			// verify required parameter 'rMADisposition' is set
			if (params.rMADisposition == null) {
				throw new Error('Missing required parameter rMADisposition when calling procurementRMADispositionsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.rMADisposition)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create R M A Disposition
         * @param rMADisposition
         */
		procurementRMADispositionsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/RMADispositions`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'rMADisposition' is set
			if (params.rMADisposition == null) {
				throw new Error('Missing required parameter rMADisposition when calling procurementRMADispositionsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.rMADisposition)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return RMADispositionsApi;
})());
export { RMADispositionsApi };
const ReportsApi = ((() => {
	class ReportsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Reports
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         */
		systemReportsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/reports`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Column Definitions
         * @param reportName
         */
		systemReportsReportNameColumnsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/reports/{reportName}/columns'
				.replace('{' + 'reportName' + '}', String(params.reportName));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'reportName' is set
			if (params.reportName == null) {
				throw new Error('Missing required parameter reportName when calling systemReportsReportNameColumnsGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Report Results Count
         * @param reportName
         * @param conditions
         */
		systemReportsReportNameCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/reports/{reportName}/count'
				.replace('{' + 'reportName' + '}', String(params.reportName));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'reportName' is set
			if (params.reportName == null) {
				throw new Error('Missing required parameter reportName when calling systemReportsReportNameCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Report Results
         * @param reportName
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         * @param columns
         */
		systemReportsReportNameGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/reports/{reportName}'
				.replace('{' + 'reportName' + '}', String(params.reportName));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'reportName' is set
			if (params.reportName == null) {
				throw new Error('Missing required parameter reportName when calling systemReportsReportNameGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			if (params.columns !== undefined) {
				queryParameters['columns'] = params.columns;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ReportsApi;
})());
export { ReportsApi };
const RolesApi = ((() => {
	class RolesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Role Count
         * @param conditions
         */
		salesRolesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/roles/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Role
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesRolesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/roles`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Role By Id
         * @param id
         */
		salesRolesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/roles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesRolesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Role By Id
         * @param id
         */
		salesRolesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/roles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesRolesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Role
         * @param id
         * @param operations
         */
		salesRolesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/roles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesRolesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesRolesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Role
         * @param id
         * @param role
         */
		salesRolesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/roles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesRolesIdPut');
			}
			// verify required parameter 'role' is set
			if (params.role == null) {
				throw new Error('Missing required parameter role when calling salesRolesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.role)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Role
         * @param role
         */
		salesRolesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/roles`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'role' is set
			if (params.role == null) {
				throw new Error('Missing required parameter role when calling salesRolesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.role)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return RolesApi;
})());
export { RolesApi };
const SalesProbabilitiesApi = ((() => {
	class SalesProbabilitiesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Probabilities Count
         * @param conditions
         */
		salesProbabilitiesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/probabilities/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Probabilities
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		salesProbabilitiesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/probabilities`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Probability By Id
         * @param id
         */
		salesProbabilitiesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/probabilities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesProbabilitiesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Probability By Id
         * @param id
         */
		salesProbabilitiesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/probabilities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesProbabilitiesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Probability
         * @param id
         * @param operations
         */
		salesProbabilitiesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/probabilities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesProbabilitiesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling salesProbabilitiesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Probability
         * @param id
         * @param probability
         */
		salesProbabilitiesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/sales/probabilities/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling salesProbabilitiesIdPut');
			}
			// verify required parameter 'probability' is set
			if (params.probability == null) {
				throw new Error('Missing required parameter probability when calling salesProbabilitiesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.probability)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Probability
         * @param probability
         */
		salesProbabilitiesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/sales/probabilities`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'probability' is set
			if (params.probability == null) {
				throw new Error('Missing required parameter probability when calling salesProbabilitiesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.probability)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return SalesProbabilitiesApi;
})());
export { SalesProbabilitiesApi };
const ScheduleEntriesApi = ((() => {
	class ScheduleEntriesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Schedules Count
         * @param conditions
         */
		scheduleEntriesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/schedule/entries/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Schedules
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		scheduleEntriesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/schedule/entries`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Schedule By Id
         * @param id
         */
		scheduleEntriesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleEntriesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Schedule By Id
         * @param id
         */
		scheduleEntriesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleEntriesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Schedule
         * @param id
         * @param operations
         */
		scheduleEntriesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleEntriesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling scheduleEntriesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Schedule
         * @param id
         * @param scheduleEntry
         */
		scheduleEntriesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleEntriesIdPut');
			}
			// verify required parameter 'scheduleEntry' is set
			if (params.scheduleEntry == null) {
				throw new Error('Missing required parameter scheduleEntry when calling scheduleEntriesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.scheduleEntry)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Schedule
         * @param scheduleEntry
         */
		scheduleEntriesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/schedule/entries`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'scheduleEntry' is set
			if (params.scheduleEntry == null) {
				throw new Error('Missing required parameter scheduleEntry when calling scheduleEntriesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.scheduleEntry)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ScheduleEntriesApi;
})());
export { ScheduleEntriesApi };
const ScheduleReminderTimesApi = ((() => {
	class ScheduleReminderTimesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Reminder Time Count
         * @param conditions
         */
		scheduleReminderTimesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/schedule/reminderTimes/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Reminder Time
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		scheduleReminderTimesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/schedule/reminderTimes`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Reminder Time By Id
         * @param id
         */
		scheduleReminderTimesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/reminderTimes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleReminderTimesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Reminder Time
         * @param id
         * @param operations
         */
		scheduleReminderTimesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/reminderTimes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleReminderTimesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling scheduleReminderTimesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Reminder Time
         * @param id
         * @param reminderTime
         */
		scheduleReminderTimesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/reminderTimes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleReminderTimesIdPut');
			}
			// verify required parameter 'reminderTime' is set
			if (params.reminderTime == null) {
				throw new Error('Missing required parameter reminderTime when calling scheduleReminderTimesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.reminderTime)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ScheduleReminderTimesApi;
})());
export { ScheduleReminderTimesApi };
const ScheduleStatusesApi = ((() => {
	class ScheduleStatusesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Schedule Statuses Count
         * @param conditions
         */
		scheduleStatusesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/schedule/statuses/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Schedule Statuses
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		scheduleStatusesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/schedule/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Schedule Status By Id
         * @param id
         */
		scheduleStatusesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleStatusesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Schedule Status By Id
         * @param id
         */
		scheduleStatusesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleStatusesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Schedule Status
         * @param id
         * @param operations
         */
		scheduleStatusesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleStatusesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling scheduleStatusesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Schedule Status
         * @param id
         * @param scheduleStatus
         */
		scheduleStatusesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/statuses/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleStatusesIdPut');
			}
			// verify required parameter 'scheduleStatus' is set
			if (params.scheduleStatus == null) {
				throw new Error('Missing required parameter scheduleStatus when calling scheduleStatusesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.scheduleStatus)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Schedule Status
         * @param scheduleStatus
         */
		scheduleStatusesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/schedule/statuses`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'scheduleStatus' is set
			if (params.scheduleStatus == null) {
				throw new Error('Missing required parameter scheduleStatus when calling scheduleStatusesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.scheduleStatus)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ScheduleStatusesApi;
})());
export { ScheduleStatusesApi };
const ScheduleStopwatchesApi = ((() => {
	class ScheduleStopwatchesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Schedule Stopwatches Count
         * @param conditions
         */
		timeSchedulestopwatchesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/schedulestopwatches/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Schedule Stopwatches
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		timeSchedulestopwatchesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/schedulestopwatches`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Schedule Stopwatch By Id
         * @param id
         */
		timeSchedulestopwatchesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/schedulestopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeSchedulestopwatchesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Schedule Stopwatch By Id
         * @param id
         */
		timeSchedulestopwatchesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/schedulestopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeSchedulestopwatchesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Schedule Stopwatch
         * @param id
         * @param operations
         */
		timeSchedulestopwatchesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/schedulestopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeSchedulestopwatchesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling timeSchedulestopwatchesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Schedule Stopwatch
         * @param id
         * @param scheduleStopwatch
         */
		timeSchedulestopwatchesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/schedulestopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeSchedulestopwatchesIdPut');
			}
			// verify required parameter 'scheduleStopwatch' is set
			if (params.scheduleStopwatch == null) {
				throw new Error('Missing required parameter scheduleStopwatch when calling timeSchedulestopwatchesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.scheduleStopwatch)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Schedule Stopwatch
         * @param scheduleStopwatch
         */
		timeSchedulestopwatchesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/schedulestopwatches`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'scheduleStopwatch' is set
			if (params.scheduleStopwatch == null) {
				throw new Error('Missing required parameter scheduleStopwatch when calling timeSchedulestopwatchesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.scheduleStopwatch)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ScheduleStopwatchesApi;
})());
export { ScheduleStopwatchesApi };
const ScheduleTypesApi = ((() => {
	class ScheduleTypesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Schedule Types Count
         * @param conditions
         */
		scheduleTypesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/schedule/types/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Schedule Types
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		scheduleTypesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/schedule/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Schedule Type By Id
         * @param id
         */
		scheduleTypesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleTypesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Schedule Type By Id
         * @param id
         */
		scheduleTypesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleTypesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Schedule Type
         * @param id
         * @param operations
         */
		scheduleTypesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleTypesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling scheduleTypesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Schedule Type
         * @param id
         * @param scheduleType
         */
		scheduleTypesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/schedule/types/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling scheduleTypesIdPut');
			}
			// verify required parameter 'scheduleType' is set
			if (params.scheduleType == null) {
				throw new Error('Missing required parameter scheduleType when calling scheduleTypesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.scheduleType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Schedule Type
         * @param scheduleType
         */
		scheduleTypesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/schedule/types`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'scheduleType' is set
			if (params.scheduleType == null) {
				throw new Error('Missing required parameter scheduleType when calling scheduleTypesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.scheduleType)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ScheduleTypesApi;
})());
export { ScheduleTypesApi };
const ShipmentMethodsApi = ((() => {
	class ShipmentMethodsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Shipment Methods Count
         * @param conditions
         */
		procurementShipmentmethodsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/shipmentmethods/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Shipment Methods
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementShipmentmethodsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/shipmentmethods`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Shipment Method By Id
         * @param id
         */
		procurementShipmentmethodsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/shipmentmethods/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementShipmentmethodsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Shipment Method By Id
         * @param id
         */
		procurementShipmentmethodsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/shipmentmethods/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementShipmentmethodsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Shipment Method
         * @param id
         * @param operations
         */
		procurementShipmentmethodsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/shipmentmethods/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementShipmentmethodsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementShipmentmethodsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Shipment Method
         * @param id
         * @param shipmentMethod
         */
		procurementShipmentmethodsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/shipmentmethods/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementShipmentmethodsIdPut');
			}
			// verify required parameter 'shipmentMethod' is set
			if (params.shipmentMethod == null) {
				throw new Error('Missing required parameter shipmentMethod when calling procurementShipmentmethodsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.shipmentMethod)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Shipment Method
         * @param shipmentMethod
         */
		procurementShipmentmethodsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/shipmentmethods`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'shipmentMethod' is set
			if (params.shipmentMethod == null) {
				throw new Error('Missing required parameter shipmentMethod when calling procurementShipmentmethodsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.shipmentMethod)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return ShipmentMethodsApi;
})());
export { ShipmentMethodsApi };
const SkillCategoriesApi = ((() => {
	class SkillCategoriesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Skill Categories Count
         * @param conditions
         */
		systemSkillCategoriesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/skillCategories/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Skill Categories
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemSkillCategoriesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/skillCategories`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Skill Category By Id
         * @param id
         */
		systemSkillCategoriesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/skillCategories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemSkillCategoriesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Skill Category By Id
         * @param id
         */
		systemSkillCategoriesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/skillCategories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemSkillCategoriesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Skill Category
         * @param id
         * @param operations
         */
		systemSkillCategoriesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/skillCategories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemSkillCategoriesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemSkillCategoriesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Skill Category
         * @param id
         * @param skillCategory
         */
		systemSkillCategoriesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/skillCategories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemSkillCategoriesIdPut');
			}
			// verify required parameter 'skillCategory' is set
			if (params.skillCategory == null) {
				throw new Error('Missing required parameter skillCategory when calling systemSkillCategoriesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.skillCategory)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Skill Category
         * @param skillCategory
         */
		systemSkillCategoriesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/skillCategories`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'skillCategory' is set
			if (params.skillCategory == null) {
				throw new Error('Missing required parameter skillCategory when calling systemSkillCategoriesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.skillCategory)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return SkillCategoriesApi;
})());
export { SkillCategoriesApi };
const SkillsApi = ((() => {
	class SkillsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Skill Count
         * @param conditions
         */
		systemSkillsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/skills/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Skill
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemSkillsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/skills`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Skill By Id
         * @param id
         */
		systemSkillsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/skills/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemSkillsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Skill By Id
         * @param id
         */
		systemSkillsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/skills/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemSkillsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Skill
         * @param id
         * @param operations
         */
		systemSkillsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/skills/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemSkillsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemSkillsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Skill
         * @param id
         * @param skill
         */
		systemSkillsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/skills/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemSkillsIdPut');
			}
			// verify required parameter 'skill' is set
			if (params.skill == null) {
				throw new Error('Missing required parameter skill when calling systemSkillsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.skill)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Skill
         * @param skill
         */
		systemSkillsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/skills`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'skill' is set
			if (params.skill == null) {
				throw new Error('Missing required parameter skill when calling systemSkillsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.skill)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return SkillsApi;
})());
export { SkillsApi };
const SourcesApi = ((() => {
	class SourcesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Create Sources Count
         * @param conditions
         */
		serviceSourcesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/sources/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Sources
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceSourcesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/sources`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Source By Id
         * @param id
         */
		serviceSourcesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/sources/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSourcesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Source By Id
         * @param id
         */
		serviceSourcesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/sources/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSourcesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Source
         * @param id
         * @param operations
         */
		serviceSourcesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/sources/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSourcesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceSourcesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Source
         * @param id
         * @param source
         */
		serviceSourcesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/sources/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSourcesIdPut');
			}
			// verify required parameter 'source' is set
			if (params.source == null) {
				throw new Error('Missing required parameter source when calling serviceSourcesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.source)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Source
         * @param source
         */
		serviceSourcesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/sources`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'source' is set
			if (params.source == null) {
				throw new Error('Missing required parameter source when calling serviceSourcesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.source)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return SourcesApi;
})());
export { SourcesApi };
const SubCategoriesApi = ((() => {
	class SubCategoriesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Sub Categories Count
         * @param id
         * @param conditions
         */
		procurementCategoriesIdSubcategoriesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/categories/{id}/subcategories/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Sub Categories
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementCategoriesIdSubcategoriesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/categories/{id}/subcategories'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Sub Category
         * @param id
         * @param subCategory
         */
		procurementCategoriesIdSubcategoriesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/categories/{id}/subcategories'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesPost');
			}
			// verify required parameter 'subCategory' is set
			if (params.subCategory == null) {
				throw new Error('Missing required parameter subCategory when calling procurementCategoriesIdSubcategoriesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.subCategory)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Sub Category By Id
         * @param id
         * @param subcategoryID
         */
		procurementCategoriesIdSubcategoriesSubcategoryIDDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/categories/{id}/subcategories/{subcategoryID}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subcategoryID' + '}', String(params.subcategoryID));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesSubcategoryIDDelete');
			}
			// verify required parameter 'subcategoryID' is set
			if (params.subcategoryID == null) {
				throw new Error('Missing required parameter subcategoryID when calling procurementCategoriesIdSubcategoriesSubcategoryIDDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Sub Category By Id
         * @param id
         * @param subcategoryID
         */
		procurementCategoriesIdSubcategoriesSubcategoryIDGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/categories/{id}/subcategories/{subcategoryID}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subcategoryID' + '}', String(params.subcategoryID));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesSubcategoryIDGet');
			}
			// verify required parameter 'subcategoryID' is set
			if (params.subcategoryID == null) {
				throw new Error('Missing required parameter subcategoryID when calling procurementCategoriesIdSubcategoriesSubcategoryIDGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Sub Category
         * @param id
         * @param subcategoryID
         * @param operations
         */
		procurementCategoriesIdSubcategoriesSubcategoryIDPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/categories/{id}/subcategories/{subcategoryID}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subcategoryID' + '}', String(params.subcategoryID));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesSubcategoryIDPatch');
			}
			// verify required parameter 'subcategoryID' is set
			if (params.subcategoryID == null) {
				throw new Error('Missing required parameter subcategoryID when calling procurementCategoriesIdSubcategoriesSubcategoryIDPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementCategoriesIdSubcategoriesSubcategoryIDPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Sub Category
         * @param id
         * @param subcategoryID
         * @param subCategory
         */
		procurementCategoriesIdSubcategoriesSubcategoryIDPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/categories/{id}/subcategories/{subcategoryID}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'subcategoryID' + '}', String(params.subcategoryID));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesSubcategoryIDPut');
			}
			// verify required parameter 'subcategoryID' is set
			if (params.subcategoryID == null) {
				throw new Error('Missing required parameter subcategoryID when calling procurementCategoriesIdSubcategoriesSubcategoryIDPut');
			}
			// verify required parameter 'subCategory' is set
			if (params.subCategory == null) {
				throw new Error('Missing required parameter subCategory when calling procurementCategoriesIdSubcategoriesSubcategoryIDPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.subCategory)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return SubCategoriesApi;
})());
export { SubCategoriesApi };
const SurveyQuestionsApi = ((() => {
	class SurveyQuestionsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Survey Questions Count
         * @param id
         * @param conditions
         */
		serviceSurveysIdQuestionsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/questions/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Survey Questions
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceSurveysIdQuestionsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/questions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Survey Question
         * @param id
         * @param surveyQuestion
         */
		serviceSurveysIdQuestionsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/questions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsPost');
			}
			// verify required parameter 'surveyQuestion' is set
			if (params.surveyQuestion == null) {
				throw new Error('Missing required parameter surveyQuestion when calling serviceSurveysIdQuestionsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.surveyQuestion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Survey Question By Id
         * @param id
         * @param questionId
         */
		serviceSurveysIdQuestionsQuestionIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/questions/{questionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'questionId' + '}', String(params.questionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsQuestionIdDelete');
			}
			// verify required parameter 'questionId' is set
			if (params.questionId == null) {
				throw new Error('Missing required parameter questionId when calling serviceSurveysIdQuestionsQuestionIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Survey Question By Id
         * @param id
         * @param questionId
         */
		serviceSurveysIdQuestionsQuestionIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/questions/{questionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'questionId' + '}', String(params.questionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsQuestionIdGet');
			}
			// verify required parameter 'questionId' is set
			if (params.questionId == null) {
				throw new Error('Missing required parameter questionId when calling serviceSurveysIdQuestionsQuestionIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Survey Question
         * @param id
         * @param questionId
         * @param operations
         */
		serviceSurveysIdQuestionsQuestionIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/questions/{questionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'questionId' + '}', String(params.questionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsQuestionIdPatch');
			}
			// verify required parameter 'questionId' is set
			if (params.questionId == null) {
				throw new Error('Missing required parameter questionId when calling serviceSurveysIdQuestionsQuestionIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceSurveysIdQuestionsQuestionIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Survey Question
         * @param id
         * @param questionId
         * @param surveyQuestion
         */
		serviceSurveysIdQuestionsQuestionIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/questions/{questionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'questionId' + '}', String(params.questionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsQuestionIdPut');
			}
			// verify required parameter 'questionId' is set
			if (params.questionId == null) {
				throw new Error('Missing required parameter questionId when calling serviceSurveysIdQuestionsQuestionIdPut');
			}
			// verify required parameter 'surveyQuestion' is set
			if (params.surveyQuestion == null) {
				throw new Error('Missing required parameter surveyQuestion when calling serviceSurveysIdQuestionsQuestionIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.surveyQuestion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return SurveyQuestionsApi;
})());
export { SurveyQuestionsApi };
const SurveyResultsApi = ((() => {
	class SurveyResultsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Survey Results Count
         * @param id
         * @param conditions
         */
		serviceSurveysIdResultsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/results/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdResultsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Survey Results
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceSurveysIdResultsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/results'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdResultsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Survey Result
         * @param id
         * @param surveyResult
         */
		serviceSurveysIdResultsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/results'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdResultsPost');
			}
			// verify required parameter 'surveyResult' is set
			if (params.surveyResult == null) {
				throw new Error('Missing required parameter surveyResult when calling serviceSurveysIdResultsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.surveyResult)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Survey Result By Id
         * @param id
         * @param resultId
         */
		serviceSurveysIdResultsResultIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/results/{resultId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'resultId' + '}', String(params.resultId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdResultsResultIdDelete');
			}
			// verify required parameter 'resultId' is set
			if (params.resultId == null) {
				throw new Error('Missing required parameter resultId when calling serviceSurveysIdResultsResultIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Survey Result By Id
         * @param id
         * @param resultId
         */
		serviceSurveysIdResultsResultIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/results/{resultId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'resultId' + '}', String(params.resultId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdResultsResultIdGet');
			}
			// verify required parameter 'resultId' is set
			if (params.resultId == null) {
				throw new Error('Missing required parameter resultId when calling serviceSurveysIdResultsResultIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Survey Result
         * @param id
         * @param resultId
         * @param operations
         */
		serviceSurveysIdResultsResultIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/results/{resultId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'resultId' + '}', String(params.resultId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdResultsResultIdPatch');
			}
			// verify required parameter 'resultId' is set
			if (params.resultId == null) {
				throw new Error('Missing required parameter resultId when calling serviceSurveysIdResultsResultIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceSurveysIdResultsResultIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Survey Result
         * @param id
         * @param resultId
         * @param surveyResult
         */
		serviceSurveysIdResultsResultIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}/results/{resultId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'resultId' + '}', String(params.resultId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdResultsResultIdPut');
			}
			// verify required parameter 'resultId' is set
			if (params.resultId == null) {
				throw new Error('Missing required parameter resultId when calling serviceSurveysIdResultsResultIdPut');
			}
			// verify required parameter 'surveyResult' is set
			if (params.surveyResult == null) {
				throw new Error('Missing required parameter surveyResult when calling serviceSurveysIdResultsResultIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.surveyResult)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return SurveyResultsApi;
})());
export { SurveyResultsApi };
const SurveysApi = ((() => {
	class SurveysApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Surveys Count
         * @param conditions
         */
		serviceSurveysCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/surveys/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Surveys
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceSurveysGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/surveys`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Survey By Id
         * @param id
         */
		serviceSurveysIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Survey By Id
         * @param id
         */
		serviceSurveysIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Survey
         * @param id
         * @param operations
         */
		serviceSurveysIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceSurveysIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Survey
         * @param id
         * @param survey
         */
		serviceSurveysIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/surveys/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceSurveysIdPut');
			}
			// verify required parameter 'survey' is set
			if (params.survey == null) {
				throw new Error('Missing required parameter survey when calling serviceSurveysIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.survey)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Survey
         * @param survey
         */
		serviceSurveysPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/surveys`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'survey' is set
			if (params.survey == null) {
				throw new Error('Missing required parameter survey when calling serviceSurveysPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.survey)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return SurveysApi;
})());
export { SurveysApi };
const TaxCodeXRefsApi = ((() => {
	class TaxCodeXRefsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Tax Code X Ref Count
         * @param id
         * @param conditions
         */
		financeTaxCodesIdTaxCodeXRefsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Tax Code X Ref
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeTaxCodesIdTaxCodeXRefsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Tax Code X Ref
         * @param id
         * @param taxCodeXRef
         */
		financeTaxCodesIdTaxCodeXRefsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsPost');
			}
			// verify required parameter 'taxCodeXRef' is set
			if (params.taxCodeXRef == null) {
				throw new Error('Missing required parameter taxCodeXRef when calling financeTaxCodesIdTaxCodeXRefsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.taxCodeXRef)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Tax Code X Ref By Id
         * @param id
         * @param taxCodeXRefId
         */
		financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs/{taxCodeXRefId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'taxCodeXRefId' + '}', String(params.taxCodeXRefId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdDelete');
			}
			// verify required parameter 'taxCodeXRefId' is set
			if (params.taxCodeXRefId == null) {
				throw new Error('Missing required parameter taxCodeXRefId when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Tax Code X Ref By Id
         * @param id
         * @param taxCodeXRefId
         */
		financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs/{taxCodeXRefId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'taxCodeXRefId' + '}', String(params.taxCodeXRefId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdGet');
			}
			// verify required parameter 'taxCodeXRefId' is set
			if (params.taxCodeXRefId == null) {
				throw new Error('Missing required parameter taxCodeXRefId when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Tax Code X Ref
         * @param id
         * @param taxCodeXRefId
         * @param operations
         */
		financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs/{taxCodeXRefId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'taxCodeXRefId' + '}', String(params.taxCodeXRefId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPatch');
			}
			// verify required parameter 'taxCodeXRefId' is set
			if (params.taxCodeXRefId == null) {
				throw new Error('Missing required parameter taxCodeXRefId when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Tax Code X Ref
         * @param id
         * @param taxCodeXRefId
         * @param taxCodeXRef
         */
		financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs/{taxCodeXRefId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'taxCodeXRefId' + '}', String(params.taxCodeXRefId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPut');
			}
			// verify required parameter 'taxCodeXRefId' is set
			if (params.taxCodeXRefId == null) {
				throw new Error('Missing required parameter taxCodeXRefId when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPut');
			}
			// verify required parameter 'taxCodeXRef' is set
			if (params.taxCodeXRef == null) {
				throw new Error('Missing required parameter taxCodeXRef when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.taxCodeXRef)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return TaxCodeXRefsApi;
})());
export { TaxCodeXRefsApi };
const TaxCodesApi = ((() => {
	class TaxCodesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Tax Code Count
         * @param conditions
         */
		financeTaxCodesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/taxCodes/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Tax Code
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		financeTaxCodesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/taxCodes`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Tax Code By Id
         * @param id
         */
		financeTaxCodesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/taxCodes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeTaxCodesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Tax Code By Id
         * @param id
         */
		financeTaxCodesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/taxCodes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeTaxCodesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Tax Code
         * @param id
         * @param operations
         */
		financeTaxCodesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/taxCodes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeTaxCodesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling financeTaxCodesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Tax Code
         * @param id
         * @param taxCode
         */
		financeTaxCodesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/finance/taxCodes/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling financeTaxCodesIdPut');
			}
			// verify required parameter 'taxCode' is set
			if (params.taxCode == null) {
				throw new Error('Missing required parameter taxCode when calling financeTaxCodesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.taxCode)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Tax Code
         * @param taxCode
         */
		financeTaxCodesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/finance/taxCodes`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'taxCode' is set
			if (params.taxCode == null) {
				throw new Error('Missing required parameter taxCode when calling financeTaxCodesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.taxCode)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return TaxCodesApi;
})());
export { TaxCodesApi };
const TeamRolesApi = ((() => {
	class TeamRolesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Team Role Count
         * @param conditions
         */
		companyTeamRolesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/teamRoles/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Team Role
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		companyTeamRolesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/teamRoles`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Team Role By Id
         * @param id
         */
		companyTeamRolesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/teamRoles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyTeamRolesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Team Role By Id
         * @param id
         */
		companyTeamRolesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/teamRoles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyTeamRolesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Team Role
         * @param id
         * @param operations
         */
		companyTeamRolesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/teamRoles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyTeamRolesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling companyTeamRolesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Team Role
         * @param id
         * @param teamRole
         */
		companyTeamRolesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/company/teamRoles/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling companyTeamRolesIdPut');
			}
			// verify required parameter 'teamRole' is set
			if (params.teamRole == null) {
				throw new Error('Missing required parameter teamRole when calling companyTeamRolesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.teamRole)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Team Role
         * @param teamRole
         */
		companyTeamRolesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/company/teamRoles`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'teamRole' is set
			if (params.teamRole == null) {
				throw new Error('Missing required parameter teamRole when calling companyTeamRolesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.teamRole)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return TeamRolesApi;
})());
export { TeamRolesApi };
const TicketNotesApi = ((() => {
	class TicketNotesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Service Notes Count
         * @param id
         * @param conditions
         */
		serviceTicketsIdNotesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/notes/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdNotesCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Service Notes
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceTicketsIdNotesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/notes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdNotesGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Service Note By Id
         * @param id
         * @param noteId
         */
		serviceTicketsIdNotesNoteIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdNotesNoteIdDelete');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling serviceTicketsIdNotesNoteIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Service Note By Id
         * @param id
         * @param noteId
         */
		serviceTicketsIdNotesNoteIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdNotesNoteIdGet');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling serviceTicketsIdNotesNoteIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Service Note
         * @param id
         * @param noteId
         * @param operations
         */
		serviceTicketsIdNotesNoteIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdNotesNoteIdPatch');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling serviceTicketsIdNotesNoteIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceTicketsIdNotesNoteIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Service Note
         * @param id
         * @param noteId
         * @param serviceNote
         */
		serviceTicketsIdNotesNoteIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/notes/{noteId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'noteId' + '}', String(params.noteId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdNotesNoteIdPut');
			}
			// verify required parameter 'noteId' is set
			if (params.noteId == null) {
				throw new Error('Missing required parameter noteId when calling serviceTicketsIdNotesNoteIdPut');
			}
			// verify required parameter 'serviceNote' is set
			if (params.serviceNote == null) {
				throw new Error('Missing required parameter serviceNote when calling serviceTicketsIdNotesNoteIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.serviceNote)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Service Note
         * @param id
         * @param serviceNote
         */
		serviceTicketsIdNotesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/notes'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdNotesPost');
			}
			// verify required parameter 'serviceNote' is set
			if (params.serviceNote == null) {
				throw new Error('Missing required parameter serviceNote when calling serviceTicketsIdNotesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.serviceNote)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return TicketNotesApi;
})());
export { TicketNotesApi };
const TicketStopwatchesApi = ((() => {
	class TicketStopwatchesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Ticket Stopwatches Count
         * @param conditions
         */
		timeTicketstopwatchesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/ticketstopwatches/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Stopwatches
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		timeTicketstopwatchesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/ticketstopwatches`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Ticket Stopwatch By Id
         * @param id
         */
		timeTicketstopwatchesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/ticketstopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeTicketstopwatchesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Stopwatch By Id
         * @param id
         */
		timeTicketstopwatchesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/ticketstopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeTicketstopwatchesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Ticket Stopwatch
         * @param id
         * @param operations
         */
		timeTicketstopwatchesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/ticketstopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeTicketstopwatchesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling timeTicketstopwatchesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Ticket Stopwatch
         * @param id
         * @param ticketStopwatch
         */
		timeTicketstopwatchesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/ticketstopwatches/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeTicketstopwatchesIdPut');
			}
			// verify required parameter 'ticketStopwatch' is set
			if (params.ticketStopwatch == null) {
				throw new Error('Missing required parameter ticketStopwatch when calling timeTicketstopwatchesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.ticketStopwatch)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Ticket Stopwatch
         * @param ticketStopwatch
         */
		timeTicketstopwatchesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/ticketstopwatches`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'ticketStopwatch' is set
			if (params.ticketStopwatch == null) {
				throw new Error('Missing required parameter ticketStopwatch when calling timeTicketstopwatchesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.ticketStopwatch)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return TicketStopwatchesApi;
})());
export { TicketStopwatchesApi };
const TicketTasksApi = ((() => {
	class TicketTasksApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Tasks Count
         * @param id
         * @param conditions
         */
		serviceTicketsIdTasksCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/tasks/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdTasksCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Tasks
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceTicketsIdTasksGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/tasks'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdTasksGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Task
         * @param id
         * @param task
         */
		serviceTicketsIdTasksPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/tasks'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdTasksPost');
			}
			// verify required parameter 'task' is set
			if (params.task == null) {
				throw new Error('Missing required parameter task when calling serviceTicketsIdTasksPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.task)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Task By Id
         * @param id
         * @param taskId
         */
		serviceTicketsIdTasksTaskIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/tasks/{taskId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'taskId' + '}', String(params.taskId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdTasksTaskIdDelete');
			}
			// verify required parameter 'taskId' is set
			if (params.taskId == null) {
				throw new Error('Missing required parameter taskId when calling serviceTicketsIdTasksTaskIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Task By Id
         * @param id
         * @param taskId
         */
		serviceTicketsIdTasksTaskIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/tasks/{taskId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'taskId' + '}', String(params.taskId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdTasksTaskIdGet');
			}
			// verify required parameter 'taskId' is set
			if (params.taskId == null) {
				throw new Error('Missing required parameter taskId when calling serviceTicketsIdTasksTaskIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Task
         * @param id
         * @param taskId
         * @param operations
         */
		serviceTicketsIdTasksTaskIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/tasks/{taskId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'taskId' + '}', String(params.taskId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdTasksTaskIdPatch');
			}
			// verify required parameter 'taskId' is set
			if (params.taskId == null) {
				throw new Error('Missing required parameter taskId when calling serviceTicketsIdTasksTaskIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceTicketsIdTasksTaskIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Task
         * @param id
         * @param taskId
         * @param task
         */
		serviceTicketsIdTasksTaskIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/tasks/{taskId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'taskId' + '}', String(params.taskId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdTasksTaskIdPut');
			}
			// verify required parameter 'taskId' is set
			if (params.taskId == null) {
				throw new Error('Missing required parameter taskId when calling serviceTicketsIdTasksTaskIdPut');
			}
			// verify required parameter 'task' is set
			if (params.task == null) {
				throw new Error('Missing required parameter task when calling serviceTicketsIdTasksTaskIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.task)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return TicketTasksApi;
})());
export { TicketTasksApi };
const TicketsApi = ((() => {
	class TicketsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Tickets Count
         * @param conditions
         * @param customFieldConditions
         */
		serviceTicketsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/tickets/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Tickets
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		serviceTicketsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/tickets`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Activities Count
         * @param id
         */
		serviceTicketsIdActivitiesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/activities/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdActivitiesCountGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Activities
         * @param id
         * @param page
         * @param pageSize
         */
		serviceTicketsIdActivitiesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/activities'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdActivitiesGet');
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Configuration Association
         * @param id
         * @param configId
         */
		serviceTicketsIdConfigurationsConfigIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/configurations/{configId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'configId' + '}', String(params.configId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdConfigurationsConfigIdDelete');
			}
			// verify required parameter 'configId' is set
			if (params.configId == null) {
				throw new Error('Missing required parameter configId when calling serviceTicketsIdConfigurationsConfigIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Configuration Association
         * @param id
         * @param configId
         */
		serviceTicketsIdConfigurationsConfigIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/configurations/{configId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'configId' + '}', String(params.configId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdConfigurationsConfigIdGet');
			}
			// verify required parameter 'configId' is set
			if (params.configId == null) {
				throw new Error('Missing required parameter configId when calling serviceTicketsIdConfigurationsConfigIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Configurations Count
         * @param id
         */
		serviceTicketsIdConfigurationsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/configurations/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdConfigurationsCountGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Configurations
         * @param id
         * @param page
         * @param pageSize
         */
		serviceTicketsIdConfigurationsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/configurations'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdConfigurationsGet');
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Configuration Association
         * @param id
         * @param configuration
         */
		serviceTicketsIdConfigurationsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/configurations'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdConfigurationsPost');
			}
			// verify required parameter 'configuration' is set
			if (params.configuration == null) {
				throw new Error('Missing required parameter configuration when calling serviceTicketsIdConfigurationsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.configuration)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Ticket By Id
         * @param id
         */
		serviceTicketsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Documents Count
         * @param id
         */
		serviceTicketsIdDocumentsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/documents/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdDocumentsCountGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Documents
         * @param id
         * @param page
         * @param pageSize
         */
		serviceTicketsIdDocumentsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/documents'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdDocumentsGet');
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket By Id
         * @param id
         */
		serviceTicketsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Merge Company
         * @param id
         * @param merge
         */
		serviceTicketsIdMergePost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/merge'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdMergePost');
			}
			// verify required parameter 'merge' is set
			if (params.merge == null) {
				throw new Error('Missing required parameter merge when calling serviceTicketsIdMergePost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.merge)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Ticket
         * @param id
         * @param operations
         */
		serviceTicketsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling serviceTicketsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Products Count
         * @param id
         */
		serviceTicketsIdProductsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/products/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdProductsCountGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Products
         * @param id
         * @param page
         * @param pageSize
         */
		serviceTicketsIdProductsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/products'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdProductsGet');
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Ticket
         * @param id
         * @param ticket
         */
		serviceTicketsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdPut');
			}
			// verify required parameter 'ticket' is set
			if (params.ticket == null) {
				throw new Error('Missing required parameter ticket when calling serviceTicketsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.ticket)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Schedule Entries Count
         * @param id
         */
		serviceTicketsIdScheduleentriesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/scheduleentries/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdScheduleentriesCountGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Schedule Entries
         * @param id
         * @param page
         * @param pageSize
         */
		serviceTicketsIdScheduleentriesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/scheduleentries'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdScheduleentriesGet');
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Time Entries Count
         * @param id
         */
		serviceTicketsIdTimeentriesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/timeentries/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdTimeentriesCountGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Ticket Time Entries
         * @param id
         * @param page
         * @param pageSize
         */
		serviceTicketsIdTimeentriesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/service/tickets/{id}/timeentries'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling serviceTicketsIdTimeentriesGet');
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Ticket
         * @param ticket
         */
		serviceTicketsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/tickets`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'ticket' is set
			if (params.ticket == null) {
				throw new Error('Missing required parameter ticket when calling serviceTicketsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.ticket)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Ticket Search
         * @param filterValues
         * @param page
         * @param pageSize
         */
		serviceTicketsSearchPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/service/tickets/search`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'filterValues' is set
			if (params.filterValues == null) {
				throw new Error('Missing required parameter filterValues when calling serviceTicketsSearchPost');
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.filterValues)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return TicketsApi;
})());
export { TicketsApi };
const TimeEntriesApi = ((() => {
	class TimeEntriesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Time Entries Count
         * @param conditions
         * @param customFieldConditions
         */
		timeEntriesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/entries/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.customFieldConditions !== undefined) {
				queryParameters['customFieldConditions'] = params.customFieldConditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Time Entries
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		timeEntriesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/entries`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Time Entry By Id
         * @param id
         */
		timeEntriesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeEntriesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Time Entry By Id
         * @param id
         */
		timeEntriesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeEntriesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Time Entry
         * @param id
         * @param operations
         */
		timeEntriesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeEntriesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling timeEntriesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Time Entry
         * @param id
         * @param timeEntry
         */
		timeEntriesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/time/entries/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling timeEntriesIdPut');
			}
			// verify required parameter 'timeEntry' is set
			if (params.timeEntry == null) {
				throw new Error('Missing required parameter timeEntry when calling timeEntriesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.timeEntry)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Time Entry
         * @param timeEntry
         */
		timeEntriesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/time/entries`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'timeEntry' is set
			if (params.timeEntry == null) {
				throw new Error('Missing required parameter timeEntry when calling timeEntriesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.timeEntry)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return TimeEntriesApi;
})());
export { TimeEntriesApi };
const TodayPageCategoriesApi = ((() => {
	class TodayPageCategoriesApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Today Page Categories Count
         * @param conditions
         */
		systemTodayPageCategoriesCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/todayPageCategories/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Today Page Categories
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemTodayPageCategoriesGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/todayPageCategories`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Today Page Category By Id
         * @param id
         */
		systemTodayPageCategoriesIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/todayPageCategories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemTodayPageCategoriesIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Today Page Category By Id
         * @param id
         */
		systemTodayPageCategoriesIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/todayPageCategories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemTodayPageCategoriesIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Today Page Category
         * @param id
         * @param operations
         */
		systemTodayPageCategoriesIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/todayPageCategories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemTodayPageCategoriesIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemTodayPageCategoriesIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Today Page Category
         * @param id
         * @param todayPageCategory
         */
		systemTodayPageCategoriesIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/todayPageCategories/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemTodayPageCategoriesIdPut');
			}
			// verify required parameter 'todayPageCategory' is set
			if (params.todayPageCategory == null) {
				throw new Error('Missing required parameter todayPageCategory when calling systemTodayPageCategoriesIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.todayPageCategory)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Today Page Category
         * @param todayPageCategory
         */
		systemTodayPageCategoriesPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/todayPageCategories`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'todayPageCategory' is set
			if (params.todayPageCategory == null) {
				throw new Error('Missing required parameter todayPageCategory when calling systemTodayPageCategoriesPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.todayPageCategory)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return TodayPageCategoriesApi;
})());
export { TodayPageCategoriesApi };
const UnitOfMeasureConversionsApi = ((() => {
	class UnitOfMeasureConversionsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Delete Conversion By Id
         * @param id
         * @param conversionId
         */
		procurementUnitOfMeasuresIdConversionsConversionIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions/{conversionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'conversionId' + '}', String(params.conversionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsConversionIdDelete');
			}
			// verify required parameter 'conversionId' is set
			if (params.conversionId == null) {
				throw new Error('Missing required parameter conversionId when calling procurementUnitOfMeasuresIdConversionsConversionIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Conversion By Id
         * @param id
         * @param conversionId
         */
		procurementUnitOfMeasuresIdConversionsConversionIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions/{conversionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'conversionId' + '}', String(params.conversionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsConversionIdGet');
			}
			// verify required parameter 'conversionId' is set
			if (params.conversionId == null) {
				throw new Error('Missing required parameter conversionId when calling procurementUnitOfMeasuresIdConversionsConversionIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Conversion
         * @param id
         * @param conversionId
         * @param operations
         */
		procurementUnitOfMeasuresIdConversionsConversionIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions/{conversionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'conversionId' + '}', String(params.conversionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsConversionIdPatch');
			}
			// verify required parameter 'conversionId' is set
			if (params.conversionId == null) {
				throw new Error('Missing required parameter conversionId when calling procurementUnitOfMeasuresIdConversionsConversionIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementUnitOfMeasuresIdConversionsConversionIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Conversion
         * @param id
         * @param conversionId
         * @param conversion
         */
		procurementUnitOfMeasuresIdConversionsConversionIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions/{conversionId}'
				.replace('{' + 'id' + '}', String(params.id))
				.replace('{' + 'conversionId' + '}', String(params.conversionId));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsConversionIdPut');
			}
			// verify required parameter 'conversionId' is set
			if (params.conversionId == null) {
				throw new Error('Missing required parameter conversionId when calling procurementUnitOfMeasuresIdConversionsConversionIdPut');
			}
			// verify required parameter 'conversion' is set
			if (params.conversion == null) {
				throw new Error('Missing required parameter conversion when calling procurementUnitOfMeasuresIdConversionsConversionIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.conversion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Conversion Count
         * @param id
         * @param conditions
         */
		procurementUnitOfMeasuresIdConversionsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions/count'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsCountGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Conversion
         * @param id
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementUnitOfMeasuresIdConversionsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsGet');
			}
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Conversion
         * @param id
         * @param conversion
         */
		procurementUnitOfMeasuresIdConversionsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsPost');
			}
			// verify required parameter 'conversion' is set
			if (params.conversion == null) {
				throw new Error('Missing required parameter conversion when calling procurementUnitOfMeasuresIdConversionsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.conversion)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return UnitOfMeasureConversionsApi;
})());
export { UnitOfMeasureConversionsApi };
const UnitOfMeasuresApi = ((() => {
	class UnitOfMeasuresApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get Unit Of Measure Count
         * @param conditions
         */
		procurementUnitOfMeasuresCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/unitOfMeasures/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Unit Of Measure
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		procurementUnitOfMeasuresGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/unitOfMeasures`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete Unit Of Measure By Id
         * @param id
         */
		procurementUnitOfMeasuresIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get Unit Of Measure By Id
         * @param id
         */
		procurementUnitOfMeasuresIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update Unit Of Measure
         * @param id
         * @param operations
         */
		procurementUnitOfMeasuresIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling procurementUnitOfMeasuresIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace Unit Of Measure
         * @param id
         * @param unitOfMeasure
         */
		procurementUnitOfMeasuresIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdPut');
			}
			// verify required parameter 'unitOfMeasure' is set
			if (params.unitOfMeasure == null) {
				throw new Error('Missing required parameter unitOfMeasure when calling procurementUnitOfMeasuresIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.unitOfMeasure)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create Unit Of Measure
         * @param unitOfMeasure
         */
		procurementUnitOfMeasuresPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/procurement/unitOfMeasures`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'unitOfMeasure' is set
			if (params.unitOfMeasure == null) {
				throw new Error('Missing required parameter unitOfMeasure when calling procurementUnitOfMeasuresPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.unitOfMeasure)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return UnitOfMeasuresApi;
})());
export { UnitOfMeasuresApi };
const UserDefinedFieldsApi = ((() => {
	class UserDefinedFieldsApi {
		constructor(basePath) {
			this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
			this.defaultHeaders = {};
			if (basePath) {
				this.basePath = basePath;
			}
		}

        /**
         *
         * Get User Defined Fields Count
         * @param conditions
         */
		systemUserDefinedFieldsCountGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/userDefinedFields/count`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get User Defined Fields
         * @param conditions
         * @param orderBy
         * @param childconditions
         * @param customfieldconditions
         * @param page
         * @param pageSize
         */
		systemUserDefinedFieldsGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/userDefinedFields`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			if (params.conditions !== undefined) {
				queryParameters['conditions'] = params.conditions;
			}
			if (params.orderBy !== undefined) {
				queryParameters['orderBy'] = params.orderBy;
			}
			if (params.childconditions !== undefined) {
				queryParameters['childconditions'] = params.childconditions;
			}
			if (params.customfieldconditions !== undefined) {
				queryParameters['customfieldconditions'] = params.customfieldconditions;
			}
			if (params.page !== undefined) {
				queryParameters['page'] = params.page;
			}
			if (params.pageSize !== undefined) {
				queryParameters['pageSize'] = params.pageSize;
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Delete User Defined Field By Id
         * @param id
         */
		systemUserDefinedFieldsIdDelete(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/userDefinedFields/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemUserDefinedFieldsIdDelete');
			}
			let fetchParams = {
				method: 'DELETE',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Get User Defined Field By Id
         * @param id
         */
		systemUserDefinedFieldsIdGet(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/userDefinedFields/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemUserDefinedFieldsIdGet');
			}
			let fetchParams = {
				method: 'GET',
				headers: headerParams
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Update User Defined Field
         * @param id
         * @param operations
         */
		systemUserDefinedFieldsIdPatch(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/userDefinedFields/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemUserDefinedFieldsIdPatch');
			}
			// verify required parameter 'operations' is set
			if (params.operations == null) {
				throw new Error('Missing required parameter operations when calling systemUserDefinedFieldsIdPatch');
			}
			let fetchParams = {
				method: 'PATCH',
				headers: headerParams,
				body: JSON.stringify(params.operations)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Replace User Defined Field
         * @param id
         * @param userDefinedField
         */
		systemUserDefinedFieldsIdPut(params, extraQueryParams, extraFetchParams) {
			const localVarPath = this.basePath + '/system/userDefinedFields/{id}'
				.replace('{' + 'id' + '}', String(params.id));
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'id' is set
			if (params.id == null) {
				throw new Error('Missing required parameter id when calling systemUserDefinedFieldsIdPut');
			}
			// verify required parameter 'userDefinedField' is set
			if (params.userDefinedField == null) {
				throw new Error('Missing required parameter userDefinedField when calling systemUserDefinedFieldsIdPut');
			}
			let fetchParams = {
				method: 'PUT',
				headers: headerParams,
				body: JSON.stringify(params.userDefinedField)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}

        /**
         *
         * Create User Defined Field
         * @param userDefinedField
         */
		systemUserDefinedFieldsPost(params, extraQueryParams, extraFetchParams) {
			const localVarPath = `${this.basePath}/system/userDefinedFields`;
			const queryParameters = assign_1.assign({}, extraQueryParams);
			const headerParams = assign_1.assign({}, this.defaultHeaders);
			headerParams['Content-Type'] = 'application/json';
			// verify required parameter 'userDefinedField' is set
			if (params.userDefinedField == null) {
				throw new Error('Missing required parameter userDefinedField when calling systemUserDefinedFieldsPost');
			}
			let fetchParams = {
				method: 'POST',
				headers: headerParams,
				body: JSON.stringify(params.userDefinedField)
			};
			if (extraFetchParams) {
				fetchParams = assign_1.assign(fetchParams, extraFetchParams);
			}
			const localVarPathWithQueryParameters = localVarPath + (localVarPath.includes('?') ? '&' : '?') + querystring.stringify(queryParameters);
			return fetch(localVarPathWithQueryParameters, fetchParams).then(response => {
				if (response.status >= 200 && response.status < 300) {
					return response.json();
				}
				else {
					const error = new Error(response.statusText);
					error.response = response;
					throw error;
				}
			});
		}
	}

	return UserDefinedFieldsApi;
})());

export { UserDefinedFieldsApi };

