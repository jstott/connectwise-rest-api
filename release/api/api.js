"use strict";
exports.__esModule = true;
var querystring = require("querystring");
var fetch = require("isomorphic-fetch");
var assign_1 = require("./assign");
//export namespace  {
'use strict';
var AccountingBatchesApi = (function () {
    function AccountingBatchesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Batches Count
     * @param conditions
     */
    AccountingBatchesApi.prototype.financeAccountingBatchesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/batches/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Batches
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AccountingBatchesApi.prototype.financeAccountingBatchesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/batches';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Batch By Id
     * @param id
     */
    AccountingBatchesApi.prototype.financeAccountingBatchesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/batches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAccountingBatchesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Re-export the payload data from an existing batch (RecreateBatch in SOAP)
     * @param id
     * @param batchExportParameters
     */
    AccountingBatchesApi.prototype.financeAccountingBatchesIdExportPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/batches/{id}/export'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAccountingBatchesIdExportPost');
        }
        // verify required parameter 'batchExportParameters' is set
        if (params.batchExportParameters == null) {
            throw new Error('Missing required parameter batchExportParameters when calling financeAccountingBatchesIdExportPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.batchExportParameters)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Batch By Id
     * @param id
     */
    AccountingBatchesApi.prototype.financeAccountingBatchesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/batches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAccountingBatchesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Creates the Accounting Batch and updates GL Records (UpdateBatch in SOAP)
     * @param accountingBatchParameters
     */
    AccountingBatchesApi.prototype.financeAccountingBatchesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/batches';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'accountingBatchParameters' is set
        if (params.accountingBatchParameters == null) {
            throw new Error('Missing required parameter accountingBatchParameters when calling financeAccountingBatchesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.accountingBatchParameters)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Exports accouting batch payload based on parameters (CreateBatch in SOAP)
     * @param batchExportParameters
     */
    AccountingBatchesApi.prototype.financeAccountingExportPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/export';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'batchExportParameters' is set
        if (params.batchExportParameters == null) {
            throw new Error('Missing required parameter batchExportParameters when calling financeAccountingExportPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.batchExportParameters)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AccountingBatchesApi;
}());
exports.AccountingBatchesApi = AccountingBatchesApi;
//}
//export namespace  {
'use strict';
var AccountingUnpostedExpensesApi = (function () {
    function AccountingUnpostedExpensesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Unposted Expenses Count
     * @param conditions
     */
    AccountingUnpostedExpensesApi.prototype.financeAccountingUnpostedexpensesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/unpostedexpenses/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Unposted Expenses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AccountingUnpostedExpensesApi.prototype.financeAccountingUnpostedexpensesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/unpostedexpenses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Unposted Expense By Id
     * @param id
     */
    AccountingUnpostedExpensesApi.prototype.financeAccountingUnpostedexpensesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/unpostedexpenses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAccountingUnpostedexpensesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AccountingUnpostedExpensesApi;
}());
exports.AccountingUnpostedExpensesApi = AccountingUnpostedExpensesApi;
//}
//export namespace  {
'use strict';
var AccountingUnpostedProcurementsApi = (function () {
    function AccountingUnpostedProcurementsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Unposted Procurements Count
     * @param conditions
     */
    AccountingUnpostedProcurementsApi.prototype.financeAccountingUnpostedprocurementCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/unpostedprocurement/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Unposted Procurements
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AccountingUnpostedProcurementsApi.prototype.financeAccountingUnpostedprocurementGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/unpostedprocurement';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Unposted Procurement By Id
     * @param id
     */
    AccountingUnpostedProcurementsApi.prototype.financeAccountingUnpostedprocurementIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/unpostedprocurement/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAccountingUnpostedprocurementIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AccountingUnpostedProcurementsApi;
}());
exports.AccountingUnpostedProcurementsApi = AccountingUnpostedProcurementsApi;
//}
//export namespace  {
'use strict';
var AccountingUnpostedinvoicesApi = (function () {
    function AccountingUnpostedinvoicesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Unposted Invoices Count
     * @param conditions
     */
    AccountingUnpostedinvoicesApi.prototype.financeAccountingUnpostedinvoicesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/unpostedinvoices/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Unposted Invoices
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AccountingUnpostedinvoicesApi.prototype.financeAccountingUnpostedinvoicesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/unpostedinvoices';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Unposted Invoice By Id
     * @param id
     */
    AccountingUnpostedinvoicesApi.prototype.financeAccountingUnpostedinvoicesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/accounting/unpostedinvoices/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAccountingUnpostedinvoicesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AccountingUnpostedinvoicesApi;
}());
exports.AccountingUnpostedinvoicesApi = AccountingUnpostedinvoicesApi;
//}
//export namespace  {
'use strict';
var ActivitiesApi = (function () {
    function ActivitiesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Activities Count
     * @param conditions
     * @param customFieldConditions
     */
    ActivitiesApi.prototype.salesActivitiesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Activities
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ActivitiesApi.prototype.salesActivitiesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Activity By Id
     * @param id
     */
    ActivitiesApi.prototype.salesActivitiesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Activity By Id
     * @param id
     */
    ActivitiesApi.prototype.salesActivitiesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Activity
     * @param id
     * @param operations
     */
    ActivitiesApi.prototype.salesActivitiesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesActivitiesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Activity
     * @param id
     * @param activity
     */
    ActivitiesApi.prototype.salesActivitiesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesIdPut');
        }
        // verify required parameter 'activity' is set
        if (params.activity == null) {
            throw new Error('Missing required parameter activity when calling salesActivitiesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.activity)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Activity
     * @param activity
     */
    ActivitiesApi.prototype.salesActivitiesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'activity' is set
        if (params.activity == null) {
            throw new Error('Missing required parameter activity when calling salesActivitiesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.activity)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ActivitiesApi;
}());
exports.ActivitiesApi = ActivitiesApi;
//}
//export namespace  {
'use strict';
var ActivityStatusesApi = (function () {
    function ActivityStatusesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Activity Statuses Count
     * @param conditions
     */
    ActivityStatusesApi.prototype.salesActivitiesStatusesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/statuses/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Activity Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ActivityStatusesApi.prototype.salesActivitiesStatusesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Activity Status By Id
     * @param id
     */
    ActivityStatusesApi.prototype.salesActivitiesStatusesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesStatusesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Activity Status By Id
     * @param id
     */
    ActivityStatusesApi.prototype.salesActivitiesStatusesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesStatusesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Activity Status
     * @param id
     * @param operations
     */
    ActivityStatusesApi.prototype.salesActivitiesStatusesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesStatusesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesActivitiesStatusesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Activity Status
     * @param id
     * @param activityStatus
     */
    ActivityStatusesApi.prototype.salesActivitiesStatusesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesStatusesIdPut');
        }
        // verify required parameter 'activityStatus' is set
        if (params.activityStatus == null) {
            throw new Error('Missing required parameter activityStatus when calling salesActivitiesStatusesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.activityStatus)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Activity Status
     * @param activityStatus
     */
    ActivityStatusesApi.prototype.salesActivitiesStatusesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'activityStatus' is set
        if (params.activityStatus == null) {
            throw new Error('Missing required parameter activityStatus when calling salesActivitiesStatusesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.activityStatus)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ActivityStatusesApi;
}());
exports.ActivityStatusesApi = ActivityStatusesApi;
//}
//export namespace  {
'use strict';
var ActivityStopwatchesApi = (function () {
    function ActivityStopwatchesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Activity Stopwatches Count
     * @param conditions
     */
    ActivityStopwatchesApi.prototype.timeActivitystopwatchesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/activitystopwatches/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Activity Stopwatches
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ActivityStopwatchesApi.prototype.timeActivitystopwatchesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/activitystopwatches';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Activity Stopwatch By Id
     * @param id
     */
    ActivityStopwatchesApi.prototype.timeActivitystopwatchesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/activitystopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeActivitystopwatchesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Activity Stopwatch By Id
     * @param id
     */
    ActivityStopwatchesApi.prototype.timeActivitystopwatchesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/activitystopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeActivitystopwatchesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Activity Stopwatch
     * @param id
     * @param operations
     */
    ActivityStopwatchesApi.prototype.timeActivitystopwatchesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/activitystopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeActivitystopwatchesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling timeActivitystopwatchesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Activity Stopwatch
     * @param id
     * @param activityStopwatch
     */
    ActivityStopwatchesApi.prototype.timeActivitystopwatchesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/activitystopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeActivitystopwatchesIdPut');
        }
        // verify required parameter 'activityStopwatch' is set
        if (params.activityStopwatch == null) {
            throw new Error('Missing required parameter activityStopwatch when calling timeActivitystopwatchesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.activityStopwatch)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Activity Stopwatch
     * @param activityStopwatch
     */
    ActivityStopwatchesApi.prototype.timeActivitystopwatchesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/activitystopwatches';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'activityStopwatch' is set
        if (params.activityStopwatch == null) {
            throw new Error('Missing required parameter activityStopwatch when calling timeActivitystopwatchesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.activityStopwatch)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ActivityStopwatchesApi;
}());
exports.ActivityStopwatchesApi = ActivityStopwatchesApi;
//}
//export namespace  {
'use strict';
var ActivityTypesApi = (function () {
    function ActivityTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Activity Types Count
     * @param conditions
     */
    ActivityTypesApi.prototype.salesActivitiesTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Activity Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ActivityTypesApi.prototype.salesActivitiesTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Activity Type By Id
     * @param id
     */
    ActivityTypesApi.prototype.salesActivitiesTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Activity Type By Id
     * @param id
     */
    ActivityTypesApi.prototype.salesActivitiesTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Activity Type
     * @param id
     * @param operations
     */
    ActivityTypesApi.prototype.salesActivitiesTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesActivitiesTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Activity Type
     * @param id
     * @param activityType
     */
    ActivityTypesApi.prototype.salesActivitiesTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesActivitiesTypesIdPut');
        }
        // verify required parameter 'activityType' is set
        if (params.activityType == null) {
            throw new Error('Missing required parameter activityType when calling salesActivitiesTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.activityType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Activity Type
     * @param activityType
     */
    ActivityTypesApi.prototype.salesActivitiesTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/activities/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'activityType' is set
        if (params.activityType == null) {
            throw new Error('Missing required parameter activityType when calling salesActivitiesTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.activityType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ActivityTypesApi;
}());
exports.ActivityTypesApi = ActivityTypesApi;
//}
//export namespace  {
'use strict';
var AdjustmentDetailsApi = (function () {
    function AdjustmentDetailsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Adjustment Detail Count
     * @param id
     * @param conditions
     */
    AdjustmentDetailsApi.prototype.procurementAdjustmentsIdDetailsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/{id}/details/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDetailsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Adjustment Detail By Id
     * @param id
     * @param detailId
     */
    AdjustmentDetailsApi.prototype.procurementAdjustmentsIdDetailsDetailIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/{id}/details/{detailId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'detailId' + '}', String(params.detailId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDetailsDetailIdDelete');
        }
        // verify required parameter 'detailId' is set
        if (params.detailId == null) {
            throw new Error('Missing required parameter detailId when calling procurementAdjustmentsIdDetailsDetailIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Adjustment Detail By Id
     * @param id
     * @param detailId
     */
    AdjustmentDetailsApi.prototype.procurementAdjustmentsIdDetailsDetailIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/{id}/details/{detailId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'detailId' + '}', String(params.detailId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDetailsDetailIdGet');
        }
        // verify required parameter 'detailId' is set
        if (params.detailId == null) {
            throw new Error('Missing required parameter detailId when calling procurementAdjustmentsIdDetailsDetailIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Adjustment Detail
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AdjustmentDetailsApi.prototype.procurementAdjustmentsIdDetailsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/{id}/details'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDetailsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Adjustment Detail
     * @param id
     * @param adjustmentDetail
     */
    AdjustmentDetailsApi.prototype.procurementAdjustmentsIdDetailsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/{id}/details'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDetailsPost');
        }
        // verify required parameter 'adjustmentDetail' is set
        if (params.adjustmentDetail == null) {
            throw new Error('Missing required parameter adjustmentDetail when calling procurementAdjustmentsIdDetailsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.adjustmentDetail)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AdjustmentDetailsApi;
}());
exports.AdjustmentDetailsApi = AdjustmentDetailsApi;
//}
//export namespace  {
'use strict';
var AdjustmentTypesApi = (function () {
    function AdjustmentTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Adjustment Types Count
     * @param conditions
     */
    AdjustmentTypesApi.prototype.procurementAdjustmentsTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Adjustment Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AdjustmentTypesApi.prototype.procurementAdjustmentsTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Adjustment Types By Id
     * @param id
     */
    AdjustmentTypesApi.prototype.procurementAdjustmentsTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Adjustment Types By Id
     * @param id
     */
    AdjustmentTypesApi.prototype.procurementAdjustmentsTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Adjustment Types
     * @param id
     * @param operations
     */
    AdjustmentTypesApi.prototype.procurementAdjustmentsTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementAdjustmentsTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Adjustment Types
     * @param id
     * @param adjustmentTypes
     */
    AdjustmentTypesApi.prototype.procurementAdjustmentsTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsTypesIdPut');
        }
        // verify required parameter 'adjustmentTypes' is set
        if (params.adjustmentTypes == null) {
            throw new Error('Missing required parameter adjustmentTypes when calling procurementAdjustmentsTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.adjustmentTypes)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Adjustment Types
     * @param adjustmentTypes
     */
    AdjustmentTypesApi.prototype.procurementAdjustmentsTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'adjustmentTypes' is set
        if (params.adjustmentTypes == null) {
            throw new Error('Missing required parameter adjustmentTypes when calling procurementAdjustmentsTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.adjustmentTypes)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AdjustmentTypesApi;
}());
exports.AdjustmentTypesApi = AdjustmentTypesApi;
//}
//export namespace  {
'use strict';
var AdjustmentsApi = (function () {
    function AdjustmentsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Adjustment Count
     * @param conditions
     */
    AdjustmentsApi.prototype.procurementAdjustmentsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Adjustment
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AdjustmentsApi.prototype.procurementAdjustmentsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Adjustment By Id
     * @param id
     */
    AdjustmentsApi.prototype.procurementAdjustmentsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Adjustment By Id
     * @param id
     */
    AdjustmentsApi.prototype.procurementAdjustmentsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Adjustment
     * @param id
     * @param operations
     */
    AdjustmentsApi.prototype.procurementAdjustmentsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementAdjustmentsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Adjustment
     * @param id
     * @param adjustment
     */
    AdjustmentsApi.prototype.procurementAdjustmentsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementAdjustmentsIdPut');
        }
        // verify required parameter 'adjustment' is set
        if (params.adjustment == null) {
            throw new Error('Missing required parameter adjustment when calling procurementAdjustmentsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.adjustment)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Adjustment
     * @param adjustment
     */
    AdjustmentsApi.prototype.procurementAdjustmentsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/adjustments';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'adjustment' is set
        if (params.adjustment == null) {
            throw new Error('Missing required parameter adjustment when calling procurementAdjustmentsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.adjustment)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AdjustmentsApi;
}());
exports.AdjustmentsApi = AdjustmentsApi;
//}
//export namespace  {
'use strict';
var AgreementAdditionsApi = (function () {
    function AgreementAdditionsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Addition By Id
     * @param id
     * @param additionId
     */
    AgreementAdditionsApi.prototype.financeAgreementsIdAdditionsAdditionIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/additions/{additionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'additionId' + '}', String(params.additionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsAdditionIdDelete');
        }
        // verify required parameter 'additionId' is set
        if (params.additionId == null) {
            throw new Error('Missing required parameter additionId when calling financeAgreementsIdAdditionsAdditionIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Addition By Id
     * @param id
     * @param additionId
     */
    AgreementAdditionsApi.prototype.financeAgreementsIdAdditionsAdditionIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/additions/{additionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'additionId' + '}', String(params.additionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsAdditionIdGet');
        }
        // verify required parameter 'additionId' is set
        if (params.additionId == null) {
            throw new Error('Missing required parameter additionId when calling financeAgreementsIdAdditionsAdditionIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Addition
     * @param id
     * @param additionId
     * @param operations
     */
    AgreementAdditionsApi.prototype.financeAgreementsIdAdditionsAdditionIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/additions/{additionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'additionId' + '}', String(params.additionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsAdditionIdPatch');
        }
        // verify required parameter 'additionId' is set
        if (params.additionId == null) {
            throw new Error('Missing required parameter additionId when calling financeAgreementsIdAdditionsAdditionIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeAgreementsIdAdditionsAdditionIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Addition
     * @param id
     * @param additionId
     * @param addition
     */
    AgreementAdditionsApi.prototype.financeAgreementsIdAdditionsAdditionIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/additions/{additionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'additionId' + '}', String(params.additionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsAdditionIdPut');
        }
        // verify required parameter 'additionId' is set
        if (params.additionId == null) {
            throw new Error('Missing required parameter additionId when calling financeAgreementsIdAdditionsAdditionIdPut');
        }
        // verify required parameter 'addition' is set
        if (params.addition == null) {
            throw new Error('Missing required parameter addition when calling financeAgreementsIdAdditionsAdditionIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.addition)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Additions Count
     * @param id
     * @param conditions
     * @param customFieldConditions
     */
    AgreementAdditionsApi.prototype.financeAgreementsIdAdditionsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/additions/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Additions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AgreementAdditionsApi.prototype.financeAgreementsIdAdditionsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/additions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Addition
     * @param id
     * @param addition
     */
    AgreementAdditionsApi.prototype.financeAgreementsIdAdditionsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/additions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdditionsPost');
        }
        // verify required parameter 'addition' is set
        if (params.addition == null) {
            throw new Error('Missing required parameter addition when calling financeAgreementsIdAdditionsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.addition)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AgreementAdditionsApi;
}());
exports.AgreementAdditionsApi = AgreementAdditionsApi;
//}
//export namespace  {
'use strict';
var AgreementAdjustmentsApi = (function () {
    function AgreementAdjustmentsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Adjustment By Id
     * @param id
     * @param adjustmentId
     */
    AgreementAdjustmentsApi.prototype.financeAgreementsIdAdjustmentsAdjustmentIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/adjustments/{adjustmentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'adjustmentId' + '}', String(params.adjustmentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsAdjustmentIdDelete');
        }
        // verify required parameter 'adjustmentId' is set
        if (params.adjustmentId == null) {
            throw new Error('Missing required parameter adjustmentId when calling financeAgreementsIdAdjustmentsAdjustmentIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Adjustment By Id
     * @param id
     * @param adjustmentId
     */
    AgreementAdjustmentsApi.prototype.financeAgreementsIdAdjustmentsAdjustmentIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/adjustments/{adjustmentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'adjustmentId' + '}', String(params.adjustmentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsAdjustmentIdGet');
        }
        // verify required parameter 'adjustmentId' is set
        if (params.adjustmentId == null) {
            throw new Error('Missing required parameter adjustmentId when calling financeAgreementsIdAdjustmentsAdjustmentIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Adjustment
     * @param id
     * @param adjustmentId
     * @param operations
     */
    AgreementAdjustmentsApi.prototype.financeAgreementsIdAdjustmentsAdjustmentIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/adjustments/{adjustmentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'adjustmentId' + '}', String(params.adjustmentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsAdjustmentIdPatch');
        }
        // verify required parameter 'adjustmentId' is set
        if (params.adjustmentId == null) {
            throw new Error('Missing required parameter adjustmentId when calling financeAgreementsIdAdjustmentsAdjustmentIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeAgreementsIdAdjustmentsAdjustmentIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Adjustment
     * @param id
     * @param adjustmentId
     * @param adjustment
     */
    AgreementAdjustmentsApi.prototype.financeAgreementsIdAdjustmentsAdjustmentIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/adjustments/{adjustmentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'adjustmentId' + '}', String(params.adjustmentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsAdjustmentIdPut');
        }
        // verify required parameter 'adjustmentId' is set
        if (params.adjustmentId == null) {
            throw new Error('Missing required parameter adjustmentId when calling financeAgreementsIdAdjustmentsAdjustmentIdPut');
        }
        // verify required parameter 'adjustment' is set
        if (params.adjustment == null) {
            throw new Error('Missing required parameter adjustment when calling financeAgreementsIdAdjustmentsAdjustmentIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.adjustment)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Adjustments Count
     * @param id
     * @param conditions
     * @param customFieldConditions
     */
    AgreementAdjustmentsApi.prototype.financeAgreementsIdAdjustmentsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/adjustments/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Adjustments
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AgreementAdjustmentsApi.prototype.financeAgreementsIdAdjustmentsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/adjustments'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Adjustment
     * @param id
     * @param adjustment
     */
    AgreementAdjustmentsApi.prototype.financeAgreementsIdAdjustmentsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/adjustments'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdAdjustmentsPost');
        }
        // verify required parameter 'adjustment' is set
        if (params.adjustment == null) {
            throw new Error('Missing required parameter adjustment when calling financeAgreementsIdAdjustmentsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.adjustment)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AgreementAdjustmentsApi;
}());
exports.AgreementAdjustmentsApi = AgreementAdjustmentsApi;
//}
//export namespace  {
'use strict';
var AgreementBoardDefaultsApi = (function () {
    function AgreementBoardDefaultsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Board Default By Id
     * @param id
     * @param boardDefaultId
     */
    AgreementBoardDefaultsApi.prototype.financeAgreementsIdBoardDefaultsBoardDefaultIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults/{boardDefaultId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'boardDefaultId' + '}', String(params.boardDefaultId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsBoardDefaultIdDelete');
        }
        // verify required parameter 'boardDefaultId' is set
        if (params.boardDefaultId == null) {
            throw new Error('Missing required parameter boardDefaultId when calling financeAgreementsIdBoardDefaultsBoardDefaultIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Board Default By Id
     * @param id
     * @param boardDefaultId
     */
    AgreementBoardDefaultsApi.prototype.financeAgreementsIdBoardDefaultsBoardDefaultIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults/{boardDefaultId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'boardDefaultId' + '}', String(params.boardDefaultId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsBoardDefaultIdGet');
        }
        // verify required parameter 'boardDefaultId' is set
        if (params.boardDefaultId == null) {
            throw new Error('Missing required parameter boardDefaultId when calling financeAgreementsIdBoardDefaultsBoardDefaultIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Board Default
     * @param id
     * @param boardDefaultId
     * @param operations
     */
    AgreementBoardDefaultsApi.prototype.financeAgreementsIdBoardDefaultsBoardDefaultIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults/{boardDefaultId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'boardDefaultId' + '}', String(params.boardDefaultId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPatch');
        }
        // verify required parameter 'boardDefaultId' is set
        if (params.boardDefaultId == null) {
            throw new Error('Missing required parameter boardDefaultId when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Board Default
     * @param id
     * @param boardDefaultId
     * @param boardDefault
     */
    AgreementBoardDefaultsApi.prototype.financeAgreementsIdBoardDefaultsBoardDefaultIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults/{boardDefaultId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'boardDefaultId' + '}', String(params.boardDefaultId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPut');
        }
        // verify required parameter 'boardDefaultId' is set
        if (params.boardDefaultId == null) {
            throw new Error('Missing required parameter boardDefaultId when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPut');
        }
        // verify required parameter 'boardDefault' is set
        if (params.boardDefault == null) {
            throw new Error('Missing required parameter boardDefault when calling financeAgreementsIdBoardDefaultsBoardDefaultIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.boardDefault)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Board Defaults Count
     * @param id
     * @param conditions
     */
    AgreementBoardDefaultsApi.prototype.financeAgreementsIdBoardDefaultsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Board Defaults
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AgreementBoardDefaultsApi.prototype.financeAgreementsIdBoardDefaultsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Board Default
     * @param id
     * @param boardDefault
     */
    AgreementBoardDefaultsApi.prototype.financeAgreementsIdBoardDefaultsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/boardDefaults'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdBoardDefaultsPost');
        }
        // verify required parameter 'boardDefault' is set
        if (params.boardDefault == null) {
            throw new Error('Missing required parameter boardDefault when calling financeAgreementsIdBoardDefaultsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.boardDefault)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AgreementBoardDefaultsApi;
}());
exports.AgreementBoardDefaultsApi = AgreementBoardDefaultsApi;
//}
//export namespace  {
'use strict';
var AgreementSitesApi = (function () {
    function AgreementSitesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Sites Count
     * @param id
     * @param conditions
     */
    AgreementSitesApi.prototype.financeAgreementsIdSitesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/sites/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdSitesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Sites
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AgreementSitesApi.prototype.financeAgreementsIdSitesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/sites'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdSitesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Site
     * @param id
     * @param site
     */
    AgreementSitesApi.prototype.financeAgreementsIdSitesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/sites'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdSitesPost');
        }
        // verify required parameter 'site' is set
        if (params.site == null) {
            throw new Error('Missing required parameter site when calling financeAgreementsIdSitesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.site)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Site By Id
     * @param id
     * @param siteId
     */
    AgreementSitesApi.prototype.financeAgreementsIdSitesSiteIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/sites/{siteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'siteId' + '}', String(params.siteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdSitesSiteIdDelete');
        }
        // verify required parameter 'siteId' is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling financeAgreementsIdSitesSiteIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Site By Id
     * @param id
     * @param siteId
     */
    AgreementSitesApi.prototype.financeAgreementsIdSitesSiteIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/sites/{siteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'siteId' + '}', String(params.siteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdSitesSiteIdGet');
        }
        // verify required parameter 'siteId' is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling financeAgreementsIdSitesSiteIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Site
     * @param id
     * @param siteId
     * @param operations
     */
    AgreementSitesApi.prototype.financeAgreementsIdSitesSiteIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/sites/{siteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'siteId' + '}', String(params.siteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdSitesSiteIdPatch');
        }
        // verify required parameter 'siteId' is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling financeAgreementsIdSitesSiteIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeAgreementsIdSitesSiteIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Site
     * @param id
     * @param siteId
     * @param site
     */
    AgreementSitesApi.prototype.financeAgreementsIdSitesSiteIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/sites/{siteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'siteId' + '}', String(params.siteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdSitesSiteIdPut');
        }
        // verify required parameter 'siteId' is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling financeAgreementsIdSitesSiteIdPut');
        }
        // verify required parameter 'site' is set
        if (params.site == null) {
            throw new Error('Missing required parameter site when calling financeAgreementsIdSitesSiteIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.site)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AgreementSitesApi;
}());
exports.AgreementSitesApi = AgreementSitesApi;
//}
//export namespace  {
'use strict';
var AgreementTypesApi = (function () {
    function AgreementTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Agreement Types Count
     * @param conditions
     */
    AgreementTypesApi.prototype.financeAgreementsTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Agreement Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AgreementTypesApi.prototype.financeAgreementsTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Agreement Type By Id
     * @param id
     */
    AgreementTypesApi.prototype.financeAgreementsTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Agreement Type By Id
     * @param id
     */
    AgreementTypesApi.prototype.financeAgreementsTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Agreement Type
     * @param id
     * @param operations
     */
    AgreementTypesApi.prototype.financeAgreementsTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeAgreementsTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Agreement Type
     * @param id
     * @param agreementType
     */
    AgreementTypesApi.prototype.financeAgreementsTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsTypesIdPut');
        }
        // verify required parameter 'agreementType' is set
        if (params.agreementType == null) {
            throw new Error('Missing required parameter agreementType when calling financeAgreementsTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.agreementType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Agreement Type
     * @param agreementType
     */
    AgreementTypesApi.prototype.financeAgreementsTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'agreementType' is set
        if (params.agreementType == null) {
            throw new Error('Missing required parameter agreementType when calling financeAgreementsTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.agreementType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AgreementTypesApi;
}());
exports.AgreementTypesApi = AgreementTypesApi;
//}
//export namespace  {
'use strict';
var AgreementWorkRoleExclusionsApi = (function () {
    function AgreementWorkRoleExclusionsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Work Role Exclusions Count
     * @param id
     * @param conditions
     */
    AgreementWorkRoleExclusionsApi.prototype.financeAgreementsIdWorkRoleExclusionsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workRoleExclusions/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkRoleExclusionsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Work Role Exclusions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AgreementWorkRoleExclusionsApi.prototype.financeAgreementsIdWorkRoleExclusionsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workRoleExclusions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkRoleExclusionsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Work Role Exclusion
     * @param id
     * @param workRoleExclusion
     */
    AgreementWorkRoleExclusionsApi.prototype.financeAgreementsIdWorkRoleExclusionsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workRoleExclusions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkRoleExclusionsPost');
        }
        // verify required parameter 'workRoleExclusion' is set
        if (params.workRoleExclusion == null) {
            throw new Error('Missing required parameter workRoleExclusion when calling financeAgreementsIdWorkRoleExclusionsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.workRoleExclusion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Work Role Exclusion By Id
     * @param id
     * @param workRoleExclusionId
     */
    AgreementWorkRoleExclusionsApi.prototype.financeAgreementsIdWorkRoleExclusionsWorkRoleExclusionIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workRoleExclusions/{workRoleExclusionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'workRoleExclusionId' + '}', String(params.workRoleExclusionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkRoleExclusionsWorkRoleExclusionIdDelete');
        }
        // verify required parameter 'workRoleExclusionId' is set
        if (params.workRoleExclusionId == null) {
            throw new Error('Missing required parameter workRoleExclusionId when calling financeAgreementsIdWorkRoleExclusionsWorkRoleExclusionIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AgreementWorkRoleExclusionsApi;
}());
exports.AgreementWorkRoleExclusionsApi = AgreementWorkRoleExclusionsApi;
//}
//export namespace  {
'use strict';
var AgreementWorkRolesApi = (function () {
    function AgreementWorkRolesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Work Roles Count
     * @param id
     * @param conditions
     */
    AgreementWorkRolesApi.prototype.financeAgreementsIdWorkrolesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workroles/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Work Roles
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AgreementWorkRolesApi.prototype.financeAgreementsIdWorkrolesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workroles'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Work Role
     * @param id
     * @param workRole
     */
    AgreementWorkRolesApi.prototype.financeAgreementsIdWorkrolesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workroles'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesPost');
        }
        // verify required parameter 'workRole' is set
        if (params.workRole == null) {
            throw new Error('Missing required parameter workRole when calling financeAgreementsIdWorkrolesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.workRole)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Work Role By Id
     * @param id
     * @param workRoleId
     */
    AgreementWorkRolesApi.prototype.financeAgreementsIdWorkrolesWorkRoleIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workroles/{workRoleId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'workRoleId' + '}', String(params.workRoleId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesWorkRoleIdDelete');
        }
        // verify required parameter 'workRoleId' is set
        if (params.workRoleId == null) {
            throw new Error('Missing required parameter workRoleId when calling financeAgreementsIdWorkrolesWorkRoleIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Work Role By Id
     * @param id
     * @param workRoleId
     */
    AgreementWorkRolesApi.prototype.financeAgreementsIdWorkrolesWorkRoleIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workroles/{workRoleId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'workRoleId' + '}', String(params.workRoleId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesWorkRoleIdGet');
        }
        // verify required parameter 'workRoleId' is set
        if (params.workRoleId == null) {
            throw new Error('Missing required parameter workRoleId when calling financeAgreementsIdWorkrolesWorkRoleIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Work Role
     * @param id
     * @param workRoleId
     * @param operations
     */
    AgreementWorkRolesApi.prototype.financeAgreementsIdWorkrolesWorkRoleIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workroles/{workRoleId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'workRoleId' + '}', String(params.workRoleId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesWorkRoleIdPatch');
        }
        // verify required parameter 'workRoleId' is set
        if (params.workRoleId == null) {
            throw new Error('Missing required parameter workRoleId when calling financeAgreementsIdWorkrolesWorkRoleIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeAgreementsIdWorkrolesWorkRoleIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Work Role
     * @param id
     * @param workRoleId
     * @param workRole
     */
    AgreementWorkRolesApi.prototype.financeAgreementsIdWorkrolesWorkRoleIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workroles/{workRoleId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'workRoleId' + '}', String(params.workRoleId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkrolesWorkRoleIdPut');
        }
        // verify required parameter 'workRoleId' is set
        if (params.workRoleId == null) {
            throw new Error('Missing required parameter workRoleId when calling financeAgreementsIdWorkrolesWorkRoleIdPut');
        }
        // verify required parameter 'workRole' is set
        if (params.workRole == null) {
            throw new Error('Missing required parameter workRole when calling financeAgreementsIdWorkrolesWorkRoleIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.workRole)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AgreementWorkRolesApi;
}());
exports.AgreementWorkRolesApi = AgreementWorkRolesApi;
//}
//export namespace  {
'use strict';
var AgreementWorkTypeExclusionsApi = (function () {
    function AgreementWorkTypeExclusionsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Work Type Exclusions Count
     * @param id
     * @param conditions
     */
    AgreementWorkTypeExclusionsApi.prototype.financeAgreementsIdWorkTypeExclusionsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workTypeExclusions/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkTypeExclusionsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Work Type Exclusions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AgreementWorkTypeExclusionsApi.prototype.financeAgreementsIdWorkTypeExclusionsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workTypeExclusions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkTypeExclusionsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Work Type Exclusion
     * @param id
     * @param workTypeExclusion
     */
    AgreementWorkTypeExclusionsApi.prototype.financeAgreementsIdWorkTypeExclusionsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workTypeExclusions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkTypeExclusionsPost');
        }
        // verify required parameter 'workTypeExclusion' is set
        if (params.workTypeExclusion == null) {
            throw new Error('Missing required parameter workTypeExclusion when calling financeAgreementsIdWorkTypeExclusionsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.workTypeExclusion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Work Type Exclusion By Id
     * @param id
     * @param workTypeExclusionId
     */
    AgreementWorkTypeExclusionsApi.prototype.financeAgreementsIdWorkTypeExclusionsWorkTypeExclusionIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/workTypeExclusions/{workTypeExclusionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'workTypeExclusionId' + '}', String(params.workTypeExclusionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorkTypeExclusionsWorkTypeExclusionIdDelete');
        }
        // verify required parameter 'workTypeExclusionId' is set
        if (params.workTypeExclusionId == null) {
            throw new Error('Missing required parameter workTypeExclusionId when calling financeAgreementsIdWorkTypeExclusionsWorkTypeExclusionIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AgreementWorkTypeExclusionsApi;
}());
exports.AgreementWorkTypeExclusionsApi = AgreementWorkTypeExclusionsApi;
//}
//export namespace  {
'use strict';
var AgreementWorkTypesApi = (function () {
    function AgreementWorkTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Work Types Count
     * @param id
     * @param conditions
     */
    AgreementWorkTypesApi.prototype.financeAgreementsIdWorktypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/worktypes/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Work Types
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AgreementWorkTypesApi.prototype.financeAgreementsIdWorktypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/worktypes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Work Type
     * @param id
     * @param workType
     */
    AgreementWorkTypesApi.prototype.financeAgreementsIdWorktypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/worktypes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesPost');
        }
        // verify required parameter 'workType' is set
        if (params.workType == null) {
            throw new Error('Missing required parameter workType when calling financeAgreementsIdWorktypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.workType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Work Type By Id
     * @param id
     * @param worktypeId
     */
    AgreementWorkTypesApi.prototype.financeAgreementsIdWorktypesWorktypeIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/worktypes/{worktypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'worktypeId' + '}', String(params.worktypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesWorktypeIdDelete');
        }
        // verify required parameter 'worktypeId' is set
        if (params.worktypeId == null) {
            throw new Error('Missing required parameter worktypeId when calling financeAgreementsIdWorktypesWorktypeIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Work Type By Id
     * @param id
     * @param worktypeId
     */
    AgreementWorkTypesApi.prototype.financeAgreementsIdWorktypesWorktypeIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/worktypes/{worktypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'worktypeId' + '}', String(params.worktypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesWorktypeIdGet');
        }
        // verify required parameter 'worktypeId' is set
        if (params.worktypeId == null) {
            throw new Error('Missing required parameter worktypeId when calling financeAgreementsIdWorktypesWorktypeIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Work Type
     * @param id
     * @param worktypeId
     * @param operations
     */
    AgreementWorkTypesApi.prototype.financeAgreementsIdWorktypesWorktypeIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/worktypes/{worktypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'worktypeId' + '}', String(params.worktypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesWorktypeIdPatch');
        }
        // verify required parameter 'worktypeId' is set
        if (params.worktypeId == null) {
            throw new Error('Missing required parameter worktypeId when calling financeAgreementsIdWorktypesWorktypeIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeAgreementsIdWorktypesWorktypeIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Work Type
     * @param id
     * @param worktypeId
     * @param workType
     */
    AgreementWorkTypesApi.prototype.financeAgreementsIdWorktypesWorktypeIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/worktypes/{worktypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'worktypeId' + '}', String(params.worktypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdWorktypesWorktypeIdPut');
        }
        // verify required parameter 'worktypeId' is set
        if (params.worktypeId == null) {
            throw new Error('Missing required parameter worktypeId when calling financeAgreementsIdWorktypesWorktypeIdPut');
        }
        // verify required parameter 'workType' is set
        if (params.workType == null) {
            throw new Error('Missing required parameter workType when calling financeAgreementsIdWorktypesWorktypeIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.workType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AgreementWorkTypesApi;
}());
exports.AgreementWorkTypesApi = AgreementWorkTypesApi;
//}
//export namespace  {
'use strict';
var AgreementsApi = (function () {
    function AgreementsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Agreements Count
     * @param conditions
     * @param customFieldConditions
     */
    AgreementsApi.prototype.financeAgreementsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Agreements
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    AgreementsApi.prototype.financeAgreementsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Configuration Association
     * @param id
     * @param configurationId
     */
    AgreementsApi.prototype.financeAgreementsIdConfigurationsConfigurationIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/configurations/{configurationId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'configurationId' + '}', String(params.configurationId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdConfigurationsConfigurationIdDelete');
        }
        // verify required parameter 'configurationId' is set
        if (params.configurationId == null) {
            throw new Error('Missing required parameter configurationId when calling financeAgreementsIdConfigurationsConfigurationIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Configuration Association
     * @param id
     * @param configurationId
     */
    AgreementsApi.prototype.financeAgreementsIdConfigurationsConfigurationIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/configurations/{configurationId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'configurationId' + '}', String(params.configurationId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdConfigurationsConfigurationIdGet');
        }
        // verify required parameter 'configurationId' is set
        if (params.configurationId == null) {
            throw new Error('Missing required parameter configurationId when calling financeAgreementsIdConfigurationsConfigurationIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Agreement Configurations Count
     * @param id
     */
    AgreementsApi.prototype.financeAgreementsIdConfigurationsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/configurations/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdConfigurationsCountGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Agreement Configurations
     * @param id
     * @param page
     * @param pageSize
     */
    AgreementsApi.prototype.financeAgreementsIdConfigurationsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/configurations'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdConfigurationsGet');
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Configuration Association
     * @param id
     * @param configuration
     */
    AgreementsApi.prototype.financeAgreementsIdConfigurationsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}/configurations'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdConfigurationsPost');
        }
        // verify required parameter 'configuration' is set
        if (params.configuration == null) {
            throw new Error('Missing required parameter configuration when calling financeAgreementsIdConfigurationsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.configuration)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Agreement By Id
     * @param id
     */
    AgreementsApi.prototype.financeAgreementsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Agreement By Id
     * @param id
     */
    AgreementsApi.prototype.financeAgreementsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Agreement
     * @param id
     * @param operations
     */
    AgreementsApi.prototype.financeAgreementsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeAgreementsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Agreement
     * @param id
     * @param agreement
     */
    AgreementsApi.prototype.financeAgreementsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeAgreementsIdPut');
        }
        // verify required parameter 'agreement' is set
        if (params.agreement == null) {
            throw new Error('Missing required parameter agreement when calling financeAgreementsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.agreement)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Agreement
     * @param agreement
     */
    AgreementsApi.prototype.financeAgreementsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/agreements';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'agreement' is set
        if (params.agreement == null) {
            throw new Error('Missing required parameter agreement when calling financeAgreementsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.agreement)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AgreementsApi;
}());
exports.AgreementsApi = AgreementsApi;
//}
//export namespace  {
'use strict';
var AuditTrailApi = (function () {
    function AuditTrailApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Members Count
     * @param type
     * @param id
     * @param deviceIdentifier
     */
    AuditTrailApi.prototype.systemAudittrailCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/audittrail/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.type !== undefined) {
            queryParameters['type'] = params.type;
        }
        if (params.id !== undefined) {
            queryParameters['id'] = params.id;
        }
        if (params.deviceIdentifier !== undefined) {
            queryParameters['deviceIdentifier'] = params.deviceIdentifier;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Audit Trail
     * @param type
     * @param id
     * @param deviceIdentifier
     * @param page
     * @param pageSize
     */
    AuditTrailApi.prototype.systemAudittrailGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/audittrail';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.type !== undefined) {
            queryParameters['type'] = params.type;
        }
        if (params.id !== undefined) {
            queryParameters['id'] = params.id;
        }
        if (params.deviceIdentifier !== undefined) {
            queryParameters['deviceIdentifier'] = params.deviceIdentifier;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return AuditTrailApi;
}());
exports.AuditTrailApi = AuditTrailApi;
//}
//export namespace  {
'use strict';
var BatchApi = (function () {
    function BatchApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Process Batch Requests
     * @param request
     */
    BatchApi.prototype.systemBatchPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/batch';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'request' is set
        if (params.request == null) {
            throw new Error('Missing required parameter request when calling systemBatchPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.request)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return BatchApi;
}());
exports.BatchApi = BatchApi;
//}
//export namespace  {
'use strict';
var BoardExcludedMembersApi = (function () {
    function BoardExcludedMembersApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Excluded Members Count
     * @param id
     * @param conditions
     */
    BoardExcludedMembersApi.prototype.serviceBoardsIdExcludedMembersCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/excludedMembers/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdExcludedMembersCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Excluded Member By Id
     * @param id
     * @param excludedMemberId
     */
    BoardExcludedMembersApi.prototype.serviceBoardsIdExcludedMembersExcludedMemberIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/excludedMembers/{excludedMemberId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'excludedMemberId' + '}', String(params.excludedMemberId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdExcludedMembersExcludedMemberIdDelete');
        }
        // verify required parameter 'excludedMemberId' is set
        if (params.excludedMemberId == null) {
            throw new Error('Missing required parameter excludedMemberId when calling serviceBoardsIdExcludedMembersExcludedMemberIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Excluded Member By Id
     * @param id
     * @param excludedMemberId
     */
    BoardExcludedMembersApi.prototype.serviceBoardsIdExcludedMembersExcludedMemberIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/excludedMembers/{excludedMemberId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'excludedMemberId' + '}', String(params.excludedMemberId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdExcludedMembersExcludedMemberIdGet');
        }
        // verify required parameter 'excludedMemberId' is set
        if (params.excludedMemberId == null) {
            throw new Error('Missing required parameter excludedMemberId when calling serviceBoardsIdExcludedMembersExcludedMemberIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Excluded Members
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    BoardExcludedMembersApi.prototype.serviceBoardsIdExcludedMembersGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/excludedMembers'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdExcludedMembersGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Excluded Member
     * @param id
     * @param excludedMember
     */
    BoardExcludedMembersApi.prototype.serviceBoardsIdExcludedMembersPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/excludedMembers'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdExcludedMembersPost');
        }
        // verify required parameter 'excludedMember' is set
        if (params.excludedMember == null) {
            throw new Error('Missing required parameter excludedMember when calling serviceBoardsIdExcludedMembersPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.excludedMember)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return BoardExcludedMembersApi;
}());
exports.BoardExcludedMembersApi = BoardExcludedMembersApi;
//}
//export namespace  {
'use strict';
var BoardItemsApi = (function () {
    function BoardItemsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Items Count
     * @param id
     * @param conditions
     */
    BoardItemsApi.prototype.serviceBoardsIdItemsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/items/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdItemsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Items
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    BoardItemsApi.prototype.serviceBoardsIdItemsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/items'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdItemsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Item By Id
     * @param id
     * @param itemId
     */
    BoardItemsApi.prototype.serviceBoardsIdItemsItemIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/items/{itemId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'itemId' + '}', String(params.itemId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdItemsItemIdDelete');
        }
        // verify required parameter 'itemId' is set
        if (params.itemId == null) {
            throw new Error('Missing required parameter itemId when calling serviceBoardsIdItemsItemIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Item By Id
     * @param id
     * @param itemId
     */
    BoardItemsApi.prototype.serviceBoardsIdItemsItemIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/items/{itemId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'itemId' + '}', String(params.itemId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdItemsItemIdGet');
        }
        // verify required parameter 'itemId' is set
        if (params.itemId == null) {
            throw new Error('Missing required parameter itemId when calling serviceBoardsIdItemsItemIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Item
     * @param id
     * @param itemId
     * @param operations
     */
    BoardItemsApi.prototype.serviceBoardsIdItemsItemIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/items/{itemId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'itemId' + '}', String(params.itemId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdItemsItemIdPatch');
        }
        // verify required parameter 'itemId' is set
        if (params.itemId == null) {
            throw new Error('Missing required parameter itemId when calling serviceBoardsIdItemsItemIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceBoardsIdItemsItemIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Item
     * @param id
     * @param itemId
     * @param item
     */
    BoardItemsApi.prototype.serviceBoardsIdItemsItemIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/items/{itemId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'itemId' + '}', String(params.itemId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdItemsItemIdPut');
        }
        // verify required parameter 'itemId' is set
        if (params.itemId == null) {
            throw new Error('Missing required parameter itemId when calling serviceBoardsIdItemsItemIdPut');
        }
        // verify required parameter 'item' is set
        if (params.item == null) {
            throw new Error('Missing required parameter item when calling serviceBoardsIdItemsItemIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.item)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Item
     * @param id
     * @param item
     */
    BoardItemsApi.prototype.serviceBoardsIdItemsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/items'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdItemsPost');
        }
        // verify required parameter 'item' is set
        if (params.item == null) {
            throw new Error('Missing required parameter item when calling serviceBoardsIdItemsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.item)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return BoardItemsApi;
}());
exports.BoardItemsApi = BoardItemsApi;
//}
//export namespace  {
'use strict';
var BoardStatusesApi = (function () {
    function BoardStatusesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Statuses Count
     * @param id
     * @param conditions
     */
    BoardStatusesApi.prototype.serviceBoardsIdStatusesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/statuses/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Statuses
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    BoardStatusesApi.prototype.serviceBoardsIdStatusesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/statuses'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Statuses
     * @param id
     * @param status
     */
    BoardStatusesApi.prototype.serviceBoardsIdStatusesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/statuses'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesPost');
        }
        // verify required parameter 'status' is set
        if (params.status == null) {
            throw new Error('Missing required parameter status when calling serviceBoardsIdStatusesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.status)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Status By Id
     * @param id
     * @param statusId
     */
    BoardStatusesApi.prototype.serviceBoardsIdStatusesStatusIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/statuses/{statusId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'statusId' + '}', String(params.statusId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesStatusIdDelete');
        }
        // verify required parameter 'statusId' is set
        if (params.statusId == null) {
            throw new Error('Missing required parameter statusId when calling serviceBoardsIdStatusesStatusIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Status By Id
     * @param id
     * @param statusId
     */
    BoardStatusesApi.prototype.serviceBoardsIdStatusesStatusIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/statuses/{statusId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'statusId' + '}', String(params.statusId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesStatusIdGet');
        }
        // verify required parameter 'statusId' is set
        if (params.statusId == null) {
            throw new Error('Missing required parameter statusId when calling serviceBoardsIdStatusesStatusIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Status
     * @param id
     * @param statusId
     * @param operations
     */
    BoardStatusesApi.prototype.serviceBoardsIdStatusesStatusIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/statuses/{statusId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'statusId' + '}', String(params.statusId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesStatusIdPatch');
        }
        // verify required parameter 'statusId' is set
        if (params.statusId == null) {
            throw new Error('Missing required parameter statusId when calling serviceBoardsIdStatusesStatusIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceBoardsIdStatusesStatusIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Statuses
     * @param id
     * @param statusId
     * @param status
     */
    BoardStatusesApi.prototype.serviceBoardsIdStatusesStatusIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/statuses/{statusId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'statusId' + '}', String(params.statusId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdStatusesStatusIdPut');
        }
        // verify required parameter 'statusId' is set
        if (params.statusId == null) {
            throw new Error('Missing required parameter statusId when calling serviceBoardsIdStatusesStatusIdPut');
        }
        // verify required parameter 'status' is set
        if (params.status == null) {
            throw new Error('Missing required parameter status when calling serviceBoardsIdStatusesStatusIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.status)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return BoardStatusesApi;
}());
exports.BoardStatusesApi = BoardStatusesApi;
//}
//export namespace  {
'use strict';
var BoardSubTypesApi = (function () {
    function BoardSubTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Subtypes Count
     * @param id
     * @param conditions
     */
    BoardSubTypesApi.prototype.serviceBoardsIdSubtypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/subtypes/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Subtypes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    BoardSubTypesApi.prototype.serviceBoardsIdSubtypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/subtypes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Subtype
     * @param id
     * @param subType
     */
    BoardSubTypesApi.prototype.serviceBoardsIdSubtypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/subtypes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesPost');
        }
        // verify required parameter 'subType' is set
        if (params.subType == null) {
            throw new Error('Missing required parameter subType when calling serviceBoardsIdSubtypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.subType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Subtype By Id
     * @param id
     * @param subtypeId
     */
    BoardSubTypesApi.prototype.serviceBoardsIdSubtypesSubtypeIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/subtypes/{subtypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subtypeId' + '}', String(params.subtypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesSubtypeIdDelete');
        }
        // verify required parameter 'subtypeId' is set
        if (params.subtypeId == null) {
            throw new Error('Missing required parameter subtypeId when calling serviceBoardsIdSubtypesSubtypeIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Subtype By Id
     * @param id
     * @param subtypeId
     */
    BoardSubTypesApi.prototype.serviceBoardsIdSubtypesSubtypeIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/subtypes/{subtypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subtypeId' + '}', String(params.subtypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesSubtypeIdGet');
        }
        // verify required parameter 'subtypeId' is set
        if (params.subtypeId == null) {
            throw new Error('Missing required parameter subtypeId when calling serviceBoardsIdSubtypesSubtypeIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Subtype
     * @param id
     * @param subtypeId
     * @param operations
     */
    BoardSubTypesApi.prototype.serviceBoardsIdSubtypesSubtypeIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/subtypes/{subtypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subtypeId' + '}', String(params.subtypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesSubtypeIdPatch');
        }
        // verify required parameter 'subtypeId' is set
        if (params.subtypeId == null) {
            throw new Error('Missing required parameter subtypeId when calling serviceBoardsIdSubtypesSubtypeIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceBoardsIdSubtypesSubtypeIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Subtype
     * @param id
     * @param subtypeId
     * @param subType
     */
    BoardSubTypesApi.prototype.serviceBoardsIdSubtypesSubtypeIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/subtypes/{subtypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subtypeId' + '}', String(params.subtypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdSubtypesSubtypeIdPut');
        }
        // verify required parameter 'subtypeId' is set
        if (params.subtypeId == null) {
            throw new Error('Missing required parameter subtypeId when calling serviceBoardsIdSubtypesSubtypeIdPut');
        }
        // verify required parameter 'subType' is set
        if (params.subType == null) {
            throw new Error('Missing required parameter subType when calling serviceBoardsIdSubtypesSubtypeIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.subType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return BoardSubTypesApi;
}());
exports.BoardSubTypesApi = BoardSubTypesApi;
//}
//export namespace  {
'use strict';
var BoardSubtypeAssociationsApi = (function () {
    function BoardSubtypeAssociationsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Subtype Association By Id
     * @param boardId
     * @param subtypeId
     * @param associationId
     */
    BoardSubtypeAssociationsApi.prototype.serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{boardId}/subTypes/{subtypeId}/associations/{associationId}'
            .replace('{' + 'boardId' + '}', String(params.boardId))
            .replace('{' + 'subtypeId' + '}', String(params.subtypeId))
            .replace('{' + 'associationId' + '}', String(params.associationId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'boardId' is set
        if (params.boardId == null) {
            throw new Error('Missing required parameter boardId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdDelete');
        }
        // verify required parameter 'subtypeId' is set
        if (params.subtypeId == null) {
            throw new Error('Missing required parameter subtypeId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdDelete');
        }
        // verify required parameter 'associationId' is set
        if (params.associationId == null) {
            throw new Error('Missing required parameter associationId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Subtype Association By Id
     * @param boardId
     * @param subtypeId
     * @param associationId
     */
    BoardSubtypeAssociationsApi.prototype.serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{boardId}/subTypes/{subtypeId}/associations/{associationId}'
            .replace('{' + 'boardId' + '}', String(params.boardId))
            .replace('{' + 'subtypeId' + '}', String(params.subtypeId))
            .replace('{' + 'associationId' + '}', String(params.associationId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'boardId' is set
        if (params.boardId == null) {
            throw new Error('Missing required parameter boardId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdGet');
        }
        // verify required parameter 'subtypeId' is set
        if (params.subtypeId == null) {
            throw new Error('Missing required parameter subtypeId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdGet');
        }
        // verify required parameter 'associationId' is set
        if (params.associationId == null) {
            throw new Error('Missing required parameter associationId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsAssociationIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Subtype Association Count
     * @param boardId
     * @param subtypeId
     * @param conditions
     */
    BoardSubtypeAssociationsApi.prototype.serviceBoardsBoardIdSubTypesSubtypeIdAssociationsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{boardId}/subTypes/{subtypeId}/associations/count'
            .replace('{' + 'boardId' + '}', String(params.boardId))
            .replace('{' + 'subtypeId' + '}', String(params.subtypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'boardId' is set
        if (params.boardId == null) {
            throw new Error('Missing required parameter boardId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsCountGet');
        }
        // verify required parameter 'subtypeId' is set
        if (params.subtypeId == null) {
            throw new Error('Missing required parameter subtypeId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Subtype Association
     * @param boardId
     * @param subtypeId
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    BoardSubtypeAssociationsApi.prototype.serviceBoardsBoardIdSubTypesSubtypeIdAssociationsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{boardId}/subTypes/{subtypeId}/associations'
            .replace('{' + 'boardId' + '}', String(params.boardId))
            .replace('{' + 'subtypeId' + '}', String(params.subtypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'boardId' is set
        if (params.boardId == null) {
            throw new Error('Missing required parameter boardId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsGet');
        }
        // verify required parameter 'subtypeId' is set
        if (params.subtypeId == null) {
            throw new Error('Missing required parameter subtypeId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Subtype Association
     * @param boardId
     * @param subtypeId
     * @param subtypeAssociation
     */
    BoardSubtypeAssociationsApi.prototype.serviceBoardsBoardIdSubTypesSubtypeIdAssociationsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{boardId}/subTypes/{subtypeId}/associations'
            .replace('{' + 'boardId' + '}', String(params.boardId))
            .replace('{' + 'subtypeId' + '}', String(params.subtypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'boardId' is set
        if (params.boardId == null) {
            throw new Error('Missing required parameter boardId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsPost');
        }
        // verify required parameter 'subtypeId' is set
        if (params.subtypeId == null) {
            throw new Error('Missing required parameter subtypeId when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsPost');
        }
        // verify required parameter 'subtypeAssociation' is set
        if (params.subtypeAssociation == null) {
            throw new Error('Missing required parameter subtypeAssociation when calling serviceBoardsBoardIdSubTypesSubtypeIdAssociationsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.subtypeAssociation)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return BoardSubtypeAssociationsApi;
}());
exports.BoardSubtypeAssociationsApi = BoardSubtypeAssociationsApi;
//}
//export namespace  {
'use strict';
var BoardTeamsApi = (function () {
    function BoardTeamsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Teams Count
     * @param id
     * @param conditions
     */
    BoardTeamsApi.prototype.serviceBoardsIdTeamsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/teams/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Teams
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    BoardTeamsApi.prototype.serviceBoardsIdTeamsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/teams'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Team
     * @param id
     * @param team
     */
    BoardTeamsApi.prototype.serviceBoardsIdTeamsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/teams'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsPost');
        }
        // verify required parameter 'team' is set
        if (params.team == null) {
            throw new Error('Missing required parameter team when calling serviceBoardsIdTeamsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.team)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Team By Id
     * @param id
     * @param teamId
     */
    BoardTeamsApi.prototype.serviceBoardsIdTeamsTeamIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/teams/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsTeamIdDelete');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling serviceBoardsIdTeamsTeamIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Team By Id
     * @param id
     * @param teamId
     */
    BoardTeamsApi.prototype.serviceBoardsIdTeamsTeamIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/teams/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsTeamIdGet');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling serviceBoardsIdTeamsTeamIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Team
     * @param id
     * @param teamId
     * @param operations
     */
    BoardTeamsApi.prototype.serviceBoardsIdTeamsTeamIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/teams/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsTeamIdPatch');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling serviceBoardsIdTeamsTeamIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceBoardsIdTeamsTeamIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Team
     * @param id
     * @param teamId
     * @param team
     */
    BoardTeamsApi.prototype.serviceBoardsIdTeamsTeamIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/teams/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTeamsTeamIdPut');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling serviceBoardsIdTeamsTeamIdPut');
        }
        // verify required parameter 'team' is set
        if (params.team == null) {
            throw new Error('Missing required parameter team when calling serviceBoardsIdTeamsTeamIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.team)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return BoardTeamsApi;
}());
exports.BoardTeamsApi = BoardTeamsApi;
//}
//export namespace  {
'use strict';
var BoardTypesApi = (function () {
    function BoardTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Types Count
     * @param id
     * @param conditions
     */
    BoardTypesApi.prototype.serviceBoardsIdTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/types/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTypesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Types
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    BoardTypesApi.prototype.serviceBoardsIdTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/types'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTypesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Type
     * @param id
     * @param type
     */
    BoardTypesApi.prototype.serviceBoardsIdTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/types'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTypesPost');
        }
        // verify required parameter 'type' is set
        if (params.type == null) {
            throw new Error('Missing required parameter type when calling serviceBoardsIdTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.type)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Type By Id
     * @param id
     * @param typeId
     */
    BoardTypesApi.prototype.serviceBoardsIdTypesTypeIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/types/{typeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'typeId' + '}', String(params.typeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTypesTypeIdDelete');
        }
        // verify required parameter 'typeId' is set
        if (params.typeId == null) {
            throw new Error('Missing required parameter typeId when calling serviceBoardsIdTypesTypeIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Type By Id
     * @param id
     * @param typeId
     */
    BoardTypesApi.prototype.serviceBoardsIdTypesTypeIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/types/{typeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'typeId' + '}', String(params.typeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTypesTypeIdGet');
        }
        // verify required parameter 'typeId' is set
        if (params.typeId == null) {
            throw new Error('Missing required parameter typeId when calling serviceBoardsIdTypesTypeIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Types
     * @param id
     * @param typeId
     * @param operations
     */
    BoardTypesApi.prototype.serviceBoardsIdTypesTypeIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/types/{typeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'typeId' + '}', String(params.typeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTypesTypeIdPatch');
        }
        // verify required parameter 'typeId' is set
        if (params.typeId == null) {
            throw new Error('Missing required parameter typeId when calling serviceBoardsIdTypesTypeIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceBoardsIdTypesTypeIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Types
     * @param id
     * @param typeId
     * @param type
     */
    BoardTypesApi.prototype.serviceBoardsIdTypesTypeIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/types/{typeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'typeId' + '}', String(params.typeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTypesTypeIdPut');
        }
        // verify required parameter 'typeId' is set
        if (params.typeId == null) {
            throw new Error('Missing required parameter typeId when calling serviceBoardsIdTypesTypeIdPut');
        }
        // verify required parameter 'type' is set
        if (params.type == null) {
            throw new Error('Missing required parameter type when calling serviceBoardsIdTypesTypeIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.type)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Sub Type Association
     * @param id
     * @param typeId
     */
    BoardTypesApi.prototype.serviceBoardsIdTypesTypeIdSubTypeAssociationGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}/types/{typeId}/subTypeAssociation'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'typeId' + '}', String(params.typeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdTypesTypeIdSubTypeAssociationGet');
        }
        // verify required parameter 'typeId' is set
        if (params.typeId == null) {
            throw new Error('Missing required parameter typeId when calling serviceBoardsIdTypesTypeIdSubTypeAssociationGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return BoardTypesApi;
}());
exports.BoardTypesApi = BoardTypesApi;
//}
//export namespace  {
'use strict';
var BoardsApi = (function () {
    function BoardsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Boards Count
     * @param conditions
     */
    BoardsApi.prototype.serviceBoardsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Boards
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    BoardsApi.prototype.serviceBoardsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Board By Id
     * @param id
     */
    BoardsApi.prototype.serviceBoardsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Board By Id
     * @param id
     */
    BoardsApi.prototype.serviceBoardsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Board
     * @param id
     * @param operations
     */
    BoardsApi.prototype.serviceBoardsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceBoardsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Board
     * @param id
     * @param board
     */
    BoardsApi.prototype.serviceBoardsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceBoardsIdPut');
        }
        // verify required parameter 'board' is set
        if (params.board == null) {
            throw new Error('Missing required parameter board when calling serviceBoardsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.board)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Board
     * @param board
     */
    BoardsApi.prototype.serviceBoardsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/boards';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'board' is set
        if (params.board == null) {
            throw new Error('Missing required parameter board when calling serviceBoardsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.board)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return BoardsApi;
}());
exports.BoardsApi = BoardsApi;
//}
//export namespace  {
'use strict';
var CallbacksApi = (function () {
    function CallbacksApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Callback Entries Count
     * @param conditions
     */
    CallbacksApi.prototype.systemCallbacksCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/callbacks/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Callback Entries
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CallbacksApi.prototype.systemCallbacksGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/callbacks';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Callback Entry By Id
     * @param id
     */
    CallbacksApi.prototype.systemCallbacksIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/callbacks/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemCallbacksIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Callback Entry By Id
     * @param id
     */
    CallbacksApi.prototype.systemCallbacksIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/callbacks/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemCallbacksIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Callback Entry
     * @param id
     * @param operations
     */
    CallbacksApi.prototype.systemCallbacksIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/callbacks/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemCallbacksIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemCallbacksIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Callback Entry
     * @param id
     * @param callbackEntry
     */
    CallbacksApi.prototype.systemCallbacksIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/callbacks/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemCallbacksIdPut');
        }
        // verify required parameter 'callbackEntry' is set
        if (params.callbackEntry == null) {
            throw new Error('Missing required parameter callbackEntry when calling systemCallbacksIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.callbackEntry)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Callback Entry
     * @param callbackEntry
     */
    CallbacksApi.prototype.systemCallbacksPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/callbacks';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'callbackEntry' is set
        if (params.callbackEntry == null) {
            throw new Error('Missing required parameter callbackEntry when calling systemCallbacksPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.callbackEntry)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CallbacksApi;
}());
exports.CallbacksApi = CallbacksApi;
//}
//export namespace  {
'use strict';
var CampaignAuditsApi = (function () {
    function CampaignAuditsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Campaign Audit By Id
     * @param id
     * @param auditId
     */
    CampaignAuditsApi.prototype.marketingCampaignsIdAuditsAuditIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/audits/{auditId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'auditId' + '}', String(params.auditId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsAuditIdDelete');
        }
        // verify required parameter 'auditId' is set
        if (params.auditId == null) {
            throw new Error('Missing required parameter auditId when calling marketingCampaignsIdAuditsAuditIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Audit By Id
     * @param id
     * @param auditId
     */
    CampaignAuditsApi.prototype.marketingCampaignsIdAuditsAuditIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/audits/{auditId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'auditId' + '}', String(params.auditId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsAuditIdGet');
        }
        // verify required parameter 'auditId' is set
        if (params.auditId == null) {
            throw new Error('Missing required parameter auditId when calling marketingCampaignsIdAuditsAuditIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Campaign Audit
     * @param id
     * @param auditId
     * @param operations
     */
    CampaignAuditsApi.prototype.marketingCampaignsIdAuditsAuditIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/audits/{auditId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'auditId' + '}', String(params.auditId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsAuditIdPatch');
        }
        // verify required parameter 'auditId' is set
        if (params.auditId == null) {
            throw new Error('Missing required parameter auditId when calling marketingCampaignsIdAuditsAuditIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling marketingCampaignsIdAuditsAuditIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Campaign Audit
     * @param id
     * @param auditId
     * @param campaignAudit
     */
    CampaignAuditsApi.prototype.marketingCampaignsIdAuditsAuditIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/audits/{auditId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'auditId' + '}', String(params.auditId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsAuditIdPut');
        }
        // verify required parameter 'auditId' is set
        if (params.auditId == null) {
            throw new Error('Missing required parameter auditId when calling marketingCampaignsIdAuditsAuditIdPut');
        }
        // verify required parameter 'campaignAudit' is set
        if (params.campaignAudit == null) {
            throw new Error('Missing required parameter campaignAudit when calling marketingCampaignsIdAuditsAuditIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.campaignAudit)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Audits Count
     * @param id
     * @param conditions
     */
    CampaignAuditsApi.prototype.marketingCampaignsIdAuditsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/audits/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Audits
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CampaignAuditsApi.prototype.marketingCampaignsIdAuditsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/audits'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Campaign Audit
     * @param id
     * @param campaignAudit
     */
    CampaignAuditsApi.prototype.marketingCampaignsIdAuditsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/audits'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdAuditsPost');
        }
        // verify required parameter 'campaignAudit' is set
        if (params.campaignAudit == null) {
            throw new Error('Missing required parameter campaignAudit when calling marketingCampaignsIdAuditsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.campaignAudit)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CampaignAuditsApi;
}());
exports.CampaignAuditsApi = CampaignAuditsApi;
//}
//export namespace  {
'use strict';
var CampaignEmailsOpenedApi = (function () {
    function CampaignEmailsOpenedApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Emails Opened Count
     * @param id
     * @param conditions
     */
    CampaignEmailsOpenedApi.prototype.marketingCampaignsIdEmailsOpenedCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Email Opened By Id
     * @param id
     * @param emailOpenedId
     */
    CampaignEmailsOpenedApi.prototype.marketingCampaignsIdEmailsOpenedEmailOpenedIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened/{emailOpenedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'emailOpenedId' + '}', String(params.emailOpenedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdDelete');
        }
        // verify required parameter 'emailOpenedId' is set
        if (params.emailOpenedId == null) {
            throw new Error('Missing required parameter emailOpenedId when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Email Opened By Id
     * @param id
     * @param emailOpenedId
     */
    CampaignEmailsOpenedApi.prototype.marketingCampaignsIdEmailsOpenedEmailOpenedIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened/{emailOpenedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'emailOpenedId' + '}', String(params.emailOpenedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdGet');
        }
        // verify required parameter 'emailOpenedId' is set
        if (params.emailOpenedId == null) {
            throw new Error('Missing required parameter emailOpenedId when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Email Opened
     * @param id
     * @param emailOpenedId
     * @param operations
     */
    CampaignEmailsOpenedApi.prototype.marketingCampaignsIdEmailsOpenedEmailOpenedIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened/{emailOpenedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'emailOpenedId' + '}', String(params.emailOpenedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPatch');
        }
        // verify required parameter 'emailOpenedId' is set
        if (params.emailOpenedId == null) {
            throw new Error('Missing required parameter emailOpenedId when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Email Opened
     * @param id
     * @param emailOpenedId
     * @param emailOpened
     */
    CampaignEmailsOpenedApi.prototype.marketingCampaignsIdEmailsOpenedEmailOpenedIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened/{emailOpenedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'emailOpenedId' + '}', String(params.emailOpenedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPut');
        }
        // verify required parameter 'emailOpenedId' is set
        if (params.emailOpenedId == null) {
            throw new Error('Missing required parameter emailOpenedId when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPut');
        }
        // verify required parameter 'emailOpened' is set
        if (params.emailOpened == null) {
            throw new Error('Missing required parameter emailOpened when calling marketingCampaignsIdEmailsOpenedEmailOpenedIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.emailOpened)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Emails Opened
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CampaignEmailsOpenedApi.prototype.marketingCampaignsIdEmailsOpenedGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Email Opened
     * @param id
     * @param emailOpened
     */
    CampaignEmailsOpenedApi.prototype.marketingCampaignsIdEmailsOpenedPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/emailsOpened'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdEmailsOpenedPost');
        }
        // verify required parameter 'emailOpened' is set
        if (params.emailOpened == null) {
            throw new Error('Missing required parameter emailOpened when calling marketingCampaignsIdEmailsOpenedPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.emailOpened)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CampaignEmailsOpenedApi;
}());
exports.CampaignEmailsOpenedApi = CampaignEmailsOpenedApi;
//}
//export namespace  {
'use strict';
var CampaignFormsSubmittedApi = (function () {
    function CampaignFormsSubmittedApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Forms Submitted Count
     * @param id
     * @param conditions
     */
    CampaignFormsSubmittedApi.prototype.marketingCampaignsIdFormsSubmittedCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Form Submitted By Id
     * @param id
     * @param formSubmittedId
     */
    CampaignFormsSubmittedApi.prototype.marketingCampaignsIdFormsSubmittedFormSubmittedIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted/{formSubmittedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'formSubmittedId' + '}', String(params.formSubmittedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdDelete');
        }
        // verify required parameter 'formSubmittedId' is set
        if (params.formSubmittedId == null) {
            throw new Error('Missing required parameter formSubmittedId when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Form Submitted By Id
     * @param id
     * @param formSubmittedId
     */
    CampaignFormsSubmittedApi.prototype.marketingCampaignsIdFormsSubmittedFormSubmittedIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted/{formSubmittedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'formSubmittedId' + '}', String(params.formSubmittedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdGet');
        }
        // verify required parameter 'formSubmittedId' is set
        if (params.formSubmittedId == null) {
            throw new Error('Missing required parameter formSubmittedId when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Form Submitted
     * @param id
     * @param formSubmittedId
     * @param operations
     */
    CampaignFormsSubmittedApi.prototype.marketingCampaignsIdFormsSubmittedFormSubmittedIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted/{formSubmittedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'formSubmittedId' + '}', String(params.formSubmittedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPatch');
        }
        // verify required parameter 'formSubmittedId' is set
        if (params.formSubmittedId == null) {
            throw new Error('Missing required parameter formSubmittedId when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Form Submitted
     * @param id
     * @param formSubmittedId
     * @param formSubmitted
     */
    CampaignFormsSubmittedApi.prototype.marketingCampaignsIdFormsSubmittedFormSubmittedIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted/{formSubmittedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'formSubmittedId' + '}', String(params.formSubmittedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPut');
        }
        // verify required parameter 'formSubmittedId' is set
        if (params.formSubmittedId == null) {
            throw new Error('Missing required parameter formSubmittedId when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPut');
        }
        // verify required parameter 'formSubmitted' is set
        if (params.formSubmitted == null) {
            throw new Error('Missing required parameter formSubmitted when calling marketingCampaignsIdFormsSubmittedFormSubmittedIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.formSubmitted)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Forms Submitted
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CampaignFormsSubmittedApi.prototype.marketingCampaignsIdFormsSubmittedGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Form Submitted
     * @param id
     * @param formSubmitted
     */
    CampaignFormsSubmittedApi.prototype.marketingCampaignsIdFormsSubmittedPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/formsSubmitted'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdFormsSubmittedPost');
        }
        // verify required parameter 'formSubmitted' is set
        if (params.formSubmitted == null) {
            throw new Error('Missing required parameter formSubmitted when calling marketingCampaignsIdFormsSubmittedPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.formSubmitted)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CampaignFormsSubmittedApi;
}());
exports.CampaignFormsSubmittedApi = CampaignFormsSubmittedApi;
//}
//export namespace  {
'use strict';
var CampaignLinksClickedApi = (function () {
    function CampaignLinksClickedApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Links Clicked Count
     * @param id
     * @param conditions
     */
    CampaignLinksClickedApi.prototype.marketingCampaignsIdLinksClickedCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Links Clicked
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CampaignLinksClickedApi.prototype.marketingCampaignsIdLinksClickedGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Link Clicked By Id
     * @param id
     * @param linkClickedId
     */
    CampaignLinksClickedApi.prototype.marketingCampaignsIdLinksClickedLinkClickedIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked/{linkClickedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'linkClickedId' + '}', String(params.linkClickedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedLinkClickedIdDelete');
        }
        // verify required parameter 'linkClickedId' is set
        if (params.linkClickedId == null) {
            throw new Error('Missing required parameter linkClickedId when calling marketingCampaignsIdLinksClickedLinkClickedIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Link Clicked By Id
     * @param id
     * @param linkClickedId
     */
    CampaignLinksClickedApi.prototype.marketingCampaignsIdLinksClickedLinkClickedIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked/{linkClickedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'linkClickedId' + '}', String(params.linkClickedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedLinkClickedIdGet');
        }
        // verify required parameter 'linkClickedId' is set
        if (params.linkClickedId == null) {
            throw new Error('Missing required parameter linkClickedId when calling marketingCampaignsIdLinksClickedLinkClickedIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Link Clicked
     * @param id
     * @param linkClickedId
     * @param operations
     */
    CampaignLinksClickedApi.prototype.marketingCampaignsIdLinksClickedLinkClickedIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked/{linkClickedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'linkClickedId' + '}', String(params.linkClickedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedLinkClickedIdPatch');
        }
        // verify required parameter 'linkClickedId' is set
        if (params.linkClickedId == null) {
            throw new Error('Missing required parameter linkClickedId when calling marketingCampaignsIdLinksClickedLinkClickedIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling marketingCampaignsIdLinksClickedLinkClickedIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Link Clicked
     * @param id
     * @param linkClickedId
     * @param linkClicked
     */
    CampaignLinksClickedApi.prototype.marketingCampaignsIdLinksClickedLinkClickedIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked/{linkClickedId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'linkClickedId' + '}', String(params.linkClickedId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedLinkClickedIdPut');
        }
        // verify required parameter 'linkClickedId' is set
        if (params.linkClickedId == null) {
            throw new Error('Missing required parameter linkClickedId when calling marketingCampaignsIdLinksClickedLinkClickedIdPut');
        }
        // verify required parameter 'linkClicked' is set
        if (params.linkClicked == null) {
            throw new Error('Missing required parameter linkClicked when calling marketingCampaignsIdLinksClickedLinkClickedIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.linkClicked)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Link Clicked
     * @param id
     * @param linkClicked
     */
    CampaignLinksClickedApi.prototype.marketingCampaignsIdLinksClickedPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/linksClicked'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdLinksClickedPost');
        }
        // verify required parameter 'linkClicked' is set
        if (params.linkClicked == null) {
            throw new Error('Missing required parameter linkClicked when calling marketingCampaignsIdLinksClickedPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.linkClicked)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CampaignLinksClickedApi;
}());
exports.CampaignLinksClickedApi = CampaignLinksClickedApi;
//}
//export namespace  {
'use strict';
var CampaignStatusesApi = (function () {
    function CampaignStatusesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Campaign Statuses Count
     * @param conditions
     */
    CampaignStatusesApi.prototype.marketingCampaignsStatusesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/statuses/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CampaignStatusesApi.prototype.marketingCampaignsStatusesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Campaign Status By Id
     * @param id
     */
    CampaignStatusesApi.prototype.marketingCampaignsStatusesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsStatusesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Status By Id
     * @param id
     */
    CampaignStatusesApi.prototype.marketingCampaignsStatusesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsStatusesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Campaign Status
     * @param id
     * @param operations
     */
    CampaignStatusesApi.prototype.marketingCampaignsStatusesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsStatusesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling marketingCampaignsStatusesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Campaign Status
     * @param id
     * @param campaignStatus
     */
    CampaignStatusesApi.prototype.marketingCampaignsStatusesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsStatusesIdPut');
        }
        // verify required parameter 'campaignStatus' is set
        if (params.campaignStatus == null) {
            throw new Error('Missing required parameter campaignStatus when calling marketingCampaignsStatusesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.campaignStatus)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Campaign Status
     * @param campaignStatus
     */
    CampaignStatusesApi.prototype.marketingCampaignsStatusesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'campaignStatus' is set
        if (params.campaignStatus == null) {
            throw new Error('Missing required parameter campaignStatus when calling marketingCampaignsStatusesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.campaignStatus)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CampaignStatusesApi;
}());
exports.CampaignStatusesApi = CampaignStatusesApi;
//}
//export namespace  {
'use strict';
var CampaignSubTypesApi = (function () {
    function CampaignSubTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Campaign Sub Types Count
     * @param id
     * @param conditions
     */
    CampaignSubTypesApi.prototype.marketingCampaignsTypesIdSubTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Sub Types
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CampaignSubTypesApi.prototype.marketingCampaignsTypesIdSubTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Campaign Sub Type
     * @param id
     * @param campaignSubType
     */
    CampaignSubTypesApi.prototype.marketingCampaignsTypesIdSubTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesPost');
        }
        // verify required parameter 'campaignSubType' is set
        if (params.campaignSubType == null) {
            throw new Error('Missing required parameter campaignSubType when calling marketingCampaignsTypesIdSubTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.campaignSubType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Campaign Sub Type By Id
     * @param id
     * @param subTypeId
     */
    CampaignSubTypesApi.prototype.marketingCampaignsTypesIdSubTypesSubTypeIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes/{subTypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subTypeId' + '}', String(params.subTypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesSubTypeIdDelete');
        }
        // verify required parameter 'subTypeId' is set
        if (params.subTypeId == null) {
            throw new Error('Missing required parameter subTypeId when calling marketingCampaignsTypesIdSubTypesSubTypeIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Sub Type By Id
     * @param id
     * @param subTypeId
     */
    CampaignSubTypesApi.prototype.marketingCampaignsTypesIdSubTypesSubTypeIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes/{subTypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subTypeId' + '}', String(params.subTypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesSubTypeIdGet');
        }
        // verify required parameter 'subTypeId' is set
        if (params.subTypeId == null) {
            throw new Error('Missing required parameter subTypeId when calling marketingCampaignsTypesIdSubTypesSubTypeIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Campaign Sub Type
     * @param id
     * @param subTypeId
     * @param operations
     */
    CampaignSubTypesApi.prototype.marketingCampaignsTypesIdSubTypesSubTypeIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes/{subTypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subTypeId' + '}', String(params.subTypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesSubTypeIdPatch');
        }
        // verify required parameter 'subTypeId' is set
        if (params.subTypeId == null) {
            throw new Error('Missing required parameter subTypeId when calling marketingCampaignsTypesIdSubTypesSubTypeIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling marketingCampaignsTypesIdSubTypesSubTypeIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Campaign Sub Type
     * @param id
     * @param subTypeId
     * @param campaignSubType
     */
    CampaignSubTypesApi.prototype.marketingCampaignsTypesIdSubTypesSubTypeIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/{id}/subTypes/{subTypeId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subTypeId' + '}', String(params.subTypeId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdSubTypesSubTypeIdPut');
        }
        // verify required parameter 'subTypeId' is set
        if (params.subTypeId == null) {
            throw new Error('Missing required parameter subTypeId when calling marketingCampaignsTypesIdSubTypesSubTypeIdPut');
        }
        // verify required parameter 'campaignSubType' is set
        if (params.campaignSubType == null) {
            throw new Error('Missing required parameter campaignSubType when calling marketingCampaignsTypesIdSubTypesSubTypeIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.campaignSubType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CampaignSubTypesApi;
}());
exports.CampaignSubTypesApi = CampaignSubTypesApi;
//}
//export namespace  {
'use strict';
var CampaignTypesApi = (function () {
    function CampaignTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Campaign Types Count
     * @param conditions
     */
    CampaignTypesApi.prototype.marketingCampaignsTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CampaignTypesApi.prototype.marketingCampaignsTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Campaign Type By Id
     * @param id
     */
    CampaignTypesApi.prototype.marketingCampaignsTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Type By Id
     * @param id
     */
    CampaignTypesApi.prototype.marketingCampaignsTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Campaign Type
     * @param id
     * @param operations
     */
    CampaignTypesApi.prototype.marketingCampaignsTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling marketingCampaignsTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Campaign Type
     * @param id
     * @param campaignType
     */
    CampaignTypesApi.prototype.marketingCampaignsTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsTypesIdPut');
        }
        // verify required parameter 'campaignType' is set
        if (params.campaignType == null) {
            throw new Error('Missing required parameter campaignType when calling marketingCampaignsTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.campaignType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Campaign Type
     * @param campaignType
     */
    CampaignTypesApi.prototype.marketingCampaignsTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'campaignType' is set
        if (params.campaignType == null) {
            throw new Error('Missing required parameter campaignType when calling marketingCampaignsTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.campaignType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CampaignTypesApi;
}());
exports.CampaignTypesApi = CampaignTypesApi;
//}
//export namespace  {
'use strict';
var CampaignsApi = (function () {
    function CampaignsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Campaigns Count
     * @param conditions
     */
    CampaignsApi.prototype.marketingCampaignsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaigns
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CampaignsApi.prototype.marketingCampaignsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Activities Count
     * @param id
     */
    CampaignsApi.prototype.marketingCampaignsIdActivitiesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/activities/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdActivitiesCountGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Activities
     * @param id
     * @param page
     * @param pageSize
     */
    CampaignsApi.prototype.marketingCampaignsIdActivitiesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/activities'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdActivitiesGet');
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Campaign By Id
     * @param id
     */
    CampaignsApi.prototype.marketingCampaignsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign By Id
     * @param id
     */
    CampaignsApi.prototype.marketingCampaignsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Opportunities Count
     * @param id
     */
    CampaignsApi.prototype.marketingCampaignsIdOpportunitiesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/opportunities/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdOpportunitiesCountGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Campaign Opportunities
     * @param id
     * @param page
     * @param pageSize
     */
    CampaignsApi.prototype.marketingCampaignsIdOpportunitiesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}/opportunities'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdOpportunitiesGet');
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Campaign
     * @param id
     * @param operations
     */
    CampaignsApi.prototype.marketingCampaignsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling marketingCampaignsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Campaign
     * @param id
     * @param campaign
     */
    CampaignsApi.prototype.marketingCampaignsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingCampaignsIdPut');
        }
        // verify required parameter 'campaign' is set
        if (params.campaign == null) {
            throw new Error('Missing required parameter campaign when calling marketingCampaignsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.campaign)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Campaign
     * @param campaign
     */
    CampaignsApi.prototype.marketingCampaignsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/campaigns';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'campaign' is set
        if (params.campaign == null) {
            throw new Error('Missing required parameter campaign when calling marketingCampaignsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.campaign)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CampaignsApi;
}());
exports.CampaignsApi = CampaignsApi;
//}
//export namespace  {
'use strict';
var CatalogComponentsApi = (function () {
    function CatalogComponentsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Catalog Component By Id
     * @param id
     * @param componentId
     */
    CatalogComponentsApi.prototype.procurementCatalogIdComponentsComponentIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{id}/components/{componentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'componentId' + '}', String(params.componentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsComponentIdDelete');
        }
        // verify required parameter 'componentId' is set
        if (params.componentId == null) {
            throw new Error('Missing required parameter componentId when calling procurementCatalogIdComponentsComponentIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Catalog Component By Id
     * @param id
     * @param componentId
     */
    CatalogComponentsApi.prototype.procurementCatalogIdComponentsComponentIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{id}/components/{componentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'componentId' + '}', String(params.componentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsComponentIdGet');
        }
        // verify required parameter 'componentId' is set
        if (params.componentId == null) {
            throw new Error('Missing required parameter componentId when calling procurementCatalogIdComponentsComponentIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Catalog Component
     * @param id
     * @param componentId
     * @param operations
     */
    CatalogComponentsApi.prototype.procurementCatalogIdComponentsComponentIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{id}/components/{componentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'componentId' + '}', String(params.componentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsComponentIdPatch');
        }
        // verify required parameter 'componentId' is set
        if (params.componentId == null) {
            throw new Error('Missing required parameter componentId when calling procurementCatalogIdComponentsComponentIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementCatalogIdComponentsComponentIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Catalog Component
     * @param id
     * @param componentId
     * @param catalogComponent
     */
    CatalogComponentsApi.prototype.procurementCatalogIdComponentsComponentIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{id}/components/{componentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'componentId' + '}', String(params.componentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsComponentIdPut');
        }
        // verify required parameter 'componentId' is set
        if (params.componentId == null) {
            throw new Error('Missing required parameter componentId when calling procurementCatalogIdComponentsComponentIdPut');
        }
        // verify required parameter 'catalogComponent' is set
        if (params.catalogComponent == null) {
            throw new Error('Missing required parameter catalogComponent when calling procurementCatalogIdComponentsComponentIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.catalogComponent)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Catalog Components Count
     * @param id
     * @param conditions
     */
    CatalogComponentsApi.prototype.procurementCatalogIdComponentsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{id}/components/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Catalog Components
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CatalogComponentsApi.prototype.procurementCatalogIdComponentsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{id}/components'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Catalog Component
     * @param id
     * @param catalogComponent
     */
    CatalogComponentsApi.prototype.procurementCatalogIdComponentsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{id}/components'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCatalogIdComponentsPost');
        }
        // verify required parameter 'catalogComponent' is set
        if (params.catalogComponent == null) {
            throw new Error('Missing required parameter catalogComponent when calling procurementCatalogIdComponentsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.catalogComponent)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CatalogComponentsApi;
}());
exports.CatalogComponentsApi = CatalogComponentsApi;
//}
//export namespace  {
'use strict';
var CatalogsItemApi = (function () {
    function CatalogsItemApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Inventory Quantity On Hand
     * @param catalogItemIdentifier
     * @param warehouseBinId
     */
    CatalogsItemApi.prototype.procurementCatalogCatalogItemIdentifierQuantityOnHandGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{catalogItemIdentifier}/quantityOnHand'
            .replace('{' + 'catalogItemIdentifier' + '}', String(params.catalogItemIdentifier));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'catalogItemIdentifier' is set
        if (params.catalogItemIdentifier == null) {
            throw new Error('Missing required parameter catalogItemIdentifier when calling procurementCatalogCatalogItemIdentifierQuantityOnHandGet');
        }
        if (params.warehouseBinId !== undefined) {
            queryParameters['warehouseBinId'] = params.warehouseBinId;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Catalogs Count
     * @param conditions
     */
    CatalogsItemApi.prototype.procurementCatalogCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Catalogs
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CatalogsItemApi.prototype.procurementCatalogGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Catalog By Id
     * @param id
     */
    CatalogsItemApi.prototype.procurementCatalogIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCatalogIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Catalog By Id
     * @param id
     */
    CatalogsItemApi.prototype.procurementCatalogIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCatalogIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Catalog
     * @param id
     * @param operations
     */
    CatalogsItemApi.prototype.procurementCatalogIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCatalogIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementCatalogIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Catalog
     * @param id
     * @param catalogItem
     */
    CatalogsItemApi.prototype.procurementCatalogIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCatalogIdPut');
        }
        // verify required parameter 'catalogItem' is set
        if (params.catalogItem == null) {
            throw new Error('Missing required parameter catalogItem when calling procurementCatalogIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.catalogItem)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Catalog
     * @param catalogItem
     */
    CatalogsItemApi.prototype.procurementCatalogPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/catalog';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'catalogItem' is set
        if (params.catalogItem == null) {
            throw new Error('Missing required parameter catalogItem when calling procurementCatalogPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.catalogItem)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CatalogsItemApi;
}());
exports.CatalogsItemApi = CatalogsItemApi;
//}
//export namespace  {
'use strict';
var CategoriesApi = (function () {
    function CategoriesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Categories Count
     * @param conditions
     */
    CategoriesApi.prototype.procurementCategoriesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Categories
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CategoriesApi.prototype.procurementCategoriesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Category By Id
     * @param id
     */
    CategoriesApi.prototype.procurementCategoriesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCategoriesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Category By Id
     * @param id
     */
    CategoriesApi.prototype.procurementCategoriesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCategoriesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Category
     * @param id
     * @param operations
     */
    CategoriesApi.prototype.procurementCategoriesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCategoriesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementCategoriesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Category
     * @param id
     * @param category
     */
    CategoriesApi.prototype.procurementCategoriesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCategoriesIdPut');
        }
        // verify required parameter 'category' is set
        if (params.category == null) {
            throw new Error('Missing required parameter category when calling procurementCategoriesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.category)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Category
     * @param category
     */
    CategoriesApi.prototype.procurementCategoriesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'category' is set
        if (params.category == null) {
            throw new Error('Missing required parameter category when calling procurementCategoriesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.category)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CategoriesApi;
}());
exports.CategoriesApi = CategoriesApi;
//}
//export namespace  {
'use strict';
var CertificationsApi = (function () {
    function CertificationsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Certification Count
     * @param conditions
     */
    CertificationsApi.prototype.systemCertificationsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/certifications/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Certification
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CertificationsApi.prototype.systemCertificationsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/certifications';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Certification By Id
     * @param id
     */
    CertificationsApi.prototype.systemCertificationsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/certifications/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemCertificationsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Certification By Id
     * @param id
     */
    CertificationsApi.prototype.systemCertificationsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/certifications/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemCertificationsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Certification
     * @param id
     * @param operations
     */
    CertificationsApi.prototype.systemCertificationsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/certifications/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemCertificationsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemCertificationsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Certification
     * @param id
     * @param certification
     */
    CertificationsApi.prototype.systemCertificationsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/certifications/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemCertificationsIdPut');
        }
        // verify required parameter 'certification' is set
        if (params.certification == null) {
            throw new Error('Missing required parameter certification when calling systemCertificationsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.certification)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Certification
     * @param certification
     */
    CertificationsApi.prototype.systemCertificationsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/certifications';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'certification' is set
        if (params.certification == null) {
            throw new Error('Missing required parameter certification when calling systemCertificationsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.certification)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CertificationsApi;
}());
exports.CertificationsApi = CertificationsApi;
//}
//export namespace  {
'use strict';
var CodesApi = (function () {
    function CodesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Create Codes Count
     * @param conditions
     */
    CodesApi.prototype.serviceCodesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/codes/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Codes
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CodesApi.prototype.serviceCodesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/codes';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Code By Id
     * @param id
     */
    CodesApi.prototype.serviceCodesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/codes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceCodesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Code By Id
     * @param id
     */
    CodesApi.prototype.serviceCodesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/codes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceCodesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Code
     * @param id
     * @param operations
     */
    CodesApi.prototype.serviceCodesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/codes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceCodesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceCodesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Code
     * @param id
     * @param code
     */
    CodesApi.prototype.serviceCodesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/codes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceCodesIdPut');
        }
        // verify required parameter 'code' is set
        if (params.code == null) {
            throw new Error('Missing required parameter code when calling serviceCodesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.code)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Codes
     * @param code
     */
    CodesApi.prototype.serviceCodesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/codes';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'code' is set
        if (params.code == null) {
            throw new Error('Missing required parameter code when calling serviceCodesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.code)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CodesApi;
}());
exports.CodesApi = CodesApi;
//}
//export namespace  {
'use strict';
var CompaniesApi = (function () {
    function CompaniesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Companies Count
     * @param conditions
     * @param customFieldConditions
     */
    CompaniesApi.prototype.companyCompaniesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Companies
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CompaniesApi.prototype.companyCompaniesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Company By Id
     * @param id
     */
    CompaniesApi.prototype.companyCompaniesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Company By Id
     * @param id
     */
    CompaniesApi.prototype.companyCompaniesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Merge Company
     * @param id
     * @param merge
     */
    CompaniesApi.prototype.companyCompaniesIdMergePost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/merge'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdMergePost');
        }
        // verify required parameter 'merge' is set
        if (params.merge == null) {
            throw new Error('Missing required parameter merge when calling companyCompaniesIdMergePost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.merge)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Company
     * @param id
     * @param operations
     */
    CompaniesApi.prototype.companyCompaniesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyCompaniesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Company
     * @param id
     * @param company
     */
    CompaniesApi.prototype.companyCompaniesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdPut');
        }
        // verify required parameter 'company' is set
        if (params.company == null) {
            throw new Error('Missing required parameter company when calling companyCompaniesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.company)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Company
     * @param company
     */
    CompaniesApi.prototype.companyCompaniesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'company' is set
        if (params.company == null) {
            throw new Error('Missing required parameter company when calling companyCompaniesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.company)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CompaniesApi;
}());
exports.CompaniesApi = CompaniesApi;
//}
//export namespace  {
'use strict';
var CompanyCustomNotesApi = (function () {
    function CompanyCustomNotesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Custom Note Count
     * @param id
     * @param conditions
     */
    CompanyCustomNotesApi.prototype.companyCompaniesIdCustomStatusNotesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Custom Note By Id
     * @param id
     * @param customNoteId
     */
    CompanyCustomNotesApi.prototype.companyCompaniesIdCustomStatusNotesCustomNoteIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes/{customNoteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'customNoteId' + '}', String(params.customNoteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesCustomNoteIdDelete');
        }
        // verify required parameter 'customNoteId' is set
        if (params.customNoteId == null) {
            throw new Error('Missing required parameter customNoteId when calling companyCompaniesIdCustomStatusNotesCustomNoteIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Custom Note By Id
     * @param id
     * @param customNoteId
     */
    CompanyCustomNotesApi.prototype.companyCompaniesIdCustomStatusNotesCustomNoteIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes/{customNoteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'customNoteId' + '}', String(params.customNoteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesCustomNoteIdGet');
        }
        // verify required parameter 'customNoteId' is set
        if (params.customNoteId == null) {
            throw new Error('Missing required parameter customNoteId when calling companyCompaniesIdCustomStatusNotesCustomNoteIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Custom Note
     * @param id
     * @param customNoteId
     * @param operations
     */
    CompanyCustomNotesApi.prototype.companyCompaniesIdCustomStatusNotesCustomNoteIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes/{customNoteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'customNoteId' + '}', String(params.customNoteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPatch');
        }
        // verify required parameter 'customNoteId' is set
        if (params.customNoteId == null) {
            throw new Error('Missing required parameter customNoteId when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Custom Note
     * @param id
     * @param customNoteId
     * @param customNote
     */
    CompanyCustomNotesApi.prototype.companyCompaniesIdCustomStatusNotesCustomNoteIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes/{customNoteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'customNoteId' + '}', String(params.customNoteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPut');
        }
        // verify required parameter 'customNoteId' is set
        if (params.customNoteId == null) {
            throw new Error('Missing required parameter customNoteId when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPut');
        }
        // verify required parameter 'customNote' is set
        if (params.customNote == null) {
            throw new Error('Missing required parameter customNote when calling companyCompaniesIdCustomStatusNotesCustomNoteIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.customNote)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Custom Note
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CompanyCustomNotesApi.prototype.companyCompaniesIdCustomStatusNotesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Custom Note
     * @param id
     * @param customNote
     */
    CompanyCustomNotesApi.prototype.companyCompaniesIdCustomStatusNotesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/customStatusNotes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdCustomStatusNotesPost');
        }
        // verify required parameter 'customNote' is set
        if (params.customNote == null) {
            throw new Error('Missing required parameter customNote when calling companyCompaniesIdCustomStatusNotesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.customNote)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CompanyCustomNotesApi;
}());
exports.CompanyCustomNotesApi = CompanyCustomNotesApi;
//}
//export namespace  {
'use strict';
var CompanyManagementSummaryReportsApi = (function () {
    function CompanyManagementSummaryReportsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Company Types Count
     * @param id
     * @param conditions
     */
    CompanyManagementSummaryReportsApi.prototype.companyCompaniesIdManagementSummaryReportsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Management Summarys
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CompanyManagementSummaryReportsApi.prototype.companyCompaniesIdManagementSummaryReportsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Management Summary
     * @param id
     * @param managementSummary
     */
    CompanyManagementSummaryReportsApi.prototype.companyCompaniesIdManagementSummaryReportsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsPost');
        }
        // verify required parameter 'managementSummary' is set
        if (params.managementSummary == null) {
            throw new Error('Missing required parameter managementSummary when calling companyCompaniesIdManagementSummaryReportsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.managementSummary)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Management Summary By Id
     * @param id
     * @param reportId
     */
    CompanyManagementSummaryReportsApi.prototype.companyCompaniesIdManagementSummaryReportsReportIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports/{reportId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'reportId' + '}', String(params.reportId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsReportIdDelete');
        }
        // verify required parameter 'reportId' is set
        if (params.reportId == null) {
            throw new Error('Missing required parameter reportId when calling companyCompaniesIdManagementSummaryReportsReportIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Management Summary By Id
     * @param id
     * @param reportId
     */
    CompanyManagementSummaryReportsApi.prototype.companyCompaniesIdManagementSummaryReportsReportIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports/{reportId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'reportId' + '}', String(params.reportId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsReportIdGet');
        }
        // verify required parameter 'reportId' is set
        if (params.reportId == null) {
            throw new Error('Missing required parameter reportId when calling companyCompaniesIdManagementSummaryReportsReportIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Management Summary
     * @param id
     * @param reportId
     * @param operations
     */
    CompanyManagementSummaryReportsApi.prototype.companyCompaniesIdManagementSummaryReportsReportIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports/{reportId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'reportId' + '}', String(params.reportId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsReportIdPatch');
        }
        // verify required parameter 'reportId' is set
        if (params.reportId == null) {
            throw new Error('Missing required parameter reportId when calling companyCompaniesIdManagementSummaryReportsReportIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyCompaniesIdManagementSummaryReportsReportIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Management Summary
     * @param id
     * @param reportId
     * @param managementSummary
     */
    CompanyManagementSummaryReportsApi.prototype.companyCompaniesIdManagementSummaryReportsReportIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/managementSummaryReports/{reportId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'reportId' + '}', String(params.reportId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdManagementSummaryReportsReportIdPut');
        }
        // verify required parameter 'reportId' is set
        if (params.reportId == null) {
            throw new Error('Missing required parameter reportId when calling companyCompaniesIdManagementSummaryReportsReportIdPut');
        }
        // verify required parameter 'managementSummary' is set
        if (params.managementSummary == null) {
            throw new Error('Missing required parameter managementSummary when calling companyCompaniesIdManagementSummaryReportsReportIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.managementSummary)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CompanyManagementSummaryReportsApi;
}());
exports.CompanyManagementSummaryReportsApi = CompanyManagementSummaryReportsApi;
//}
//export namespace  {
'use strict';
var CompanyNoteTypesApi = (function () {
    function CompanyNoteTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Note Type Count
     * @param conditions
     */
    CompanyNoteTypesApi.prototype.companyNoteTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/noteTypes/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Note Type
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CompanyNoteTypesApi.prototype.companyNoteTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/noteTypes';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Note Type By Id
     * @param id
     */
    CompanyNoteTypesApi.prototype.companyNoteTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/noteTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyNoteTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Note Type By Id
     * @param id
     */
    CompanyNoteTypesApi.prototype.companyNoteTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/noteTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyNoteTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Note Type
     * @param id
     * @param operations
     */
    CompanyNoteTypesApi.prototype.companyNoteTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/noteTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyNoteTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyNoteTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Note Type
     * @param id
     * @param noteType
     */
    CompanyNoteTypesApi.prototype.companyNoteTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/noteTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyNoteTypesIdPut');
        }
        // verify required parameter 'noteType' is set
        if (params.noteType == null) {
            throw new Error('Missing required parameter noteType when calling companyNoteTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.noteType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Note Type
     * @param noteType
     */
    CompanyNoteTypesApi.prototype.companyNoteTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/noteTypes';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'noteType' is set
        if (params.noteType == null) {
            throw new Error('Missing required parameter noteType when calling companyNoteTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.noteType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CompanyNoteTypesApi;
}());
exports.CompanyNoteTypesApi = CompanyNoteTypesApi;
//}
//export namespace  {
'use strict';
var CompanyNotesApi = (function () {
    function CompanyNotesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Company Notes Count
     * @param id
     * @param conditions
     */
    CompanyNotesApi.prototype.companyCompaniesIdNotesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/notes/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdNotesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Company Notes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CompanyNotesApi.prototype.companyCompaniesIdNotesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/notes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdNotesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Company Note By Id
     * @param id
     * @param noteId
     */
    CompanyNotesApi.prototype.companyCompaniesIdNotesNoteIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdNotesNoteIdDelete');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling companyCompaniesIdNotesNoteIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Company Note By Id
     * @param id
     * @param noteId
     */
    CompanyNotesApi.prototype.companyCompaniesIdNotesNoteIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdNotesNoteIdGet');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling companyCompaniesIdNotesNoteIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Company Note
     * @param id
     * @param noteId
     * @param operations
     */
    CompanyNotesApi.prototype.companyCompaniesIdNotesNoteIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdNotesNoteIdPatch');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling companyCompaniesIdNotesNoteIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyCompaniesIdNotesNoteIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Company Note
     * @param id
     * @param noteId
     * @param companyNote
     */
    CompanyNotesApi.prototype.companyCompaniesIdNotesNoteIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdNotesNoteIdPut');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling companyCompaniesIdNotesNoteIdPut');
        }
        // verify required parameter 'companyNote' is set
        if (params.companyNote == null) {
            throw new Error('Missing required parameter companyNote when calling companyCompaniesIdNotesNoteIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.companyNote)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Company Note
     * @param id
     * @param companyNote
     */
    CompanyNotesApi.prototype.companyCompaniesIdNotesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/notes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdNotesPost');
        }
        // verify required parameter 'companyNote' is set
        if (params.companyNote == null) {
            throw new Error('Missing required parameter companyNote when calling companyCompaniesIdNotesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.companyNote)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CompanyNotesApi;
}());
exports.CompanyNotesApi = CompanyNotesApi;
//}
//export namespace  {
'use strict';
var CompanySitesApi = (function () {
    function CompanySitesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Sites Count
     * @param id
     * @param conditions
     */
    CompanySitesApi.prototype.companyCompaniesIdSitesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/sites/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdSitesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Sites
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CompanySitesApi.prototype.companyCompaniesIdSitesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/sites'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdSitesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Site
     * @param id
     * @param site
     */
    CompanySitesApi.prototype.companyCompaniesIdSitesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/sites'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdSitesPost');
        }
        // verify required parameter 'site' is set
        if (params.site == null) {
            throw new Error('Missing required parameter site when calling companyCompaniesIdSitesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.site)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Site By Id
     * @param id
     * @param siteId
     */
    CompanySitesApi.prototype.companyCompaniesIdSitesSiteIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/sites/{siteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'siteId' + '}', String(params.siteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdSitesSiteIdDelete');
        }
        // verify required parameter 'siteId' is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling companyCompaniesIdSitesSiteIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Site By Id
     * @param id
     * @param siteId
     */
    CompanySitesApi.prototype.companyCompaniesIdSitesSiteIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/sites/{siteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'siteId' + '}', String(params.siteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdSitesSiteIdGet');
        }
        // verify required parameter 'siteId' is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling companyCompaniesIdSitesSiteIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Site
     * @param id
     * @param siteId
     * @param operations
     */
    CompanySitesApi.prototype.companyCompaniesIdSitesSiteIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/sites/{siteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'siteId' + '}', String(params.siteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdSitesSiteIdPatch');
        }
        // verify required parameter 'siteId' is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling companyCompaniesIdSitesSiteIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyCompaniesIdSitesSiteIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Site
     * @param id
     * @param siteId
     * @param site
     */
    CompanySitesApi.prototype.companyCompaniesIdSitesSiteIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/sites/{siteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'siteId' + '}', String(params.siteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdSitesSiteIdPut');
        }
        // verify required parameter 'siteId' is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling companyCompaniesIdSitesSiteIdPut');
        }
        // verify required parameter 'site' is set
        if (params.site == null) {
            throw new Error('Missing required parameter site when calling companyCompaniesIdSitesSiteIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.site)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CompanySitesApi;
}());
exports.CompanySitesApi = CompanySitesApi;
//}
//export namespace  {
'use strict';
var CompanyStatusesApi = (function () {
    function CompanyStatusesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Company Statuses Count
     * @param conditions
     */
    CompanyStatusesApi.prototype.companyCompaniesStatusesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/statuses/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Company Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CompanyStatusesApi.prototype.companyCompaniesStatusesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Company Status By Id
     * @param id
     */
    CompanyStatusesApi.prototype.companyCompaniesStatusesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesStatusesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Company Status By Id
     * @param id
     */
    CompanyStatusesApi.prototype.companyCompaniesStatusesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesStatusesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Company Status
     * @param id
     * @param operations
     */
    CompanyStatusesApi.prototype.companyCompaniesStatusesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesStatusesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyCompaniesStatusesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Company Status
     * @param id
     * @param companyStatus
     */
    CompanyStatusesApi.prototype.companyCompaniesStatusesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesStatusesIdPut');
        }
        // verify required parameter 'companyStatus' is set
        if (params.companyStatus == null) {
            throw new Error('Missing required parameter companyStatus when calling companyCompaniesStatusesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.companyStatus)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Company Status
     * @param companyStatus
     */
    CompanyStatusesApi.prototype.companyCompaniesStatusesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'companyStatus' is set
        if (params.companyStatus == null) {
            throw new Error('Missing required parameter companyStatus when calling companyCompaniesStatusesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.companyStatus)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CompanyStatusesApi;
}());
exports.CompanyStatusesApi = CompanyStatusesApi;
//}
//export namespace  {
'use strict';
var CompanyTeamsApi = (function () {
    function CompanyTeamsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Company Teams Count
     * @param id
     * @param conditions
     */
    CompanyTeamsApi.prototype.companyCompaniesIdTeamsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/teams/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Company Teams
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CompanyTeamsApi.prototype.companyCompaniesIdTeamsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/teams'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Company Team
     * @param id
     * @param companyTeam
     */
    CompanyTeamsApi.prototype.companyCompaniesIdTeamsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/teams'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsPost');
        }
        // verify required parameter 'companyTeam' is set
        if (params.companyTeam == null) {
            throw new Error('Missing required parameter companyTeam when calling companyCompaniesIdTeamsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.companyTeam)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Company Team By Id
     * @param id
     * @param teamId
     */
    CompanyTeamsApi.prototype.companyCompaniesIdTeamsTeamIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/teams/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsTeamIdDelete');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling companyCompaniesIdTeamsTeamIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Company Team By Id
     * @param id
     * @param teamId
     */
    CompanyTeamsApi.prototype.companyCompaniesIdTeamsTeamIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/teams/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsTeamIdGet');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling companyCompaniesIdTeamsTeamIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Company Team
     * @param id
     * @param teamId
     * @param operations
     */
    CompanyTeamsApi.prototype.companyCompaniesIdTeamsTeamIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/teams/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsTeamIdPatch');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling companyCompaniesIdTeamsTeamIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyCompaniesIdTeamsTeamIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Company Team
     * @param id
     * @param teamId
     * @param companyTeam
     */
    CompanyTeamsApi.prototype.companyCompaniesIdTeamsTeamIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/{id}/teams/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesIdTeamsTeamIdPut');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling companyCompaniesIdTeamsTeamIdPut');
        }
        // verify required parameter 'companyTeam' is set
        if (params.companyTeam == null) {
            throw new Error('Missing required parameter companyTeam when calling companyCompaniesIdTeamsTeamIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.companyTeam)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CompanyTeamsApi;
}());
exports.CompanyTeamsApi = CompanyTeamsApi;
//}
//export namespace  {
'use strict';
var CompanyTypesApi = (function () {
    function CompanyTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Company Types Count
     * @param conditions
     */
    CompanyTypesApi.prototype.companyCompaniesTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Company Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CompanyTypesApi.prototype.companyCompaniesTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Company Type By Id
     * @param id
     */
    CompanyTypesApi.prototype.companyCompaniesTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Company Type By Id
     * @param id
     */
    CompanyTypesApi.prototype.companyCompaniesTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Company Type
     * @param id
     * @param operations
     */
    CompanyTypesApi.prototype.companyCompaniesTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyCompaniesTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Company Type
     * @param id
     * @param companyType
     */
    CompanyTypesApi.prototype.companyCompaniesTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyCompaniesTypesIdPut');
        }
        // verify required parameter 'companyType' is set
        if (params.companyType == null) {
            throw new Error('Missing required parameter companyType when calling companyCompaniesTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.companyType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Company Type
     * @param companyType
     */
    CompanyTypesApi.prototype.companyCompaniesTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/companies/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'companyType' is set
        if (params.companyType == null) {
            throw new Error('Missing required parameter companyType when calling companyCompaniesTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.companyType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CompanyTypesApi;
}());
exports.CompanyTypesApi = CompanyTypesApi;
//}
//export namespace  {
'use strict';
var ConfigurationStatusesApi = (function () {
    function ConfigurationStatusesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Configuration Statuses Count
     * @param conditions
     */
    ConfigurationStatusesApi.prototype.companyConfigurationsStatusesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/statuses/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Configuration Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ConfigurationStatusesApi.prototype.companyConfigurationsStatusesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Configuration Status By Id
     * @param id
     */
    ConfigurationStatusesApi.prototype.companyConfigurationsStatusesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsStatusesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Configuration Status By Id
     * @param id
     */
    ConfigurationStatusesApi.prototype.companyConfigurationsStatusesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsStatusesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Configuration Status
     * @param id
     * @param operations
     */
    ConfigurationStatusesApi.prototype.companyConfigurationsStatusesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsStatusesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyConfigurationsStatusesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Configuration Status
     * @param id
     * @param configurationStatus
     */
    ConfigurationStatusesApi.prototype.companyConfigurationsStatusesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsStatusesIdPut');
        }
        // verify required parameter 'configurationStatus' is set
        if (params.configurationStatus == null) {
            throw new Error('Missing required parameter configurationStatus when calling companyConfigurationsStatusesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.configurationStatus)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Configuration Status
     * @param configurationStatus
     */
    ConfigurationStatusesApi.prototype.companyConfigurationsStatusesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'configurationStatus' is set
        if (params.configurationStatus == null) {
            throw new Error('Missing required parameter configurationStatus when calling companyConfigurationsStatusesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.configurationStatus)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ConfigurationStatusesApi;
}());
exports.ConfigurationStatusesApi = ConfigurationStatusesApi;
//}
//export namespace  {
'use strict';
var ConfigurationTypeQuestionsApi = (function () {
    function ConfigurationTypeQuestionsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Configuration Type Questions Count
     * @param id
     * @param conditions
     */
    ConfigurationTypeQuestionsApi.prototype.companyConfigurationsTypesIdQuestionsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/{id}/questions/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Configuration Type Questions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ConfigurationTypeQuestionsApi.prototype.companyConfigurationsTypesIdQuestionsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/{id}/questions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Configuration Type Question
     * @param id
     * @param configurationTypeQuestion
     */
    ConfigurationTypeQuestionsApi.prototype.companyConfigurationsTypesIdQuestionsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/{id}/questions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsPost');
        }
        // verify required parameter 'configurationTypeQuestion' is set
        if (params.configurationTypeQuestion == null) {
            throw new Error('Missing required parameter configurationTypeQuestion when calling companyConfigurationsTypesIdQuestionsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.configurationTypeQuestion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Configuration Type Question By Id
     * @param id
     * @param questionId
     */
    ConfigurationTypeQuestionsApi.prototype.companyConfigurationsTypesIdQuestionsQuestionIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/{id}/questions/{questionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'questionId' + '}', String(params.questionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsQuestionIdDelete');
        }
        // verify required parameter 'questionId' is set
        if (params.questionId == null) {
            throw new Error('Missing required parameter questionId when calling companyConfigurationsTypesIdQuestionsQuestionIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Configuration Type Question By Id
     * @param id
     * @param questionId
     */
    ConfigurationTypeQuestionsApi.prototype.companyConfigurationsTypesIdQuestionsQuestionIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/{id}/questions/{questionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'questionId' + '}', String(params.questionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsQuestionIdGet');
        }
        // verify required parameter 'questionId' is set
        if (params.questionId == null) {
            throw new Error('Missing required parameter questionId when calling companyConfigurationsTypesIdQuestionsQuestionIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Configuration Type Question
     * @param id
     * @param questionId
     * @param operations
     */
    ConfigurationTypeQuestionsApi.prototype.companyConfigurationsTypesIdQuestionsQuestionIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/{id}/questions/{questionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'questionId' + '}', String(params.questionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsQuestionIdPatch');
        }
        // verify required parameter 'questionId' is set
        if (params.questionId == null) {
            throw new Error('Missing required parameter questionId when calling companyConfigurationsTypesIdQuestionsQuestionIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyConfigurationsTypesIdQuestionsQuestionIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Configuration Type Question
     * @param id
     * @param questionId
     * @param configurationTypeQuestion
     */
    ConfigurationTypeQuestionsApi.prototype.companyConfigurationsTypesIdQuestionsQuestionIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/{id}/questions/{questionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'questionId' + '}', String(params.questionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdQuestionsQuestionIdPut');
        }
        // verify required parameter 'questionId' is set
        if (params.questionId == null) {
            throw new Error('Missing required parameter questionId when calling companyConfigurationsTypesIdQuestionsQuestionIdPut');
        }
        // verify required parameter 'configurationTypeQuestion' is set
        if (params.configurationTypeQuestion == null) {
            throw new Error('Missing required parameter configurationTypeQuestion when calling companyConfigurationsTypesIdQuestionsQuestionIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.configurationTypeQuestion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ConfigurationTypeQuestionsApi;
}());
exports.ConfigurationTypeQuestionsApi = ConfigurationTypeQuestionsApi;
//}
//export namespace  {
'use strict';
var ConfigurationTypesApi = (function () {
    function ConfigurationTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Configuration Types Count
     * @param conditions
     */
    ConfigurationTypesApi.prototype.companyConfigurationsTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Configuration Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ConfigurationTypesApi.prototype.companyConfigurationsTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Configuration Type By Id
     * @param id
     */
    ConfigurationTypesApi.prototype.companyConfigurationsTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Configuration Type By Id
     * @param id
     */
    ConfigurationTypesApi.prototype.companyConfigurationsTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Configuration Type
     * @param id
     * @param operations
     */
    ConfigurationTypesApi.prototype.companyConfigurationsTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyConfigurationsTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Configuration Type
     * @param id
     * @param configurationType
     */
    ConfigurationTypesApi.prototype.companyConfigurationsTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsTypesIdPut');
        }
        // verify required parameter 'configurationType' is set
        if (params.configurationType == null) {
            throw new Error('Missing required parameter configurationType when calling companyConfigurationsTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.configurationType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Configuration Type
     * @param configurationType
     */
    ConfigurationTypesApi.prototype.companyConfigurationsTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'configurationType' is set
        if (params.configurationType == null) {
            throw new Error('Missing required parameter configurationType when calling companyConfigurationsTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.configurationType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ConfigurationTypesApi;
}());
exports.ConfigurationTypesApi = ConfigurationTypesApi;
//}
//export namespace  {
'use strict';
var ConfigurationsApi = (function () {
    function ConfigurationsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Configurations Count
     * @param conditions
     * @param managedIdentifier
     */
    ConfigurationsApi.prototype.companyConfigurationsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.managedIdentifier !== undefined) {
            queryParameters['managedIdentifier'] = params.managedIdentifier;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Configurations
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     * @param managedIdentifier
     */
    ConfigurationsApi.prototype.companyConfigurationsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        if (params.managedIdentifier !== undefined) {
            queryParameters['managedIdentifier'] = params.managedIdentifier;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Configuration By Id
     * @param id
     */
    ConfigurationsApi.prototype.companyConfigurationsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Configuration By Id
     * @param id
     */
    ConfigurationsApi.prototype.companyConfigurationsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Configuration
     * @param id
     * @param operations
     * @param managementSolutionName
     * @param managedIdentifier
     * @param type
     * @param level
     * @param childConfigurationsMatchingOn
     * @param inactivateConfigurationsMatchingOn
     * @param inactiveConfigurationStatusId
     */
    ConfigurationsApi.prototype.companyConfigurationsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyConfigurationsIdPatch');
        }
        if (params.managementSolutionName !== undefined) {
            queryParameters['managementSolutionName'] = params.managementSolutionName;
        }
        if (params.managedIdentifier !== undefined) {
            queryParameters['managedIdentifier'] = params.managedIdentifier;
        }
        if (params.type !== undefined) {
            queryParameters['type'] = params.type;
        }
        if (params.level !== undefined) {
            queryParameters['level'] = params.level;
        }
        if (params.childConfigurationsMatchingOn !== undefined) {
            queryParameters['childConfigurationsMatchingOn'] = params.childConfigurationsMatchingOn;
        }
        if (params.inactivateConfigurationsMatchingOn !== undefined) {
            queryParameters['inactivateConfigurationsMatchingOn'] = params.inactivateConfigurationsMatchingOn;
        }
        if (params.inactiveConfigurationStatusId !== undefined) {
            queryParameters['inactiveConfigurationStatusId'] = params.inactiveConfigurationStatusId;
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Configuration
     * @param id
     * @param configuration
     * @param managementSolutionName
     * @param managedIdentifier
     * @param type
     * @param level
     * @param childConfigurationsMatchingOn
     * @param inactivateConfigurationsMatchingOn
     * @param inactiveConfigurationStatusId
     */
    ConfigurationsApi.prototype.companyConfigurationsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyConfigurationsIdPut');
        }
        // verify required parameter 'configuration' is set
        if (params.configuration == null) {
            throw new Error('Missing required parameter configuration when calling companyConfigurationsIdPut');
        }
        if (params.managementSolutionName !== undefined) {
            queryParameters['managementSolutionName'] = params.managementSolutionName;
        }
        if (params.managedIdentifier !== undefined) {
            queryParameters['managedIdentifier'] = params.managedIdentifier;
        }
        if (params.type !== undefined) {
            queryParameters['type'] = params.type;
        }
        if (params.level !== undefined) {
            queryParameters['level'] = params.level;
        }
        if (params.childConfigurationsMatchingOn !== undefined) {
            queryParameters['childConfigurationsMatchingOn'] = params.childConfigurationsMatchingOn;
        }
        if (params.inactivateConfigurationsMatchingOn !== undefined) {
            queryParameters['inactivateConfigurationsMatchingOn'] = params.inactivateConfigurationsMatchingOn;
        }
        if (params.inactiveConfigurationStatusId !== undefined) {
            queryParameters['inactiveConfigurationStatusId'] = params.inactiveConfigurationStatusId;
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.configuration)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Configuration
     * @param configuration
     * @param managementSolutionName
     * @param managedIdentifier
     * @param type
     * @param level
     * @param childConfigurationsMatchingOn
     * @param inactivateConfigurationsMatchingOn
     * @param inactiveConfigurationStatusId
     */
    ConfigurationsApi.prototype.companyConfigurationsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/configurations';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'configuration' is set
        if (params.configuration == null) {
            throw new Error('Missing required parameter configuration when calling companyConfigurationsPost');
        }
        if (params.managementSolutionName !== undefined) {
            queryParameters['managementSolutionName'] = params.managementSolutionName;
        }
        if (params.managedIdentifier !== undefined) {
            queryParameters['managedIdentifier'] = params.managedIdentifier;
        }
        if (params.type !== undefined) {
            queryParameters['type'] = params.type;
        }
        if (params.level !== undefined) {
            queryParameters['level'] = params.level;
        }
        if (params.childConfigurationsMatchingOn !== undefined) {
            queryParameters['childConfigurationsMatchingOn'] = params.childConfigurationsMatchingOn;
        }
        if (params.inactivateConfigurationsMatchingOn !== undefined) {
            queryParameters['inactivateConfigurationsMatchingOn'] = params.inactivateConfigurationsMatchingOn;
        }
        if (params.inactiveConfigurationStatusId !== undefined) {
            queryParameters['inactiveConfigurationStatusId'] = params.inactiveConfigurationStatusId;
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.configuration)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ConfigurationsApi;
}());
exports.ConfigurationsApi = ConfigurationsApi;
//}
//export namespace  {
'use strict';
var ConnectWiseHostedSetupsApi = (function () {
    function ConnectWiseHostedSetupsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Connect Wise Hosted Setups Count
     * @param conditions
     */
    ConnectWiseHostedSetupsApi.prototype.systemConnectwisehostedsetupsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/connectwisehostedsetups/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Connect Wise Hosted Setups
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ConnectWiseHostedSetupsApi.prototype.systemConnectwisehostedsetupsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/connectwisehostedsetups';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Connect Wise Hosted Setup By Id
     * @param id
     */
    ConnectWiseHostedSetupsApi.prototype.systemConnectwisehostedsetupsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/connectwisehostedsetups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemConnectwisehostedsetupsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Connect Wise Hosted Setup By Id
     * @param id
     */
    ConnectWiseHostedSetupsApi.prototype.systemConnectwisehostedsetupsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/connectwisehostedsetups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemConnectwisehostedsetupsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Connect Wise Hosted Setup
     * @param id
     * @param operations
     */
    ConnectWiseHostedSetupsApi.prototype.systemConnectwisehostedsetupsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/connectwisehostedsetups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemConnectwisehostedsetupsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemConnectwisehostedsetupsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Connect Wise Hosted Setup
     * @param id
     * @param connectWiseHostedSetup
     */
    ConnectWiseHostedSetupsApi.prototype.systemConnectwisehostedsetupsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/connectwisehostedsetups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemConnectwisehostedsetupsIdPut');
        }
        // verify required parameter 'connectWiseHostedSetup' is set
        if (params.connectWiseHostedSetup == null) {
            throw new Error('Missing required parameter connectWiseHostedSetup when calling systemConnectwisehostedsetupsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.connectWiseHostedSetup)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Connect Wise Hosted Setup
     * @param connectWiseHostedSetup
     */
    ConnectWiseHostedSetupsApi.prototype.systemConnectwisehostedsetupsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/connectwisehostedsetups';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'connectWiseHostedSetup' is set
        if (params.connectWiseHostedSetup == null) {
            throw new Error('Missing required parameter connectWiseHostedSetup when calling systemConnectwisehostedsetupsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.connectWiseHostedSetup)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ConnectWiseHostedSetupsApi;
}());
exports.ConnectWiseHostedSetupsApi = ConnectWiseHostedSetupsApi;
//}
//export namespace  {
'use strict';
var ContactCommunicationsApi = (function () {
    function ContactCommunicationsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Contact Communication By Id
     * @param id
     * @param communicationId
     */
    ContactCommunicationsApi.prototype.companyContactsIdCommunicationsCommunicationIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/communications/{communicationId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'communicationId' + '}', String(params.communicationId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsCommunicationIdDelete');
        }
        // verify required parameter 'communicationId' is set
        if (params.communicationId == null) {
            throw new Error('Missing required parameter communicationId when calling companyContactsIdCommunicationsCommunicationIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Communication By Id
     * @param id
     * @param communicationId
     */
    ContactCommunicationsApi.prototype.companyContactsIdCommunicationsCommunicationIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/communications/{communicationId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'communicationId' + '}', String(params.communicationId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsCommunicationIdGet');
        }
        // verify required parameter 'communicationId' is set
        if (params.communicationId == null) {
            throw new Error('Missing required parameter communicationId when calling companyContactsIdCommunicationsCommunicationIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Contact Communication
     * @param id
     * @param communicationId
     * @param operations
     */
    ContactCommunicationsApi.prototype.companyContactsIdCommunicationsCommunicationIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/communications/{communicationId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'communicationId' + '}', String(params.communicationId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsCommunicationIdPatch');
        }
        // verify required parameter 'communicationId' is set
        if (params.communicationId == null) {
            throw new Error('Missing required parameter communicationId when calling companyContactsIdCommunicationsCommunicationIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyContactsIdCommunicationsCommunicationIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Contact Communication
     * @param id
     * @param communicationId
     * @param contactCommunication
     */
    ContactCommunicationsApi.prototype.companyContactsIdCommunicationsCommunicationIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/communications/{communicationId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'communicationId' + '}', String(params.communicationId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsCommunicationIdPut');
        }
        // verify required parameter 'communicationId' is set
        if (params.communicationId == null) {
            throw new Error('Missing required parameter communicationId when calling companyContactsIdCommunicationsCommunicationIdPut');
        }
        // verify required parameter 'contactCommunication' is set
        if (params.contactCommunication == null) {
            throw new Error('Missing required parameter contactCommunication when calling companyContactsIdCommunicationsCommunicationIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.contactCommunication)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Communications Count
     * @param id
     * @param conditions
     */
    ContactCommunicationsApi.prototype.companyContactsIdCommunicationsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/communications/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Communications
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ContactCommunicationsApi.prototype.companyContactsIdCommunicationsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/communications'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Contact Communication
     * @param id
     * @param contactCommunication
     */
    ContactCommunicationsApi.prototype.companyContactsIdCommunicationsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/communications'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdCommunicationsPost');
        }
        // verify required parameter 'contactCommunication' is set
        if (params.contactCommunication == null) {
            throw new Error('Missing required parameter contactCommunication when calling companyContactsIdCommunicationsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.contactCommunication)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ContactCommunicationsApi;
}());
exports.ContactCommunicationsApi = ContactCommunicationsApi;
//}
//export namespace  {
'use strict';
var ContactDepartmentsApi = (function () {
    function ContactDepartmentsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Contact Departments Count
     * @param conditions
     */
    ContactDepartmentsApi.prototype.companyContactsDepartmentsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/departments/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Departments
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ContactDepartmentsApi.prototype.companyContactsDepartmentsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/departments';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Contact Department By Id
     * @param id
     */
    ContactDepartmentsApi.prototype.companyContactsDepartmentsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/departments/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsDepartmentsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Department By Id
     * @param id
     */
    ContactDepartmentsApi.prototype.companyContactsDepartmentsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/departments/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsDepartmentsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Contact Department
     * @param id
     * @param operations
     */
    ContactDepartmentsApi.prototype.companyContactsDepartmentsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/departments/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsDepartmentsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyContactsDepartmentsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Contact Department
     * @param id
     * @param contactDepartment
     */
    ContactDepartmentsApi.prototype.companyContactsDepartmentsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/departments/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsDepartmentsIdPut');
        }
        // verify required parameter 'contactDepartment' is set
        if (params.contactDepartment == null) {
            throw new Error('Missing required parameter contactDepartment when calling companyContactsDepartmentsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.contactDepartment)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Contact Department
     * @param contactDepartment
     */
    ContactDepartmentsApi.prototype.companyContactsDepartmentsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/departments';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'contactDepartment' is set
        if (params.contactDepartment == null) {
            throw new Error('Missing required parameter contactDepartment when calling companyContactsDepartmentsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.contactDepartment)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ContactDepartmentsApi;
}());
exports.ContactDepartmentsApi = ContactDepartmentsApi;
//}
//export namespace  {
'use strict';
var ContactNotesApi = (function () {
    function ContactNotesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Contact Notes Count
     * @param id
     * @param conditions
     */
    ContactNotesApi.prototype.companyContactsIdNotesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/notes/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdNotesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Notes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ContactNotesApi.prototype.companyContactsIdNotesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/notes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdNotesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Contact Note By Id
     * @param id
     * @param noteId
     */
    ContactNotesApi.prototype.companyContactsIdNotesNoteIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdNotesNoteIdDelete');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling companyContactsIdNotesNoteIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Note By Id
     * @param id
     * @param noteId
     */
    ContactNotesApi.prototype.companyContactsIdNotesNoteIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdNotesNoteIdGet');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling companyContactsIdNotesNoteIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Contact Note
     * @param id
     * @param noteId
     * @param operations
     */
    ContactNotesApi.prototype.companyContactsIdNotesNoteIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdNotesNoteIdPatch');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling companyContactsIdNotesNoteIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyContactsIdNotesNoteIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Contact Note
     * @param id
     * @param noteId
     * @param contactNote
     */
    ContactNotesApi.prototype.companyContactsIdNotesNoteIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdNotesNoteIdPut');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling companyContactsIdNotesNoteIdPut');
        }
        // verify required parameter 'contactNote' is set
        if (params.contactNote == null) {
            throw new Error('Missing required parameter contactNote when calling companyContactsIdNotesNoteIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.contactNote)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Contact Note
     * @param id
     * @param contactNote
     */
    ContactNotesApi.prototype.companyContactsIdNotesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/notes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdNotesPost');
        }
        // verify required parameter 'contactNote' is set
        if (params.contactNote == null) {
            throw new Error('Missing required parameter contactNote when calling companyContactsIdNotesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.contactNote)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ContactNotesApi;
}());
exports.ContactNotesApi = ContactNotesApi;
//}
//export namespace  {
'use strict';
var ContactRelationshipsApi = (function () {
    function ContactRelationshipsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Contact Relationships Count
     * @param conditions
     */
    ContactRelationshipsApi.prototype.companyContactsRelationshipsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/relationships/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Relationships
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ContactRelationshipsApi.prototype.companyContactsRelationshipsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/relationships';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Contact Relationship By Id
     * @param id
     */
    ContactRelationshipsApi.prototype.companyContactsRelationshipsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/relationships/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsRelationshipsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Relationship By Id
     * @param id
     */
    ContactRelationshipsApi.prototype.companyContactsRelationshipsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/relationships/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsRelationshipsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Contact Relationship
     * @param id
     * @param operations
     */
    ContactRelationshipsApi.prototype.companyContactsRelationshipsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/relationships/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsRelationshipsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyContactsRelationshipsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Contact Relationship
     * @param id
     * @param contactRelationship
     */
    ContactRelationshipsApi.prototype.companyContactsRelationshipsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/relationships/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsRelationshipsIdPut');
        }
        // verify required parameter 'contactRelationship' is set
        if (params.contactRelationship == null) {
            throw new Error('Missing required parameter contactRelationship when calling companyContactsRelationshipsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.contactRelationship)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Contact Relationship
     * @param contactRelationship
     */
    ContactRelationshipsApi.prototype.companyContactsRelationshipsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/relationships';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'contactRelationship' is set
        if (params.contactRelationship == null) {
            throw new Error('Missing required parameter contactRelationship when calling companyContactsRelationshipsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.contactRelationship)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ContactRelationshipsApi;
}());
exports.ContactRelationshipsApi = ContactRelationshipsApi;
//}
//export namespace  {
'use strict';
var ContactTracksApi = (function () {
    function ContactTracksApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Tracks Count
     * @param id
     * @param conditions
     */
    ContactTracksApi.prototype.companyContactsIdTracksCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/tracks/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdTracksCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Tracks
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ContactTracksApi.prototype.companyContactsIdTracksGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/tracks'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdTracksGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Track
     * @param id
     * @param track
     */
    ContactTracksApi.prototype.companyContactsIdTracksPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/tracks'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdTracksPost');
        }
        // verify required parameter 'track' is set
        if (params.track == null) {
            throw new Error('Missing required parameter track when calling companyContactsIdTracksPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.track)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Track By Id
     * @param id
     * @param trackId
     */
    ContactTracksApi.prototype.companyContactsIdTracksTrackIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/tracks/{trackId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'trackId' + '}', String(params.trackId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdTracksTrackIdDelete');
        }
        // verify required parameter 'trackId' is set
        if (params.trackId == null) {
            throw new Error('Missing required parameter trackId when calling companyContactsIdTracksTrackIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Track By Id
     * @param id
     * @param trackId
     */
    ContactTracksApi.prototype.companyContactsIdTracksTrackIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/tracks/{trackId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'trackId' + '}', String(params.trackId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdTracksTrackIdGet');
        }
        // verify required parameter 'trackId' is set
        if (params.trackId == null) {
            throw new Error('Missing required parameter trackId when calling companyContactsIdTracksTrackIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ContactTracksApi;
}());
exports.ContactTracksApi = ContactTracksApi;
//}
//export namespace  {
'use strict';
var ContactTypesApi = (function () {
    function ContactTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Contact Types Count
     * @param conditions
     */
    ContactTypesApi.prototype.companyContactsTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ContactTypesApi.prototype.companyContactsTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Contact Type By Id
     * @param id
     */
    ContactTypesApi.prototype.companyContactsTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Type By Id
     * @param id
     */
    ContactTypesApi.prototype.companyContactsTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Contact Type
     * @param id
     * @param operations
     */
    ContactTypesApi.prototype.companyContactsTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyContactsTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Contact Type
     * @param id
     * @param contactType
     */
    ContactTypesApi.prototype.companyContactsTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsTypesIdPut');
        }
        // verify required parameter 'contactType' is set
        if (params.contactType == null) {
            throw new Error('Missing required parameter contactType when calling companyContactsTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.contactType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Contact Type
     * @param contactType
     */
    ContactTypesApi.prototype.companyContactsTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'contactType' is set
        if (params.contactType == null) {
            throw new Error('Missing required parameter contactType when calling companyContactsTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.contactType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ContactTypesApi;
}());
exports.ContactTypesApi = ContactTypesApi;
//}
//export namespace  {
'use strict';
var ContactsApi = (function () {
    function ContactsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Contacts Count
     * @param conditions
     * @param customFieldConditions
     * @param childConditions
     */
    ContactsApi.prototype.companyContactsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        if (params.childConditions !== undefined) {
            queryParameters['childConditions'] = params.childConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contacts
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ContactsApi.prototype.companyContactsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Contact By Id
     * @param id
     * @param transferContactId
     */
    ContactsApi.prototype.companyContactsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdDelete');
        }
        if (params.transferContactId !== undefined) {
            queryParameters['transferContactId'] = params.transferContactId;
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact By Id
     * @param id
     */
    ContactsApi.prototype.companyContactsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Contact Image
     * @param id
     * @param useDefaultFlag
     * @param lastModified
     */
    ContactsApi.prototype.companyContactsIdImageGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/image'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdImageGet');
        }
        if (params.useDefaultFlag !== undefined) {
            queryParameters['useDefaultFlag'] = params.useDefaultFlag;
        }
        if (params.lastModified !== undefined) {
            queryParameters['lastModified'] = params.lastModified;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Contact
     * @param id
     * @param operations
     */
    ContactsApi.prototype.companyContactsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyContactsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Portal Security
     * @param id
     */
    ContactsApi.prototype.companyContactsIdPortalSecurityGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}/portalSecurity'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdPortalSecurityGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Contact
     * @param id
     * @param contact
     */
    ContactsApi.prototype.companyContactsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyContactsIdPut');
        }
        // verify required parameter 'contact' is set
        if (params.contact == null) {
            throw new Error('Missing required parameter contact when calling companyContactsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.contact)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Contact
     * @param contact
     */
    ContactsApi.prototype.companyContactsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'contact' is set
        if (params.contact == null) {
            throw new Error('Missing required parameter contact when calling companyContactsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.contact)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Request Password
     * @param request
     */
    ContactsApi.prototype.companyContactsRequestPasswordPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/requestPassword';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'request' is set
        if (params.request == null) {
            throw new Error('Missing required parameter request when calling companyContactsRequestPasswordPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.request)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Validate Portal Credentials
     * @param request
     */
    ContactsApi.prototype.companyContactsValidatePortalCredentialsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/contacts/validatePortalCredentials';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'request' is set
        if (params.request == null) {
            throw new Error('Missing required parameter request when calling companyContactsValidatePortalCredentialsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.request)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ContactsApi;
}());
exports.ContactsApi = ContactsApi;
//}
//export namespace  {
'use strict';
var CurrenciesApi = (function () {
    function CurrenciesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Currencies Count
     * @param conditions
     */
    CurrenciesApi.prototype.financeCurrenciesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/currencies/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Currencies
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    CurrenciesApi.prototype.financeCurrenciesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/currencies';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Currency By Id
     * @param id
     */
    CurrenciesApi.prototype.financeCurrenciesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/currencies/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeCurrenciesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Currency By Id
     * @param id
     */
    CurrenciesApi.prototype.financeCurrenciesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/currencies/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeCurrenciesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Currency
     * @param id
     * @param operations
     */
    CurrenciesApi.prototype.financeCurrenciesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/currencies/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeCurrenciesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeCurrenciesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Currency
     * @param id
     * @param currency
     */
    CurrenciesApi.prototype.financeCurrenciesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/currencies/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeCurrenciesIdPut');
        }
        // verify required parameter 'currency' is set
        if (params.currency == null) {
            throw new Error('Missing required parameter currency when calling financeCurrenciesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.currency)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Currency
     * @param currency
     */
    CurrenciesApi.prototype.financeCurrenciesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/currencies';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'currency' is set
        if (params.currency == null) {
            throw new Error('Missing required parameter currency when calling financeCurrenciesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.currency)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return CurrenciesApi;
}());
exports.CurrenciesApi = CurrenciesApi;
//}
//export namespace  {
'use strict';
var DocumentsApi = (function () {
    function DocumentsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Documents Info Count
     * @param recordType
     * @param recordId
     */
    DocumentsApi.prototype.systemDocumentsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/documents/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.recordType !== undefined) {
            queryParameters['recordType'] = params.recordType;
        }
        if (params.recordId !== undefined) {
            queryParameters['recordId'] = params.recordId;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Documents Info
     * @param recordType
     * @param recordId
     * @param page
     * @param pageSize
     */
    DocumentsApi.prototype.systemDocumentsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/documents';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.recordType !== undefined) {
            queryParameters['recordType'] = params.recordType;
        }
        if (params.recordId !== undefined) {
            queryParameters['recordId'] = params.recordId;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Document Info By Id
     * @param id
     */
    DocumentsApi.prototype.systemDocumentsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/documents/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemDocumentsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Download Document
     * @param id
     * @param lastModified
     */
    DocumentsApi.prototype.systemDocumentsIdDownloadGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/documents/{id}/download'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemDocumentsIdDownloadGet');
        }
        if (params.lastModified !== undefined) {
            queryParameters['lastModified'] = params.lastModified;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Document Info By Id
     * @param id
     */
    DocumentsApi.prototype.systemDocumentsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/documents/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemDocumentsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Document By Id
     * @param id
     * @param recordId Entity id
     * @param recordType Entity type
     * @param title Document title
     * @param url Document url
     * @param file File to upload
     * @param privateFlag Indicates if document is private
     * @param readOnlyFlag Indicates if document is readonly
     */
    DocumentsApi.prototype.systemDocumentsIdPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/documents/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        var formParams = {};
        headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemDocumentsIdPost');
        }
        // verify required parameter 'recordId' is set
        if (params.recordId == null) {
            throw new Error('Missing required parameter recordId when calling systemDocumentsIdPost');
        }
        // verify required parameter 'recordType' is set
        if (params.recordType == null) {
            throw new Error('Missing required parameter recordType when calling systemDocumentsIdPost');
        }
        // verify required parameter 'title' is set
        if (params.title == null) {
            throw new Error('Missing required parameter title when calling systemDocumentsIdPost');
        }
        // verify required parameter 'url' is set
        if (params.url == null) {
            throw new Error('Missing required parameter url when calling systemDocumentsIdPost');
        }
        formParams['file'] = params.file;
        formParams['recordId'] = params.recordId;
        formParams['recordType'] = params.recordType;
        formParams['title'] = params.title;
        formParams['url'] = params.url;
        formParams['privateFlag'] = params.privateFlag;
        formParams['readOnlyFlag'] = params.readOnlyFlag;
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: querystring.stringify(formParams)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Insert Document
     * @param recordType Entity type
     * @param title Document title
     * @param url Document url
     * @param file File to upload
     * @param recordId Entity id
     * @param privateFlag Indicates if document is private
     * @param readOnlyFlag Indicates if document is readonly
     */
    DocumentsApi.prototype.systemDocumentsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/documents';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        var formParams = {};
        headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
        // verify required parameter 'recordType' is set
        if (params.recordType == null) {
            throw new Error('Missing required parameter recordType when calling systemDocumentsPost');
        }
        // verify required parameter 'title' is set
        if (params.title == null) {
            throw new Error('Missing required parameter title when calling systemDocumentsPost');
        }
        // verify required parameter 'url' is set
        if (params.url == null) {
            throw new Error('Missing required parameter url when calling systemDocumentsPost');
        }
        formParams['file'] = params.file;
        formParams['recordId'] = params.recordId;
        formParams['recordType'] = params.recordType;
        formParams['title'] = params.title;
        formParams['url'] = params.url;
        formParams['privateFlag'] = params.privateFlag;
        formParams['readOnlyFlag'] = params.readOnlyFlag;
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: querystring.stringify(formParams)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Upload Sample Page
     */
    DocumentsApi.prototype.systemDocumentsUploadsampleGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/documents/uploadsample';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return DocumentsApi;
}());
exports.DocumentsApi = DocumentsApi;
//}
//export namespace  {
'use strict';
var ExpenseEntriesApi = (function () {
    function ExpenseEntriesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Expense Entries Count
     * @param conditions
     * @param customFieldConditions
     * @param childConditions
     */
    ExpenseEntriesApi.prototype.expenseEntriesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/entries/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        if (params.childConditions !== undefined) {
            queryParameters['childConditions'] = params.childConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Expense Entries
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ExpenseEntriesApi.prototype.expenseEntriesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/entries';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Expense Entry By Id
     * @param id
     */
    ExpenseEntriesApi.prototype.expenseEntriesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling expenseEntriesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Expense Entry By Id
     * @param id
     */
    ExpenseEntriesApi.prototype.expenseEntriesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling expenseEntriesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Expense Entry
     * @param id
     * @param operations
     */
    ExpenseEntriesApi.prototype.expenseEntriesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling expenseEntriesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling expenseEntriesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Expense Entry
     * @param id
     * @param expenseEntry
     */
    ExpenseEntriesApi.prototype.expenseEntriesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling expenseEntriesIdPut');
        }
        // verify required parameter 'expenseEntry' is set
        if (params.expenseEntry == null) {
            throw new Error('Missing required parameter expenseEntry when calling expenseEntriesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.expenseEntry)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Expense Entry
     * @param expenseEntry
     */
    ExpenseEntriesApi.prototype.expenseEntriesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/entries';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'expenseEntry' is set
        if (params.expenseEntry == null) {
            throw new Error('Missing required parameter expenseEntry when calling expenseEntriesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.expenseEntry)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ExpenseEntriesApi;
}());
exports.ExpenseEntriesApi = ExpenseEntriesApi;
//}
//export namespace  {
'use strict';
var ExpenseTypesApi = (function () {
    function ExpenseTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Expense Types Count
     * @param conditions
     */
    ExpenseTypesApi.prototype.expenseTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Expense Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ExpenseTypesApi.prototype.expenseTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Expense Type By Id
     * @param id
     */
    ExpenseTypesApi.prototype.expenseTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling expenseTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Expense Type By Id
     * @param id
     */
    ExpenseTypesApi.prototype.expenseTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling expenseTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Expense Type
     * @param id
     * @param operations
     */
    ExpenseTypesApi.prototype.expenseTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling expenseTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling expenseTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Expense Type
     * @param id
     * @param expenseType
     */
    ExpenseTypesApi.prototype.expenseTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling expenseTypesIdPut');
        }
        // verify required parameter 'expenseType' is set
        if (params.expenseType == null) {
            throw new Error('Missing required parameter expenseType when calling expenseTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.expenseType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Expense Type
     * @param expenseType
     */
    ExpenseTypesApi.prototype.expenseTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/expense/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'expenseType' is set
        if (params.expenseType == null) {
            throw new Error('Missing required parameter expenseType when calling expenseTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.expenseType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ExpenseTypesApi;
}());
exports.ExpenseTypesApi = ExpenseTypesApi;
//}
//export namespace  {
'use strict';
var GroupCompaniesApi = (function () {
    function GroupCompaniesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Marketing Company By Id
     * @param id
     * @param companyId
     */
    GroupCompaniesApi.prototype.marketingGroupsIdCompaniesCompanyIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/companies/{companyId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'companyId' + '}', String(params.companyId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesCompanyIdDelete');
        }
        // verify required parameter 'companyId' is set
        if (params.companyId == null) {
            throw new Error('Missing required parameter companyId when calling marketingGroupsIdCompaniesCompanyIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Marketing Company By Id
     * @param id
     * @param companyId
     */
    GroupCompaniesApi.prototype.marketingGroupsIdCompaniesCompanyIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/companies/{companyId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'companyId' + '}', String(params.companyId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesCompanyIdGet');
        }
        // verify required parameter 'companyId' is set
        if (params.companyId == null) {
            throw new Error('Missing required parameter companyId when calling marketingGroupsIdCompaniesCompanyIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Marketing Company
     * @param id
     * @param companyId
     * @param operations
     */
    GroupCompaniesApi.prototype.marketingGroupsIdCompaniesCompanyIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/companies/{companyId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'companyId' + '}', String(params.companyId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesCompanyIdPatch');
        }
        // verify required parameter 'companyId' is set
        if (params.companyId == null) {
            throw new Error('Missing required parameter companyId when calling marketingGroupsIdCompaniesCompanyIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling marketingGroupsIdCompaniesCompanyIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Marketing Company
     * @param id
     * @param companyId
     * @param marketingCompany
     */
    GroupCompaniesApi.prototype.marketingGroupsIdCompaniesCompanyIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/companies/{companyId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'companyId' + '}', String(params.companyId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesCompanyIdPut');
        }
        // verify required parameter 'companyId' is set
        if (params.companyId == null) {
            throw new Error('Missing required parameter companyId when calling marketingGroupsIdCompaniesCompanyIdPut');
        }
        // verify required parameter 'marketingCompany' is set
        if (params.marketingCompany == null) {
            throw new Error('Missing required parameter marketingCompany when calling marketingGroupsIdCompaniesCompanyIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.marketingCompany)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Marketing Companys Count
     * @param id
     * @param conditions
     */
    GroupCompaniesApi.prototype.marketingGroupsIdCompaniesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/companies/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Marketing Companys
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    GroupCompaniesApi.prototype.marketingGroupsIdCompaniesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/companies'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Marketing Company
     * @param id
     * @param marketingCompany
     */
    GroupCompaniesApi.prototype.marketingGroupsIdCompaniesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/companies'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdCompaniesPost');
        }
        // verify required parameter 'marketingCompany' is set
        if (params.marketingCompany == null) {
            throw new Error('Missing required parameter marketingCompany when calling marketingGroupsIdCompaniesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.marketingCompany)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return GroupCompaniesApi;
}());
exports.GroupCompaniesApi = GroupCompaniesApi;
//}
//export namespace  {
'use strict';
var GroupContactsApi = (function () {
    function GroupContactsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Marketing Contact By Id
     * @param id
     * @param contactId
     */
    GroupContactsApi.prototype.marketingGroupsIdContactsContactIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/contacts/{contactId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'contactId' + '}', String(params.contactId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdContactsContactIdDelete');
        }
        // verify required parameter 'contactId' is set
        if (params.contactId == null) {
            throw new Error('Missing required parameter contactId when calling marketingGroupsIdContactsContactIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Marketing Contact By Id
     * @param id
     * @param contactId
     */
    GroupContactsApi.prototype.marketingGroupsIdContactsContactIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/contacts/{contactId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'contactId' + '}', String(params.contactId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdContactsContactIdGet');
        }
        // verify required parameter 'contactId' is set
        if (params.contactId == null) {
            throw new Error('Missing required parameter contactId when calling marketingGroupsIdContactsContactIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Marketing Contact
     * @param id
     * @param contactId
     * @param operations
     */
    GroupContactsApi.prototype.marketingGroupsIdContactsContactIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/contacts/{contactId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'contactId' + '}', String(params.contactId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdContactsContactIdPatch');
        }
        // verify required parameter 'contactId' is set
        if (params.contactId == null) {
            throw new Error('Missing required parameter contactId when calling marketingGroupsIdContactsContactIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling marketingGroupsIdContactsContactIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Marketing Contact
     * @param id
     * @param contactId
     * @param marketingContact
     */
    GroupContactsApi.prototype.marketingGroupsIdContactsContactIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/contacts/{contactId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'contactId' + '}', String(params.contactId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdContactsContactIdPut');
        }
        // verify required parameter 'contactId' is set
        if (params.contactId == null) {
            throw new Error('Missing required parameter contactId when calling marketingGroupsIdContactsContactIdPut');
        }
        // verify required parameter 'marketingContact' is set
        if (params.marketingContact == null) {
            throw new Error('Missing required parameter marketingContact when calling marketingGroupsIdContactsContactIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.marketingContact)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Marketing Contacts Count
     * @param id
     * @param conditions
     */
    GroupContactsApi.prototype.marketingGroupsIdContactsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/contacts/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdContactsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Marketing Contacts
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    GroupContactsApi.prototype.marketingGroupsIdContactsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/contacts'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdContactsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Marketing Contact
     * @param id
     * @param marketingContact
     */
    GroupContactsApi.prototype.marketingGroupsIdContactsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}/contacts'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdContactsPost');
        }
        // verify required parameter 'marketingContact' is set
        if (params.marketingContact == null) {
            throw new Error('Missing required parameter marketingContact when calling marketingGroupsIdContactsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.marketingContact)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return GroupContactsApi;
}());
exports.GroupContactsApi = GroupContactsApi;
//}
//export namespace  {
'use strict';
var GroupsApi = (function () {
    function GroupsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Groups Count
     * @param conditions
     */
    GroupsApi.prototype.marketingGroupsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Groups
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    GroupsApi.prototype.marketingGroupsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Group By Id
     * @param id
     */
    GroupsApi.prototype.marketingGroupsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Group By Id
     * @param id
     */
    GroupsApi.prototype.marketingGroupsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Group
     * @param id
     * @param operations
     */
    GroupsApi.prototype.marketingGroupsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling marketingGroupsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Group
     * @param id
     * @param group
     */
    GroupsApi.prototype.marketingGroupsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling marketingGroupsIdPut');
        }
        // verify required parameter 'group' is set
        if (params.group == null) {
            throw new Error('Missing required parameter group when calling marketingGroupsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.group)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Group
     * @param group
     */
    GroupsApi.prototype.marketingGroupsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/marketing/groups';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'group' is set
        if (params.group == null) {
            throw new Error('Missing required parameter group when calling marketingGroupsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.group)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return GroupsApi;
}());
exports.GroupsApi = GroupsApi;
//}
//export namespace  {
'use strict';
var InOutBoardsApi = (function () {
    function InOutBoardsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get In Out Board Count
     * @param conditions
     */
    InOutBoardsApi.prototype.systemInOutBoardsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutBoards/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get In Out Board
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    InOutBoardsApi.prototype.systemInOutBoardsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutBoards';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete In Out Board By Id
     * @param id
     */
    InOutBoardsApi.prototype.systemInOutBoardsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutBoards/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemInOutBoardsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get In Out Board By Id
     * @param id
     */
    InOutBoardsApi.prototype.systemInOutBoardsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutBoards/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemInOutBoardsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update In Out Board
     * @param id
     * @param operations
     */
    InOutBoardsApi.prototype.systemInOutBoardsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutBoards/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemInOutBoardsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemInOutBoardsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace In Out Board
     * @param id
     * @param inOutBoard
     */
    InOutBoardsApi.prototype.systemInOutBoardsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutBoards/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemInOutBoardsIdPut');
        }
        // verify required parameter 'inOutBoard' is set
        if (params.inOutBoard == null) {
            throw new Error('Missing required parameter inOutBoard when calling systemInOutBoardsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.inOutBoard)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create In Out Board
     * @param inOutBoard
     */
    InOutBoardsApi.prototype.systemInOutBoardsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutBoards';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'inOutBoard' is set
        if (params.inOutBoard == null) {
            throw new Error('Missing required parameter inOutBoard when calling systemInOutBoardsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.inOutBoard)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return InOutBoardsApi;
}());
exports.InOutBoardsApi = InOutBoardsApi;
//}
//export namespace  {
'use strict';
var InOutTypesApi = (function () {
    function InOutTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get In Out Type Count
     * @param conditions
     */
    InOutTypesApi.prototype.systemInOutTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutTypes/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get In Out Type
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    InOutTypesApi.prototype.systemInOutTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutTypes';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete In Out Type By Id
     * @param id
     */
    InOutTypesApi.prototype.systemInOutTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemInOutTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get In Out Type By Id
     * @param id
     */
    InOutTypesApi.prototype.systemInOutTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemInOutTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update In Out Type
     * @param id
     * @param operations
     */
    InOutTypesApi.prototype.systemInOutTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemInOutTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemInOutTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace In Out Type
     * @param id
     * @param inOutType
     */
    InOutTypesApi.prototype.systemInOutTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemInOutTypesIdPut');
        }
        // verify required parameter 'inOutType' is set
        if (params.inOutType == null) {
            throw new Error('Missing required parameter inOutType when calling systemInOutTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.inOutType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create In Out Type
     * @param inOutType
     */
    InOutTypesApi.prototype.systemInOutTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/inOutTypes';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'inOutType' is set
        if (params.inOutType == null) {
            throw new Error('Missing required parameter inOutType when calling systemInOutTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.inOutType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return InOutTypesApi;
}());
exports.InOutTypesApi = InOutTypesApi;
//}
//export namespace  {
'use strict';
var InfoApi = (function () {
    function InfoApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Infos
     */
    InfoApi.prototype.systemInfoGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/info';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return InfoApi;
}());
exports.InfoApi = InfoApi;
//}
//export namespace  {
'use strict';
var InvoicePaymentsApi = (function () {
    function InvoicePaymentsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Payments
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    InvoicePaymentsApi.prototype.financeInvoicesIdPaymentsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/{id}/payments'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Payment By Id
     * @param id
     * @param paymentId
     */
    InvoicePaymentsApi.prototype.financeInvoicesIdPaymentsPaymentIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/{id}/payments/{paymentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'paymentId' + '}', String(params.paymentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsPaymentIdDelete');
        }
        // verify required parameter 'paymentId' is set
        if (params.paymentId == null) {
            throw new Error('Missing required parameter paymentId when calling financeInvoicesIdPaymentsPaymentIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Payment By Id
     * @param id
     * @param paymentId
     */
    InvoicePaymentsApi.prototype.financeInvoicesIdPaymentsPaymentIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/{id}/payments/{paymentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'paymentId' + '}', String(params.paymentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsPaymentIdGet');
        }
        // verify required parameter 'paymentId' is set
        if (params.paymentId == null) {
            throw new Error('Missing required parameter paymentId when calling financeInvoicesIdPaymentsPaymentIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Payment
     * @param id
     * @param paymentId
     * @param operations
     */
    InvoicePaymentsApi.prototype.financeInvoicesIdPaymentsPaymentIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/{id}/payments/{paymentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'paymentId' + '}', String(params.paymentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsPaymentIdPatch');
        }
        // verify required parameter 'paymentId' is set
        if (params.paymentId == null) {
            throw new Error('Missing required parameter paymentId when calling financeInvoicesIdPaymentsPaymentIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeInvoicesIdPaymentsPaymentIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Payment
     * @param id
     * @param paymentId
     * @param payment
     */
    InvoicePaymentsApi.prototype.financeInvoicesIdPaymentsPaymentIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/{id}/payments/{paymentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'paymentId' + '}', String(params.paymentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsPaymentIdPut');
        }
        // verify required parameter 'paymentId' is set
        if (params.paymentId == null) {
            throw new Error('Missing required parameter paymentId when calling financeInvoicesIdPaymentsPaymentIdPut');
        }
        // verify required parameter 'payment' is set
        if (params.payment == null) {
            throw new Error('Missing required parameter payment when calling financeInvoicesIdPaymentsPaymentIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.payment)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Payment
     * @param id
     * @param payment
     */
    InvoicePaymentsApi.prototype.financeInvoicesIdPaymentsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/{id}/payments'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeInvoicesIdPaymentsPost');
        }
        // verify required parameter 'payment' is set
        if (params.payment == null) {
            throw new Error('Missing required parameter payment when calling financeInvoicesIdPaymentsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.payment)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return InvoicePaymentsApi;
}());
exports.InvoicePaymentsApi = InvoicePaymentsApi;
//}
//export namespace  {
'use strict';
var InvoicesApi = (function () {
    function InvoicesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Invoices Count
     * @param conditions
     * @param customFieldConditions
     */
    InvoicesApi.prototype.financeInvoicesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Invoices
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    InvoicesApi.prototype.financeInvoicesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Invoice By Id
     * @param id
     */
    InvoicesApi.prototype.financeInvoicesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeInvoicesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Invoice By Id
     * @param id
     */
    InvoicesApi.prototype.financeInvoicesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeInvoicesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Invoice
     * @param id
     * @param operations
     */
    InvoicesApi.prototype.financeInvoicesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeInvoicesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeInvoicesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Invoice Pdf
     * @param id
     */
    InvoicesApi.prototype.financeInvoicesIdPdfGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/{id}/pdf'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeInvoicesIdPdfGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Invoice
     * @param id
     * @param invoice
     */
    InvoicesApi.prototype.financeInvoicesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeInvoicesIdPut');
        }
        // verify required parameter 'invoice' is set
        if (params.invoice == null) {
            throw new Error('Missing required parameter invoice when calling financeInvoicesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.invoice)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Invoice
     * @param invoice
     */
    InvoicesApi.prototype.financeInvoicesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/invoices';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'invoice' is set
        if (params.invoice == null) {
            throw new Error('Missing required parameter invoice when calling financeInvoicesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.invoice)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return InvoicesApi;
}());
exports.InvoicesApi = InvoicesApi;
//}
//export namespace  {
'use strict';
var KnowledgeBaseArticlesApi = (function () {
    function KnowledgeBaseArticlesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Knowledge Base Articles Count
     * @param conditions
     * @param customFieldConditions
     */
    KnowledgeBaseArticlesApi.prototype.serviceKnowledgeBaseArticlesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/knowledgeBaseArticles/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Knowledge Base Articles
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    KnowledgeBaseArticlesApi.prototype.serviceKnowledgeBaseArticlesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/knowledgeBaseArticles';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Knowledge Base Article By Id
     * @param id
     */
    KnowledgeBaseArticlesApi.prototype.serviceKnowledgeBaseArticlesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/knowledgeBaseArticles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceKnowledgeBaseArticlesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Knowledge Base Article By Id
     * @param id
     */
    KnowledgeBaseArticlesApi.prototype.serviceKnowledgeBaseArticlesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/knowledgeBaseArticles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceKnowledgeBaseArticlesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Knowledge Base Article
     * @param id
     * @param operations
     */
    KnowledgeBaseArticlesApi.prototype.serviceKnowledgeBaseArticlesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/knowledgeBaseArticles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceKnowledgeBaseArticlesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceKnowledgeBaseArticlesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Knowledge Base Article
     * @param id
     * @param knowledgeBaseArticle
     */
    KnowledgeBaseArticlesApi.prototype.serviceKnowledgeBaseArticlesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/knowledgeBaseArticles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceKnowledgeBaseArticlesIdPut');
        }
        // verify required parameter 'knowledgeBaseArticle' is set
        if (params.knowledgeBaseArticle == null) {
            throw new Error('Missing required parameter knowledgeBaseArticle when calling serviceKnowledgeBaseArticlesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.knowledgeBaseArticle)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Knowledge Base Article
     * @param knowledgeBaseArticle
     */
    KnowledgeBaseArticlesApi.prototype.serviceKnowledgeBaseArticlesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/knowledgeBaseArticles';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'knowledgeBaseArticle' is set
        if (params.knowledgeBaseArticle == null) {
            throw new Error('Missing required parameter knowledgeBaseArticle when calling serviceKnowledgeBaseArticlesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.knowledgeBaseArticle)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return KnowledgeBaseArticlesApi;
}());
exports.KnowledgeBaseArticlesApi = KnowledgeBaseArticlesApi;
//}
//export namespace  {
'use strict';
var LinksApi = (function () {
    function LinksApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Links Count
     * @param conditions
     */
    LinksApi.prototype.systemLinksCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/links/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Links
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    LinksApi.prototype.systemLinksGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/links';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Link By Id
     * @param id
     */
    LinksApi.prototype.systemLinksIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/links/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemLinksIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Link By Id
     * @param id
     */
    LinksApi.prototype.systemLinksIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/links/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemLinksIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Link
     * @param id
     * @param operations
     */
    LinksApi.prototype.systemLinksIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/links/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemLinksIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemLinksIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Link
     * @param id
     * @param link
     */
    LinksApi.prototype.systemLinksIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/links/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemLinksIdPut');
        }
        // verify required parameter 'link' is set
        if (params.link == null) {
            throw new Error('Missing required parameter link when calling systemLinksIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.link)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Link
     * @param link
     */
    LinksApi.prototype.systemLinksPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/links';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'link' is set
        if (params.link == null) {
            throw new Error('Missing required parameter link when calling systemLinksPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.link)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return LinksApi;
}());
exports.LinksApi = LinksApi;
//}
//export namespace  {
'use strict';
var LocationsApi = (function () {
    function LocationsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Create Locations Count
     * @param conditions
     */
    LocationsApi.prototype.serviceLocationsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/locations/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Locations
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    LocationsApi.prototype.serviceLocationsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/locations';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Location By Id
     * @param id
     */
    LocationsApi.prototype.serviceLocationsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/locations/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceLocationsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Location By Id
     * @param id
     */
    LocationsApi.prototype.serviceLocationsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/locations/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceLocationsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Location
     * @param id
     * @param operations
     */
    LocationsApi.prototype.serviceLocationsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/locations/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceLocationsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceLocationsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Location
     * @param id
     * @param location
     */
    LocationsApi.prototype.serviceLocationsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/locations/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceLocationsIdPut');
        }
        // verify required parameter 'location' is set
        if (params.location == null) {
            throw new Error('Missing required parameter location when calling serviceLocationsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.location)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Location
     * @param location
     */
    LocationsApi.prototype.serviceLocationsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/locations';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'location' is set
        if (params.location == null) {
            throw new Error('Missing required parameter location when calling serviceLocationsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.location)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return LocationsApi;
}());
exports.LocationsApi = LocationsApi;
//}
//export namespace  {
'use strict';
var ManagementBackupsApi = (function () {
    function ManagementBackupsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Management Backup Count
     * @param conditions
     */
    ManagementBackupsApi.prototype.companyManagementBackupsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementBackups/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Management Backup
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ManagementBackupsApi.prototype.companyManagementBackupsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementBackups';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Management Backup By Id
     * @param id
     */
    ManagementBackupsApi.prototype.companyManagementBackupsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementBackups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyManagementBackupsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Management Backup By Id
     * @param id
     */
    ManagementBackupsApi.prototype.companyManagementBackupsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementBackups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyManagementBackupsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Management Backup
     * @param id
     * @param operations
     */
    ManagementBackupsApi.prototype.companyManagementBackupsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementBackups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyManagementBackupsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyManagementBackupsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Management Backup
     * @param id
     * @param managementBackup
     */
    ManagementBackupsApi.prototype.companyManagementBackupsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementBackups/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyManagementBackupsIdPut');
        }
        // verify required parameter 'managementBackup' is set
        if (params.managementBackup == null) {
            throw new Error('Missing required parameter managementBackup when calling companyManagementBackupsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.managementBackup)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Management Backup
     * @param managementBackup
     */
    ManagementBackupsApi.prototype.companyManagementBackupsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementBackups';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'managementBackup' is set
        if (params.managementBackup == null) {
            throw new Error('Missing required parameter managementBackup when calling companyManagementBackupsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.managementBackup)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ManagementBackupsApi;
}());
exports.ManagementBackupsApi = ManagementBackupsApi;
//}
//export namespace  {
'use strict';
var ManagementEmailsApi = (function () {
    function ManagementEmailsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Management Email Count
     * @param conditions
     */
    ManagementEmailsApi.prototype.companyManagementEmailsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementEmails/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Management Email
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ManagementEmailsApi.prototype.companyManagementEmailsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementEmails';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Management Email By Id
     * @param id
     */
    ManagementEmailsApi.prototype.companyManagementEmailsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementEmails/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyManagementEmailsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Management Email By Id
     * @param id
     */
    ManagementEmailsApi.prototype.companyManagementEmailsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementEmails/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyManagementEmailsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Management Email
     * @param id
     * @param operations
     */
    ManagementEmailsApi.prototype.companyManagementEmailsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementEmails/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyManagementEmailsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyManagementEmailsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Management Email
     * @param id
     * @param managementEmail
     */
    ManagementEmailsApi.prototype.companyManagementEmailsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementEmails/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyManagementEmailsIdPut');
        }
        // verify required parameter 'managementEmail' is set
        if (params.managementEmail == null) {
            throw new Error('Missing required parameter managementEmail when calling companyManagementEmailsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.managementEmail)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Management Email
     * @param managementEmail
     */
    ManagementEmailsApi.prototype.companyManagementEmailsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/managementEmails';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'managementEmail' is set
        if (params.managementEmail == null) {
            throw new Error('Missing required parameter managementEmail when calling companyManagementEmailsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.managementEmail)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ManagementEmailsApi;
}());
exports.ManagementEmailsApi = ManagementEmailsApi;
//}
//export namespace  {
'use strict';
var ManufacturersApi = (function () {
    function ManufacturersApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Manufacturers Count
     * @param conditions
     */
    ManufacturersApi.prototype.procurementManufacturersCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/manufacturers/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Manufacturers
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ManufacturersApi.prototype.procurementManufacturersGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/manufacturers';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Manufacturer By Id
     * @param id
     */
    ManufacturersApi.prototype.procurementManufacturersIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/manufacturers/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementManufacturersIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Manufacturer By Id
     * @param id
     */
    ManufacturersApi.prototype.procurementManufacturersIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/manufacturers/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementManufacturersIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Manufacturer
     * @param id
     * @param operations
     */
    ManufacturersApi.prototype.procurementManufacturersIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/manufacturers/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementManufacturersIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementManufacturersIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Manufacturer
     * @param id
     * @param manufacturer
     */
    ManufacturersApi.prototype.procurementManufacturersIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/manufacturers/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementManufacturersIdPut');
        }
        // verify required parameter 'manufacturer' is set
        if (params.manufacturer == null) {
            throw new Error('Missing required parameter manufacturer when calling procurementManufacturersIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.manufacturer)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Manufacturer
     * @param manufacturer
     */
    ManufacturersApi.prototype.procurementManufacturersPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/manufacturers';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'manufacturer' is set
        if (params.manufacturer == null) {
            throw new Error('Missing required parameter manufacturer when calling procurementManufacturersPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.manufacturer)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ManufacturersApi;
}());
exports.ManufacturersApi = ManufacturersApi;
//}
//export namespace  {
'use strict';
var MarketDescriptionsApi = (function () {
    function MarketDescriptionsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Market Description Count
     * @param conditions
     */
    MarketDescriptionsApi.prototype.companyMarketDescriptionsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/marketDescriptions/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Market Description
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    MarketDescriptionsApi.prototype.companyMarketDescriptionsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/marketDescriptions';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Market Description By Id
     * @param id
     */
    MarketDescriptionsApi.prototype.companyMarketDescriptionsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/marketDescriptions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyMarketDescriptionsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Market Description By Id
     * @param id
     */
    MarketDescriptionsApi.prototype.companyMarketDescriptionsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/marketDescriptions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyMarketDescriptionsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Market Description
     * @param id
     * @param operations
     */
    MarketDescriptionsApi.prototype.companyMarketDescriptionsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/marketDescriptions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyMarketDescriptionsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyMarketDescriptionsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Market Description
     * @param id
     * @param marketDescription
     */
    MarketDescriptionsApi.prototype.companyMarketDescriptionsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/marketDescriptions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyMarketDescriptionsIdPut');
        }
        // verify required parameter 'marketDescription' is set
        if (params.marketDescription == null) {
            throw new Error('Missing required parameter marketDescription when calling companyMarketDescriptionsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.marketDescription)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Market Description
     * @param marketDescription
     */
    MarketDescriptionsApi.prototype.companyMarketDescriptionsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/marketDescriptions';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'marketDescription' is set
        if (params.marketDescription == null) {
            throw new Error('Missing required parameter marketDescription when calling companyMarketDescriptionsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.marketDescription)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return MarketDescriptionsApi;
}());
exports.MarketDescriptionsApi = MarketDescriptionsApi;
//}
//export namespace  {
'use strict';
var MemberTypesApi = (function () {
    function MemberTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Type Count
     * @param conditions
     */
    MemberTypesApi.prototype.systemMembersTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Type
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    MemberTypesApi.prototype.systemMembersTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Type By Id
     * @param id
     */
    MemberTypesApi.prototype.systemMembersTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemMembersTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Type By Id
     * @param id
     */
    MemberTypesApi.prototype.systemMembersTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemMembersTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Type
     * @param id
     * @param operations
     */
    MemberTypesApi.prototype.systemMembersTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemMembersTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemMembersTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Type
     * @param id
     * @param type
     */
    MemberTypesApi.prototype.systemMembersTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemMembersTypesIdPut');
        }
        // verify required parameter 'type' is set
        if (params.type == null) {
            throw new Error('Missing required parameter type when calling systemMembersTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.type)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Type
     * @param type
     */
    MemberTypesApi.prototype.systemMembersTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'type' is set
        if (params.type == null) {
            throw new Error('Missing required parameter type when calling systemMembersTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.type)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return MemberTypesApi;
}());
exports.MemberTypesApi = MemberTypesApi;
//}
//export namespace  {
'use strict';
var MembersApi = (function () {
    function MembersApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Members Count
     * @param conditions
     */
    MembersApi.prototype.systemMembersCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Members
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    MembersApi.prototype.systemMembersGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Member By Id
     * @param memberIdentifier
     */
    MembersApi.prototype.systemMembersMemberIdentifierGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members/{memberIdentifier}'
            .replace('{' + 'memberIdentifier' + '}', String(params.memberIdentifier));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'memberIdentifier' is set
        if (params.memberIdentifier == null) {
            throw new Error('Missing required parameter memberIdentifier when calling systemMembersMemberIdentifierGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Member Image
     * @param memberIdentifier
     * @param useDefaultFlag
     * @param lastmodified
     */
    MembersApi.prototype.systemMembersMemberIdentifierImageGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members/{memberIdentifier}/image'
            .replace('{' + 'memberIdentifier' + '}', String(params.memberIdentifier));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'memberIdentifier' is set
        if (params.memberIdentifier == null) {
            throw new Error('Missing required parameter memberIdentifier when calling systemMembersMemberIdentifierImageGet');
        }
        if (params.useDefaultFlag !== undefined) {
            queryParameters['useDefaultFlag'] = params.useDefaultFlag;
        }
        if (params.lastmodified !== undefined) {
            queryParameters['lastmodified'] = params.lastmodified;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Token By Member Identifier
     * @param memberIdentifier
     */
    MembersApi.prototype.systemMembersMemberIdentifierTokensPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/members/{memberIdentifier}/tokens'
            .replace('{' + 'memberIdentifier' + '}', String(params.memberIdentifier));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'memberIdentifier' is set
        if (params.memberIdentifier == null) {
            throw new Error('Missing required parameter memberIdentifier when calling systemMembersMemberIdentifierTokensPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return MembersApi;
}());
exports.MembersApi = MembersApi;
//}
//export namespace  {
'use strict';
var MenuEntriesApi = (function () {
    function MenuEntriesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Menu Entries Count
     * @param conditions
     */
    MenuEntriesApi.prototype.systemMenuentriesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/menuentries/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Menu Entries
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    MenuEntriesApi.prototype.systemMenuentriesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/menuentries';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Menu Entry By Id
     * @param id
     */
    MenuEntriesApi.prototype.systemMenuentriesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/menuentries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemMenuentriesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Menu Entry By Id
     * @param id
     */
    MenuEntriesApi.prototype.systemMenuentriesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/menuentries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemMenuentriesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Menu Entry Image
     * @param id
     * @param lastmodified
     * @param largeFlag
     */
    MenuEntriesApi.prototype.systemMenuentriesIdImageGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/menuentries/{id}/image'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemMenuentriesIdImageGet');
        }
        if (params.lastmodified !== undefined) {
            queryParameters['lastmodified'] = params.lastmodified;
        }
        if (params.largeFlag !== undefined) {
            queryParameters['largeFlag'] = params.largeFlag;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Upload Menu Entry Image
     * @param id
     * @param file File to upload
     */
    MenuEntriesApi.prototype.systemMenuentriesIdImagePost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/menuentries/{id}/image'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        var formParams = {};
        headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemMenuentriesIdImagePost');
        }
        formParams['file'] = params.file;
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: querystring.stringify(formParams)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Menu Entry
     * @param id
     * @param operations
     */
    MenuEntriesApi.prototype.systemMenuentriesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/menuentries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemMenuentriesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemMenuentriesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Menu Entry
     * @param id
     * @param menuEntry
     */
    MenuEntriesApi.prototype.systemMenuentriesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/menuentries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemMenuentriesIdPut');
        }
        // verify required parameter 'menuEntry' is set
        if (params.menuEntry == null) {
            throw new Error('Missing required parameter menuEntry when calling systemMenuentriesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.menuEntry)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Menu Entry
     * @param menuEntry
     */
    MenuEntriesApi.prototype.systemMenuentriesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/menuentries';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'menuEntry' is set
        if (params.menuEntry == null) {
            throw new Error('Missing required parameter menuEntry when calling systemMenuentriesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.menuEntry)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return MenuEntriesApi;
}());
exports.MenuEntriesApi = MenuEntriesApi;
//}
//export namespace  {
'use strict';
var OpportunitiesApi = (function () {
    function OpportunitiesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Opportunities Count
     * @param conditions
     * @param customFieldConditions
     */
    OpportunitiesApi.prototype.salesOpportunitiesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Opportunities
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OpportunitiesApi.prototype.salesOpportunitiesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Convert Opportunity To Agreement
     * @param id
     * @param conversion
     */
    OpportunitiesApi.prototype.salesOpportunitiesIdConvertToAgreementPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/convertToAgreement'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdConvertToAgreementPost');
        }
        // verify required parameter 'conversion' is set
        if (params.conversion == null) {
            throw new Error('Missing required parameter conversion when calling salesOpportunitiesIdConvertToAgreementPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.conversion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Convert Opportunity To Project
     * @param id
     * @param conversion
     */
    OpportunitiesApi.prototype.salesOpportunitiesIdConvertToProjectPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/convertToProject'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdConvertToProjectPost');
        }
        // verify required parameter 'conversion' is set
        if (params.conversion == null) {
            throw new Error('Missing required parameter conversion when calling salesOpportunitiesIdConvertToProjectPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.conversion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Convert Opportunity To Sales Order
     * @param id
     * @param conversion
     */
    OpportunitiesApi.prototype.salesOpportunitiesIdConvertToSalesOrderPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/convertToSalesOrder'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdConvertToSalesOrderPost');
        }
        // verify required parameter 'conversion' is set
        if (params.conversion == null) {
            throw new Error('Missing required parameter conversion when calling salesOpportunitiesIdConvertToSalesOrderPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.conversion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Convert Opportunity To Service Ticket
     * @param id
     * @param conversion
     */
    OpportunitiesApi.prototype.salesOpportunitiesIdConvertToServiceTicketPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/convertToServiceTicket'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdConvertToServiceTicketPost');
        }
        // verify required parameter 'conversion' is set
        if (params.conversion == null) {
            throw new Error('Missing required parameter conversion when calling salesOpportunitiesIdConvertToServiceTicketPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.conversion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Opportunity By Id
     * @param id
     */
    OpportunitiesApi.prototype.salesOpportunitiesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Opportunity By Id
     * @param id
     */
    OpportunitiesApi.prototype.salesOpportunitiesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Opportunity
     * @param id
     * @param operations
     */
    OpportunitiesApi.prototype.salesOpportunitiesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesOpportunitiesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Opportunity
     * @param id
     * @param opportunity
     */
    OpportunitiesApi.prototype.salesOpportunitiesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdPut');
        }
        // verify required parameter 'opportunity' is set
        if (params.opportunity == null) {
            throw new Error('Missing required parameter opportunity when calling salesOpportunitiesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.opportunity)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Opportunity
     * @param opportunity
     */
    OpportunitiesApi.prototype.salesOpportunitiesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'opportunity' is set
        if (params.opportunity == null) {
            throw new Error('Missing required parameter opportunity when calling salesOpportunitiesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.opportunity)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OpportunitiesApi;
}());
exports.OpportunitiesApi = OpportunitiesApi;
//}
//export namespace  {
'use strict';
var OpportunityContactsApi = (function () {
    function OpportunityContactsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Opportunity Contact By Id
     * @param id
     * @param contactId
     */
    OpportunityContactsApi.prototype.salesOpportunitiesIdContactsContactIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/contacts/{contactId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'contactId' + '}', String(params.contactId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsContactIdDelete');
        }
        // verify required parameter 'contactId' is set
        if (params.contactId == null) {
            throw new Error('Missing required parameter contactId when calling salesOpportunitiesIdContactsContactIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Opportunity Contact By Id
     * @param id
     * @param contactId
     */
    OpportunityContactsApi.prototype.salesOpportunitiesIdContactsContactIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/contacts/{contactId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'contactId' + '}', String(params.contactId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsContactIdGet');
        }
        // verify required parameter 'contactId' is set
        if (params.contactId == null) {
            throw new Error('Missing required parameter contactId when calling salesOpportunitiesIdContactsContactIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Opportunity Contact
     * @param id
     * @param contactId
     * @param operations
     */
    OpportunityContactsApi.prototype.salesOpportunitiesIdContactsContactIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/contacts/{contactId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'contactId' + '}', String(params.contactId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsContactIdPatch');
        }
        // verify required parameter 'contactId' is set
        if (params.contactId == null) {
            throw new Error('Missing required parameter contactId when calling salesOpportunitiesIdContactsContactIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesOpportunitiesIdContactsContactIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Opportunity Contact
     * @param id
     * @param contactId
     * @param opportunityContact
     */
    OpportunityContactsApi.prototype.salesOpportunitiesIdContactsContactIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/contacts/{contactId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'contactId' + '}', String(params.contactId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsContactIdPut');
        }
        // verify required parameter 'contactId' is set
        if (params.contactId == null) {
            throw new Error('Missing required parameter contactId when calling salesOpportunitiesIdContactsContactIdPut');
        }
        // verify required parameter 'opportunityContact' is set
        if (params.opportunityContact == null) {
            throw new Error('Missing required parameter opportunityContact when calling salesOpportunitiesIdContactsContactIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.opportunityContact)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Opportunity Contacts Count
     * @param id
     * @param conditions
     */
    OpportunityContactsApi.prototype.salesOpportunitiesIdContactsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/contacts/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Opportunity Contacts
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OpportunityContactsApi.prototype.salesOpportunitiesIdContactsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/contacts'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Opportunity Contact
     * @param id
     * @param opportunityContact
     */
    OpportunityContactsApi.prototype.salesOpportunitiesIdContactsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/contacts'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdContactsPost');
        }
        // verify required parameter 'opportunityContact' is set
        if (params.opportunityContact == null) {
            throw new Error('Missing required parameter opportunityContact when calling salesOpportunitiesIdContactsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.opportunityContact)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OpportunityContactsApi;
}());
exports.OpportunityContactsApi = OpportunityContactsApi;
//}
//export namespace  {
'use strict';
var OpportunityForecastsApi = (function () {
    function OpportunityForecastsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Forecasts Count
     * @param id
     * @param conditions
     */
    OpportunityForecastsApi.prototype.salesOpportunitiesIdForecastCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/forecast/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Forecast By Id
     * @param id
     * @param forecastId
     */
    OpportunityForecastsApi.prototype.salesOpportunitiesIdForecastForecastIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/forecast/{forecastId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'forecastId' + '}', String(params.forecastId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastForecastIdDelete');
        }
        // verify required parameter 'forecastId' is set
        if (params.forecastId == null) {
            throw new Error('Missing required parameter forecastId when calling salesOpportunitiesIdForecastForecastIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Forecast By Id
     * @param id
     * @param forecastId
     */
    OpportunityForecastsApi.prototype.salesOpportunitiesIdForecastForecastIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/forecast/{forecastId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'forecastId' + '}', String(params.forecastId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastForecastIdGet');
        }
        // verify required parameter 'forecastId' is set
        if (params.forecastId == null) {
            throw new Error('Missing required parameter forecastId when calling salesOpportunitiesIdForecastForecastIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Forecast
     * @param id
     * @param forecastId
     * @param operations
     */
    OpportunityForecastsApi.prototype.salesOpportunitiesIdForecastForecastIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/forecast/{forecastId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'forecastId' + '}', String(params.forecastId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastForecastIdPatch');
        }
        // verify required parameter 'forecastId' is set
        if (params.forecastId == null) {
            throw new Error('Missing required parameter forecastId when calling salesOpportunitiesIdForecastForecastIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesOpportunitiesIdForecastForecastIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Forecast
     * @param id
     * @param forecastId
     * @param forecast
     */
    OpportunityForecastsApi.prototype.salesOpportunitiesIdForecastForecastIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/forecast/{forecastId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'forecastId' + '}', String(params.forecastId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastForecastIdPut');
        }
        // verify required parameter 'forecastId' is set
        if (params.forecastId == null) {
            throw new Error('Missing required parameter forecastId when calling salesOpportunitiesIdForecastForecastIdPut');
        }
        // verify required parameter 'forecast' is set
        if (params.forecast == null) {
            throw new Error('Missing required parameter forecast when calling salesOpportunitiesIdForecastForecastIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.forecast)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Forecasts
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OpportunityForecastsApi.prototype.salesOpportunitiesIdForecastGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/forecast'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Forecast
     * @param id
     * @param forecast
     */
    OpportunityForecastsApi.prototype.salesOpportunitiesIdForecastPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/forecast'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdForecastPost');
        }
        // verify required parameter 'forecast' is set
        if (params.forecast == null) {
            throw new Error('Missing required parameter forecast when calling salesOpportunitiesIdForecastPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.forecast)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OpportunityForecastsApi;
}());
exports.OpportunityForecastsApi = OpportunityForecastsApi;
//}
//export namespace  {
'use strict';
var OpportunityNotesApi = (function () {
    function OpportunityNotesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Opportunity Notes Count
     * @param id
     * @param conditions
     */
    OpportunityNotesApi.prototype.salesOpportunitiesIdNotesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/notes/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Opportunity Notes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OpportunityNotesApi.prototype.salesOpportunitiesIdNotesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/notes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Opportunity Note By Id
     * @param id
     * @param noteId
     */
    OpportunityNotesApi.prototype.salesOpportunitiesIdNotesNoteIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesNoteIdDelete');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling salesOpportunitiesIdNotesNoteIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Opportunity Note By Id
     * @param id
     * @param noteId
     */
    OpportunityNotesApi.prototype.salesOpportunitiesIdNotesNoteIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesNoteIdGet');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling salesOpportunitiesIdNotesNoteIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Opportunity Note
     * @param id
     * @param noteId
     * @param operations
     */
    OpportunityNotesApi.prototype.salesOpportunitiesIdNotesNoteIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesNoteIdPatch');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling salesOpportunitiesIdNotesNoteIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesOpportunitiesIdNotesNoteIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Opportunity Note
     * @param id
     * @param noteId
     * @param note
     */
    OpportunityNotesApi.prototype.salesOpportunitiesIdNotesNoteIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesNoteIdPut');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling salesOpportunitiesIdNotesNoteIdPut');
        }
        // verify required parameter 'note' is set
        if (params.note == null) {
            throw new Error('Missing required parameter note when calling salesOpportunitiesIdNotesNoteIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.note)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Opportunity Note
     * @param id
     * @param note
     */
    OpportunityNotesApi.prototype.salesOpportunitiesIdNotesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/notes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdNotesPost');
        }
        // verify required parameter 'note' is set
        if (params.note == null) {
            throw new Error('Missing required parameter note when calling salesOpportunitiesIdNotesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.note)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OpportunityNotesApi;
}());
exports.OpportunityNotesApi = OpportunityNotesApi;
//}
//export namespace  {
'use strict';
var OpportunityRatingsApi = (function () {
    function OpportunityRatingsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Opportunity Ratings Count
     * @param conditions
     */
    OpportunityRatingsApi.prototype.salesOpportunitiesRatingsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/ratings/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Opportunity Ratings
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OpportunityRatingsApi.prototype.salesOpportunitiesRatingsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/ratings';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Opportunity Rating By Id
     * @param id
     */
    OpportunityRatingsApi.prototype.salesOpportunitiesRatingsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/ratings/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesRatingsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Opportunity Rating By Id
     * @param id
     */
    OpportunityRatingsApi.prototype.salesOpportunitiesRatingsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/ratings/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesRatingsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Opportunity Rating
     * @param id
     * @param operations
     */
    OpportunityRatingsApi.prototype.salesOpportunitiesRatingsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/ratings/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesRatingsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesOpportunitiesRatingsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Opportunity Rating
     * @param id
     * @param opportunityRating
     */
    OpportunityRatingsApi.prototype.salesOpportunitiesRatingsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/ratings/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesRatingsIdPut');
        }
        // verify required parameter 'opportunityRating' is set
        if (params.opportunityRating == null) {
            throw new Error('Missing required parameter opportunityRating when calling salesOpportunitiesRatingsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.opportunityRating)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Opportunity Rating
     * @param opportunityRating
     */
    OpportunityRatingsApi.prototype.salesOpportunitiesRatingsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/ratings';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'opportunityRating' is set
        if (params.opportunityRating == null) {
            throw new Error('Missing required parameter opportunityRating when calling salesOpportunitiesRatingsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.opportunityRating)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OpportunityRatingsApi;
}());
exports.OpportunityRatingsApi = OpportunityRatingsApi;
//}
//export namespace  {
'use strict';
var OpportunityStagesApi = (function () {
    function OpportunityStagesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Stage Count
     * @param conditions
     */
    OpportunityStagesApi.prototype.salesStagesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/stages/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Stage
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OpportunityStagesApi.prototype.salesStagesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/stages';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Stage By Id
     * @param id
     */
    OpportunityStagesApi.prototype.salesStagesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/stages/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesStagesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Stage By Id
     * @param id
     */
    OpportunityStagesApi.prototype.salesStagesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/stages/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesStagesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Stage
     * @param id
     * @param operations
     */
    OpportunityStagesApi.prototype.salesStagesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/stages/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesStagesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesStagesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Stage
     * @param id
     * @param stage
     */
    OpportunityStagesApi.prototype.salesStagesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/stages/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesStagesIdPut');
        }
        // verify required parameter 'stage' is set
        if (params.stage == null) {
            throw new Error('Missing required parameter stage when calling salesStagesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.stage)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Stage
     * @param stage
     */
    OpportunityStagesApi.prototype.salesStagesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/stages';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'stage' is set
        if (params.stage == null) {
            throw new Error('Missing required parameter stage when calling salesStagesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.stage)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OpportunityStagesApi;
}());
exports.OpportunityStagesApi = OpportunityStagesApi;
//}
//export namespace  {
'use strict';
var OpportunityStatusesApi = (function () {
    function OpportunityStatusesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Statuses Count
     * @param conditions
     */
    OpportunityStatusesApi.prototype.salesOpportunitiesStatusesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/statuses/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OpportunityStatusesApi.prototype.salesOpportunitiesStatusesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Status By Id
     * @param id
     */
    OpportunityStatusesApi.prototype.salesOpportunitiesStatusesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesStatusesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Status By Id
     * @param id
     */
    OpportunityStatusesApi.prototype.salesOpportunitiesStatusesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesStatusesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Status
     * @param id
     * @param operations
     */
    OpportunityStatusesApi.prototype.salesOpportunitiesStatusesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesStatusesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesOpportunitiesStatusesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Status
     * @param id
     * @param status
     */
    OpportunityStatusesApi.prototype.salesOpportunitiesStatusesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesStatusesIdPut');
        }
        // verify required parameter 'status' is set
        if (params.status == null) {
            throw new Error('Missing required parameter status when calling salesOpportunitiesStatusesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.status)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Status
     * @param status
     */
    OpportunityStatusesApi.prototype.salesOpportunitiesStatusesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'status' is set
        if (params.status == null) {
            throw new Error('Missing required parameter status when calling salesOpportunitiesStatusesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.status)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OpportunityStatusesApi;
}());
exports.OpportunityStatusesApi = OpportunityStatusesApi;
//}
//export namespace  {
'use strict';
var OpportunityTeamsApi = (function () {
    function OpportunityTeamsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Teams Count
     * @param id
     * @param conditions
     */
    OpportunityTeamsApi.prototype.salesOpportunitiesIdTeamCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/team/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Teams
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OpportunityTeamsApi.prototype.salesOpportunitiesIdTeamGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/team'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Team
     * @param id
     * @param team
     */
    OpportunityTeamsApi.prototype.salesOpportunitiesIdTeamPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/team'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamPost');
        }
        // verify required parameter 'team' is set
        if (params.team == null) {
            throw new Error('Missing required parameter team when calling salesOpportunitiesIdTeamPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.team)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Team By Id
     * @param id
     * @param teamId
     */
    OpportunityTeamsApi.prototype.salesOpportunitiesIdTeamTeamIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/team/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamTeamIdDelete');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling salesOpportunitiesIdTeamTeamIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Team By Id
     * @param id
     * @param teamId
     */
    OpportunityTeamsApi.prototype.salesOpportunitiesIdTeamTeamIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/team/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamTeamIdGet');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling salesOpportunitiesIdTeamTeamIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Team
     * @param id
     * @param teamId
     * @param operations
     */
    OpportunityTeamsApi.prototype.salesOpportunitiesIdTeamTeamIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/team/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamTeamIdPatch');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling salesOpportunitiesIdTeamTeamIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesOpportunitiesIdTeamTeamIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Team
     * @param id
     * @param teamId
     * @param team
     */
    OpportunityTeamsApi.prototype.salesOpportunitiesIdTeamTeamIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/{id}/team/{teamId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamId' + '}', String(params.teamId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesIdTeamTeamIdPut');
        }
        // verify required parameter 'teamId' is set
        if (params.teamId == null) {
            throw new Error('Missing required parameter teamId when calling salesOpportunitiesIdTeamTeamIdPut');
        }
        // verify required parameter 'team' is set
        if (params.team == null) {
            throw new Error('Missing required parameter team when calling salesOpportunitiesIdTeamTeamIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.team)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OpportunityTeamsApi;
}());
exports.OpportunityTeamsApi = OpportunityTeamsApi;
//}
//export namespace  {
'use strict';
var OpportunityTypesApi = (function () {
    function OpportunityTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Opportunity Types Count
     * @param conditions
     */
    OpportunityTypesApi.prototype.salesOpportunitiesTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Opportunity Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OpportunityTypesApi.prototype.salesOpportunitiesTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Opportunity Type By Id
     * @param id
     */
    OpportunityTypesApi.prototype.salesOpportunitiesTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Opportunity Type By Id
     * @param id
     */
    OpportunityTypesApi.prototype.salesOpportunitiesTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Opportunity Type
     * @param id
     * @param operations
     */
    OpportunityTypesApi.prototype.salesOpportunitiesTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesOpportunitiesTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Opportunity Type
     * @param id
     * @param opportunityType
     */
    OpportunityTypesApi.prototype.salesOpportunitiesTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOpportunitiesTypesIdPut');
        }
        // verify required parameter 'opportunityType' is set
        if (params.opportunityType == null) {
            throw new Error('Missing required parameter opportunityType when calling salesOpportunitiesTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.opportunityType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Opportunity Type
     * @param opportunityType
     */
    OpportunityTypesApi.prototype.salesOpportunitiesTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/opportunities/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'opportunityType' is set
        if (params.opportunityType == null) {
            throw new Error('Missing required parameter opportunityType when calling salesOpportunitiesTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.opportunityType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OpportunityTypesApi;
}());
exports.OpportunityTypesApi = OpportunityTypesApi;
//}
//export namespace  {
'use strict';
var OrderStatusesApi = (function () {
    function OrderStatusesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Order Statuses Count
     * @param conditions
     */
    OrderStatusesApi.prototype.salesOrdersStatusesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/statuses/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Order Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OrderStatusesApi.prototype.salesOrdersStatusesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Order Status By Id
     * @param id
     */
    OrderStatusesApi.prototype.salesOrdersStatusesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOrdersStatusesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Order Status By Id
     * @param id
     */
    OrderStatusesApi.prototype.salesOrdersStatusesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOrdersStatusesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Order Status
     * @param id
     * @param operations
     */
    OrderStatusesApi.prototype.salesOrdersStatusesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOrdersStatusesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesOrdersStatusesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Order Status
     * @param id
     * @param status
     */
    OrderStatusesApi.prototype.salesOrdersStatusesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOrdersStatusesIdPut');
        }
        // verify required parameter 'status' is set
        if (params.status == null) {
            throw new Error('Missing required parameter status when calling salesOrdersStatusesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.status)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Order Status
     * @param status
     */
    OrderStatusesApi.prototype.salesOrdersStatusesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'status' is set
        if (params.status == null) {
            throw new Error('Missing required parameter status when calling salesOrdersStatusesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.status)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OrderStatusesApi;
}());
exports.OrderStatusesApi = OrderStatusesApi;
//}
//export namespace  {
'use strict';
var OrdersApi = (function () {
    function OrdersApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Sales Orders Count
     * @param conditions
     * @param customFieldConditions
     */
    OrdersApi.prototype.salesOrdersCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Sales Orders
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OrdersApi.prototype.salesOrdersGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Sales Order By Id
     * @param id
     */
    OrdersApi.prototype.salesOrdersIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOrdersIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Sales Order By Id
     * @param id
     */
    OrdersApi.prototype.salesOrdersIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOrdersIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Sales Order
     * @param id
     * @param operations
     */
    OrdersApi.prototype.salesOrdersIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOrdersIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesOrdersIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Sales Order
     * @param id
     * @param order
     */
    OrdersApi.prototype.salesOrdersIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesOrdersIdPut');
        }
        // verify required parameter 'order' is set
        if (params.order == null) {
            throw new Error('Missing required parameter order when calling salesOrdersIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.order)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Sales Order
     * @param order
     */
    OrdersApi.prototype.salesOrdersPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/orders';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'order' is set
        if (params.order == null) {
            throw new Error('Missing required parameter order when calling salesOrdersPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.order)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OrdersApi;
}());
exports.OrdersApi = OrdersApi;
//}
//export namespace  {
'use strict';
var OwnershipTypesApi = (function () {
    function OwnershipTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Ownership Type Count
     * @param conditions
     */
    OwnershipTypesApi.prototype.companyOwnershipTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/ownershipTypes/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ownership Type
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    OwnershipTypesApi.prototype.companyOwnershipTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/ownershipTypes';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Ownership Type By Id
     * @param id
     */
    OwnershipTypesApi.prototype.companyOwnershipTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/ownershipTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyOwnershipTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ownership Type By Id
     * @param id
     */
    OwnershipTypesApi.prototype.companyOwnershipTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/ownershipTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyOwnershipTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Ownership Type
     * @param id
     * @param operations
     */
    OwnershipTypesApi.prototype.companyOwnershipTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/ownershipTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyOwnershipTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyOwnershipTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Ownership Type
     * @param id
     * @param ownershipType
     */
    OwnershipTypesApi.prototype.companyOwnershipTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/ownershipTypes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyOwnershipTypesIdPut');
        }
        // verify required parameter 'ownershipType' is set
        if (params.ownershipType == null) {
            throw new Error('Missing required parameter ownershipType when calling companyOwnershipTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.ownershipType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Ownership Type
     * @param ownershipType
     */
    OwnershipTypesApi.prototype.companyOwnershipTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/ownershipTypes';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'ownershipType' is set
        if (params.ownershipType == null) {
            throw new Error('Missing required parameter ownershipType when calling companyOwnershipTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.ownershipType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return OwnershipTypesApi;
}());
exports.OwnershipTypesApi = OwnershipTypesApi;
//}
//export namespace  {
'use strict';
var PricingBreaksApi = (function () {
    function PricingBreaksApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Pricing Break By Id
     * @param schedId
     * @param detailId
     * @param breakId
     */
    PricingBreaksApi.prototype.procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks/{breakId}'
            .replace('{' + 'schedId' + '}', String(params.schedId))
            .replace('{' + 'detailId' + '}', String(params.detailId))
            .replace('{' + 'breakId' + '}', String(params.breakId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'schedId' is set
        if (params.schedId == null) {
            throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdDelete');
        }
        // verify required parameter 'detailId' is set
        if (params.detailId == null) {
            throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdDelete');
        }
        // verify required parameter 'breakId' is set
        if (params.breakId == null) {
            throw new Error('Missing required parameter breakId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Pricing Break By Id
     * @param schedId
     * @param detailId
     * @param breakId
     */
    PricingBreaksApi.prototype.procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks/{breakId}'
            .replace('{' + 'schedId' + '}', String(params.schedId))
            .replace('{' + 'detailId' + '}', String(params.detailId))
            .replace('{' + 'breakId' + '}', String(params.breakId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'schedId' is set
        if (params.schedId == null) {
            throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdGet');
        }
        // verify required parameter 'detailId' is set
        if (params.detailId == null) {
            throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdGet');
        }
        // verify required parameter 'breakId' is set
        if (params.breakId == null) {
            throw new Error('Missing required parameter breakId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Pricing Break
     * @param schedId
     * @param detailId
     * @param breakId
     * @param operations
     */
    PricingBreaksApi.prototype.procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks/{breakId}'
            .replace('{' + 'schedId' + '}', String(params.schedId))
            .replace('{' + 'detailId' + '}', String(params.detailId))
            .replace('{' + 'breakId' + '}', String(params.breakId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'schedId' is set
        if (params.schedId == null) {
            throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch');
        }
        // verify required parameter 'detailId' is set
        if (params.detailId == null) {
            throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch');
        }
        // verify required parameter 'breakId' is set
        if (params.breakId == null) {
            throw new Error('Missing required parameter breakId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Pricing Break
     * @param schedId
     * @param detailId
     * @param breakId
     * @param pricingBreak
     */
    PricingBreaksApi.prototype.procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks/{breakId}'
            .replace('{' + 'schedId' + '}', String(params.schedId))
            .replace('{' + 'detailId' + '}', String(params.detailId))
            .replace('{' + 'breakId' + '}', String(params.breakId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'schedId' is set
        if (params.schedId == null) {
            throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut');
        }
        // verify required parameter 'detailId' is set
        if (params.detailId == null) {
            throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut');
        }
        // verify required parameter 'breakId' is set
        if (params.breakId == null) {
            throw new Error('Missing required parameter breakId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut');
        }
        // verify required parameter 'pricingBreak' is set
        if (params.pricingBreak == null) {
            throw new Error('Missing required parameter pricingBreak when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.pricingBreak)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Pricing Break Count
     * @param schedId
     * @param detailId
     * @param conditions
     */
    PricingBreaksApi.prototype.procurementPricingschedulesSchedIdDetailsDetailIdBreaksCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks/count'
            .replace('{' + 'schedId' + '}', String(params.schedId))
            .replace('{' + 'detailId' + '}', String(params.detailId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'schedId' is set
        if (params.schedId == null) {
            throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksCountGet');
        }
        // verify required parameter 'detailId' is set
        if (params.detailId == null) {
            throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Pricing Break
     * @param schedId
     * @param detailId
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    PricingBreaksApi.prototype.procurementPricingschedulesSchedIdDetailsDetailIdBreaksGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks'
            .replace('{' + 'schedId' + '}', String(params.schedId))
            .replace('{' + 'detailId' + '}', String(params.detailId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'schedId' is set
        if (params.schedId == null) {
            throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksGet');
        }
        // verify required parameter 'detailId' is set
        if (params.detailId == null) {
            throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Pricing Break
     * @param schedId
     * @param detailId
     * @param pricingBreak
     */
    PricingBreaksApi.prototype.procurementPricingschedulesSchedIdDetailsDetailIdBreaksPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{schedId}/details/{detailId}/breaks'
            .replace('{' + 'schedId' + '}', String(params.schedId))
            .replace('{' + 'detailId' + '}', String(params.detailId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'schedId' is set
        if (params.schedId == null) {
            throw new Error('Missing required parameter schedId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksPost');
        }
        // verify required parameter 'detailId' is set
        if (params.detailId == null) {
            throw new Error('Missing required parameter detailId when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksPost');
        }
        // verify required parameter 'pricingBreak' is set
        if (params.pricingBreak == null) {
            throw new Error('Missing required parameter pricingBreak when calling procurementPricingschedulesSchedIdDetailsDetailIdBreaksPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.pricingBreak)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return PricingBreaksApi;
}());
exports.PricingBreaksApi = PricingBreaksApi;
//}
//export namespace  {
'use strict';
var PricingDetailsApi = (function () {
    function PricingDetailsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Pricing Detail Count
     * @param id
     * @param conditions
     */
    PricingDetailsApi.prototype.procurementPricingschedulesIdDetailsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Pricing Detail By Id
     * @param id
     * @param detailID
     */
    PricingDetailsApi.prototype.procurementPricingschedulesIdDetailsDetailIDDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details/{detailID}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'detailID' + '}', String(params.detailID));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsDetailIDDelete');
        }
        // verify required parameter 'detailID' is set
        if (params.detailID == null) {
            throw new Error('Missing required parameter detailID when calling procurementPricingschedulesIdDetailsDetailIDDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Pricing Detail By Id
     * @param id
     * @param detailID
     */
    PricingDetailsApi.prototype.procurementPricingschedulesIdDetailsDetailIDGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details/{detailID}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'detailID' + '}', String(params.detailID));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsDetailIDGet');
        }
        // verify required parameter 'detailID' is set
        if (params.detailID == null) {
            throw new Error('Missing required parameter detailID when calling procurementPricingschedulesIdDetailsDetailIDGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Pricing Detail
     * @param id
     * @param detailID
     * @param operations
     */
    PricingDetailsApi.prototype.procurementPricingschedulesIdDetailsDetailIDPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details/{detailID}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'detailID' + '}', String(params.detailID));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsDetailIDPatch');
        }
        // verify required parameter 'detailID' is set
        if (params.detailID == null) {
            throw new Error('Missing required parameter detailID when calling procurementPricingschedulesIdDetailsDetailIDPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementPricingschedulesIdDetailsDetailIDPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Pricing Detail
     * @param id
     * @param detailID
     * @param pricingDetail
     */
    PricingDetailsApi.prototype.procurementPricingschedulesIdDetailsDetailIDPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details/{detailID}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'detailID' + '}', String(params.detailID));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsDetailIDPut');
        }
        // verify required parameter 'detailID' is set
        if (params.detailID == null) {
            throw new Error('Missing required parameter detailID when calling procurementPricingschedulesIdDetailsDetailIDPut');
        }
        // verify required parameter 'pricingDetail' is set
        if (params.pricingDetail == null) {
            throw new Error('Missing required parameter pricingDetail when calling procurementPricingschedulesIdDetailsDetailIDPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.pricingDetail)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Pricing Detail
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    PricingDetailsApi.prototype.procurementPricingschedulesIdDetailsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Pricing Detail
     * @param id
     * @param pricingDetail
     */
    PricingDetailsApi.prototype.procurementPricingschedulesIdDetailsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{id}/details'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDetailsPost');
        }
        // verify required parameter 'pricingDetail' is set
        if (params.pricingDetail == null) {
            throw new Error('Missing required parameter pricingDetail when calling procurementPricingschedulesIdDetailsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.pricingDetail)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return PricingDetailsApi;
}());
exports.PricingDetailsApi = PricingDetailsApi;
//}
//export namespace  {
'use strict';
var PricingSchedulesApi = (function () {
    function PricingSchedulesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Pricing Schedules Count
     * @param conditions
     */
    PricingSchedulesApi.prototype.procurementPricingschedulesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Pricing Schedules
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    PricingSchedulesApi.prototype.procurementPricingschedulesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Pricing Schedule By Id
     * @param id
     */
    PricingSchedulesApi.prototype.procurementPricingschedulesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPricingschedulesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Pricing Schedule By Id
     * @param id
     */
    PricingSchedulesApi.prototype.procurementPricingschedulesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPricingschedulesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Pricing Schedule
     * @param id
     * @param operations
     */
    PricingSchedulesApi.prototype.procurementPricingschedulesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPricingschedulesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementPricingschedulesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Pricing Schedule
     * @param id
     * @param pricingSchedule
     */
    PricingSchedulesApi.prototype.procurementPricingschedulesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPricingschedulesIdPut');
        }
        // verify required parameter 'pricingSchedule' is set
        if (params.pricingSchedule == null) {
            throw new Error('Missing required parameter pricingSchedule when calling procurementPricingschedulesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.pricingSchedule)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Pricing Schedule
     * @param pricingSchedule
     */
    PricingSchedulesApi.prototype.procurementPricingschedulesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/pricingschedules';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'pricingSchedule' is set
        if (params.pricingSchedule == null) {
            throw new Error('Missing required parameter pricingSchedule when calling procurementPricingschedulesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.pricingSchedule)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return PricingSchedulesApi;
}());
exports.PricingSchedulesApi = PricingSchedulesApi;
//}
//export namespace  {
'use strict';
var PrioritiesApi = (function () {
    function PrioritiesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Create Priorities Count
     * @param conditions
     */
    PrioritiesApi.prototype.servicePrioritiesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/priorities/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Priorities
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    PrioritiesApi.prototype.servicePrioritiesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/priorities';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Priority By Id
     * @param id
     */
    PrioritiesApi.prototype.servicePrioritiesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/priorities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling servicePrioritiesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Priority By Id
     * @param id
     */
    PrioritiesApi.prototype.servicePrioritiesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/priorities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling servicePrioritiesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Priority Image
     * @param id
     * @param useDefaultFlag
     * @param lastModified
     */
    PrioritiesApi.prototype.servicePrioritiesIdImageGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/priorities/{id}/image'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling servicePrioritiesIdImageGet');
        }
        if (params.useDefaultFlag !== undefined) {
            queryParameters['useDefaultFlag'] = params.useDefaultFlag;
        }
        if (params.lastModified !== undefined) {
            queryParameters['lastModified'] = params.lastModified;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Priority
     * @param id
     * @param operations
     */
    PrioritiesApi.prototype.servicePrioritiesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/priorities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling servicePrioritiesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling servicePrioritiesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Priority
     * @param id
     * @param priority
     */
    PrioritiesApi.prototype.servicePrioritiesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/priorities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling servicePrioritiesIdPut');
        }
        // verify required parameter 'priority' is set
        if (params.priority == null) {
            throw new Error('Missing required parameter priority when calling servicePrioritiesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.priority)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Priority
     * @param priority
     */
    PrioritiesApi.prototype.servicePrioritiesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/priorities';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'priority' is set
        if (params.priority == null) {
            throw new Error('Missing required parameter priority when calling servicePrioritiesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.priority)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return PrioritiesApi;
}());
exports.PrioritiesApi = PrioritiesApi;
//}
//export namespace  {
'use strict';
var ProductComponentsApi = (function () {
    function ProductComponentsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Product Component By Id
     * @param id
     * @param componentId
     */
    ProductComponentsApi.prototype.procurementProductsIdComponentsComponentIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/components/{componentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'componentId' + '}', String(params.componentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdComponentsComponentIdDelete');
        }
        // verify required parameter 'componentId' is set
        if (params.componentId == null) {
            throw new Error('Missing required parameter componentId when calling procurementProductsIdComponentsComponentIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Product Component By Id
     * @param id
     * @param componentId
     */
    ProductComponentsApi.prototype.procurementProductsIdComponentsComponentIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/components/{componentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'componentId' + '}', String(params.componentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdComponentsComponentIdGet');
        }
        // verify required parameter 'componentId' is set
        if (params.componentId == null) {
            throw new Error('Missing required parameter componentId when calling procurementProductsIdComponentsComponentIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Product Component
     * @param id
     * @param componentId
     * @param operations
     */
    ProductComponentsApi.prototype.procurementProductsIdComponentsComponentIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/components/{componentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'componentId' + '}', String(params.componentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdComponentsComponentIdPatch');
        }
        // verify required parameter 'componentId' is set
        if (params.componentId == null) {
            throw new Error('Missing required parameter componentId when calling procurementProductsIdComponentsComponentIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementProductsIdComponentsComponentIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Product Component
     * @param id
     * @param componentId
     * @param productComponent
     */
    ProductComponentsApi.prototype.procurementProductsIdComponentsComponentIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/components/{componentId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'componentId' + '}', String(params.componentId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdComponentsComponentIdPut');
        }
        // verify required parameter 'componentId' is set
        if (params.componentId == null) {
            throw new Error('Missing required parameter componentId when calling procurementProductsIdComponentsComponentIdPut');
        }
        // verify required parameter 'productComponent' is set
        if (params.productComponent == null) {
            throw new Error('Missing required parameter productComponent when calling procurementProductsIdComponentsComponentIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.productComponent)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Product Components Count
     * @param id
     * @param conditions
     */
    ProductComponentsApi.prototype.procurementProductsIdComponentsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/components/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdComponentsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Product Components
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ProductComponentsApi.prototype.procurementProductsIdComponentsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/components'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdComponentsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Product Component
     * @param id
     * @param productComponent
     */
    ProductComponentsApi.prototype.procurementProductsIdComponentsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/components'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdComponentsPost');
        }
        // verify required parameter 'productComponent' is set
        if (params.productComponent == null) {
            throw new Error('Missing required parameter productComponent when calling procurementProductsIdComponentsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.productComponent)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ProductComponentsApi;
}());
exports.ProductComponentsApi = ProductComponentsApi;
//}
//export namespace  {
'use strict';
var ProductPickingShippingDetailsApi = (function () {
    function ProductPickingShippingDetailsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Product Picking Shipping Details Count
     * @param id
     * @param conditions
     */
    ProductPickingShippingDetailsApi.prototype.procurementProductsIdPickingShippingDetailsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Product Picking Shipping Details
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ProductPickingShippingDetailsApi.prototype.procurementProductsIdPickingShippingDetailsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Products By Id
     * @param id
     * @param pickingShippingDetailId
     */
    ProductPickingShippingDetailsApi.prototype.procurementProductsIdPickingShippingDetailsPickingShippingDetailIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails/{pickingShippingDetailId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'pickingShippingDetailId' + '}', String(params.pickingShippingDetailId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdDelete');
        }
        // verify required parameter 'pickingShippingDetailId' is set
        if (params.pickingShippingDetailId == null) {
            throw new Error('Missing required parameter pickingShippingDetailId when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Products By Id
     * @param id
     * @param pickingShippingDetailId
     */
    ProductPickingShippingDetailsApi.prototype.procurementProductsIdPickingShippingDetailsPickingShippingDetailIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails/{pickingShippingDetailId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'pickingShippingDetailId' + '}', String(params.pickingShippingDetailId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdGet');
        }
        // verify required parameter 'pickingShippingDetailId' is set
        if (params.pickingShippingDetailId == null) {
            throw new Error('Missing required parameter pickingShippingDetailId when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Products
     * @param id
     * @param pickingShippingDetailId
     * @param operations
     */
    ProductPickingShippingDetailsApi.prototype.procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails/{pickingShippingDetailId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'pickingShippingDetailId' + '}', String(params.pickingShippingDetailId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPatch');
        }
        // verify required parameter 'pickingShippingDetailId' is set
        if (params.pickingShippingDetailId == null) {
            throw new Error('Missing required parameter pickingShippingDetailId when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Products
     * @param id
     * @param pickingShippingDetailId
     * @param productPickingShippingDetails
     */
    ProductPickingShippingDetailsApi.prototype.procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails/{pickingShippingDetailId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'pickingShippingDetailId' + '}', String(params.pickingShippingDetailId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPut');
        }
        // verify required parameter 'pickingShippingDetailId' is set
        if (params.pickingShippingDetailId == null) {
            throw new Error('Missing required parameter pickingShippingDetailId when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPut');
        }
        // verify required parameter 'productPickingShippingDetails' is set
        if (params.productPickingShippingDetails == null) {
            throw new Error('Missing required parameter productPickingShippingDetails when calling procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.productPickingShippingDetails)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Product Picking Shipping Detail
     * @param id
     * @param productPickingShippingDetails
     */
    ProductPickingShippingDetailsApi.prototype.procurementProductsIdPickingShippingDetailsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}/pickingShippingDetails'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdPickingShippingDetailsPost');
        }
        // verify required parameter 'productPickingShippingDetails' is set
        if (params.productPickingShippingDetails == null) {
            throw new Error('Missing required parameter productPickingShippingDetails when calling procurementProductsIdPickingShippingDetailsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.productPickingShippingDetails)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ProductPickingShippingDetailsApi;
}());
exports.ProductPickingShippingDetailsApi = ProductPickingShippingDetailsApi;
//}
//export namespace  {
'use strict';
var ProductTypesApi = (function () {
    function ProductTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Product Typess Count
     * @param conditions
     */
    ProductTypesApi.prototype.procurementTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Product Typess
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ProductTypesApi.prototype.procurementTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Product Types By Id
     * @param id
     */
    ProductTypesApi.prototype.procurementTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Product Types By Id
     * @param id
     */
    ProductTypesApi.prototype.procurementTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Product Types
     * @param id
     * @param operations
     */
    ProductTypesApi.prototype.procurementTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Product Types
     * @param id
     * @param productTypes
     */
    ProductTypesApi.prototype.procurementTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementTypesIdPut');
        }
        // verify required parameter 'productTypes' is set
        if (params.productTypes == null) {
            throw new Error('Missing required parameter productTypes when calling procurementTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.productTypes)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Product Types
     * @param productTypes
     */
    ProductTypesApi.prototype.procurementTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'productTypes' is set
        if (params.productTypes == null) {
            throw new Error('Missing required parameter productTypes when calling procurementTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.productTypes)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ProductTypesApi;
}());
exports.ProductTypesApi = ProductTypesApi;
//}
//export namespace  {
'use strict';
var ProductsItemApi = (function () {
    function ProductsItemApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Products Count
     * @param conditions
     */
    ProductsItemApi.prototype.procurementProductsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Products
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ProductsItemApi.prototype.procurementProductsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Product By Id
     * @param id
     */
    ProductsItemApi.prototype.procurementProductsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Product By Id
     * @param id
     */
    ProductsItemApi.prototype.procurementProductsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Product
     * @param id
     * @param operations
     */
    ProductsItemApi.prototype.procurementProductsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementProductsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Product
     * @param id
     * @param productItem
     */
    ProductsItemApi.prototype.procurementProductsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementProductsIdPut');
        }
        // verify required parameter 'productItem' is set
        if (params.productItem == null) {
            throw new Error('Missing required parameter productItem when calling procurementProductsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.productItem)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Product
     * @param productItem
     */
    ProductsItemApi.prototype.procurementProductsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/products';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'productItem' is set
        if (params.productItem == null) {
            throw new Error('Missing required parameter productItem when calling procurementProductsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.productItem)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ProductsItemApi;
}());
exports.ProductsItemApi = ProductsItemApi;
//}
//export namespace  {
'use strict';
var ProjectContactsApi = (function () {
    function ProjectContactsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Project Contact By Id
     * @param id
     * @param contactId
     */
    ProjectContactsApi.prototype.projectProjectsIdContactsContactIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/contacts/{contactId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'contactId' + '}', String(params.contactId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdContactsContactIdDelete');
        }
        // verify required parameter 'contactId' is set
        if (params.contactId == null) {
            throw new Error('Missing required parameter contactId when calling projectProjectsIdContactsContactIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Project Contact By Id
     * @param id
     * @param contactId
     */
    ProjectContactsApi.prototype.projectProjectsIdContactsContactIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/contacts/{contactId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'contactId' + '}', String(params.contactId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdContactsContactIdGet');
        }
        // verify required parameter 'contactId' is set
        if (params.contactId == null) {
            throw new Error('Missing required parameter contactId when calling projectProjectsIdContactsContactIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Project Contacts
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ProjectContactsApi.prototype.projectProjectsIdContactsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/contacts'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdContactsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Project Contact
     * @param id
     * @param contact
     */
    ProjectContactsApi.prototype.projectProjectsIdContactsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/contacts'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdContactsPost');
        }
        // verify required parameter 'contact' is set
        if (params.contact == null) {
            throw new Error('Missing required parameter contact when calling projectProjectsIdContactsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.contact)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ProjectContactsApi;
}());
exports.ProjectContactsApi = ProjectContactsApi;
//}
//export namespace  {
'use strict';
var ProjectNotesApi = (function () {
    function ProjectNotesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Project Notes Count
     * @param id
     * @param conditions
     */
    ProjectNotesApi.prototype.projectProjectsIdNotesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/notes/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdNotesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Project Notes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ProjectNotesApi.prototype.projectProjectsIdNotesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/notes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdNotesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Project Note By Id
     * @param id
     * @param noteId
     */
    ProjectNotesApi.prototype.projectProjectsIdNotesNoteIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdNotesNoteIdDelete');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling projectProjectsIdNotesNoteIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Project Note By Id
     * @param id
     * @param noteId
     */
    ProjectNotesApi.prototype.projectProjectsIdNotesNoteIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdNotesNoteIdGet');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling projectProjectsIdNotesNoteIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Project Note
     * @param id
     * @param noteId
     * @param operations
     */
    ProjectNotesApi.prototype.projectProjectsIdNotesNoteIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdNotesNoteIdPatch');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling projectProjectsIdNotesNoteIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling projectProjectsIdNotesNoteIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Project Note
     * @param id
     * @param noteId
     * @param note
     */
    ProjectNotesApi.prototype.projectProjectsIdNotesNoteIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdNotesNoteIdPut');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling projectProjectsIdNotesNoteIdPut');
        }
        // verify required parameter 'note' is set
        if (params.note == null) {
            throw new Error('Missing required parameter note when calling projectProjectsIdNotesNoteIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.note)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Project Note
     * @param id
     * @param note
     */
    ProjectNotesApi.prototype.projectProjectsIdNotesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/notes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdNotesPost');
        }
        // verify required parameter 'note' is set
        if (params.note == null) {
            throw new Error('Missing required parameter note when calling projectProjectsIdNotesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.note)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ProjectNotesApi;
}());
exports.ProjectNotesApi = ProjectNotesApi;
//}
//export namespace  {
'use strict';
var ProjectPhasesApi = (function () {
    function ProjectPhasesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Project Phases Count
     * @param id
     * @param conditions
     */
    ProjectPhasesApi.prototype.projectProjectsIdPhasesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/phases/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdPhasesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Project Phases
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ProjectPhasesApi.prototype.projectProjectsIdPhasesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/phases'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdPhasesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Project Phase By Id
     * @param id
     * @param phaseId
     */
    ProjectPhasesApi.prototype.projectProjectsIdPhasesPhaseIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/phases/{phaseId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'phaseId' + '}', String(params.phaseId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdPhasesPhaseIdDelete');
        }
        // verify required parameter 'phaseId' is set
        if (params.phaseId == null) {
            throw new Error('Missing required parameter phaseId when calling projectProjectsIdPhasesPhaseIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Project Phase By Id
     * @param id
     * @param phaseId
     */
    ProjectPhasesApi.prototype.projectProjectsIdPhasesPhaseIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/phases/{phaseId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'phaseId' + '}', String(params.phaseId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdPhasesPhaseIdGet');
        }
        // verify required parameter 'phaseId' is set
        if (params.phaseId == null) {
            throw new Error('Missing required parameter phaseId when calling projectProjectsIdPhasesPhaseIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Project Phase
     * @param id
     * @param phaseId
     * @param operations
     */
    ProjectPhasesApi.prototype.projectProjectsIdPhasesPhaseIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/phases/{phaseId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'phaseId' + '}', String(params.phaseId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdPhasesPhaseIdPatch');
        }
        // verify required parameter 'phaseId' is set
        if (params.phaseId == null) {
            throw new Error('Missing required parameter phaseId when calling projectProjectsIdPhasesPhaseIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling projectProjectsIdPhasesPhaseIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Project Phase
     * @param id
     * @param phaseId
     * @param projectPhase
     */
    ProjectPhasesApi.prototype.projectProjectsIdPhasesPhaseIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/phases/{phaseId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'phaseId' + '}', String(params.phaseId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdPhasesPhaseIdPut');
        }
        // verify required parameter 'phaseId' is set
        if (params.phaseId == null) {
            throw new Error('Missing required parameter phaseId when calling projectProjectsIdPhasesPhaseIdPut');
        }
        // verify required parameter 'projectPhase' is set
        if (params.projectPhase == null) {
            throw new Error('Missing required parameter projectPhase when calling projectProjectsIdPhasesPhaseIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.projectPhase)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Project Phase
     * @param id
     * @param projectPhase
     */
    ProjectPhasesApi.prototype.projectProjectsIdPhasesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/phases'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdPhasesPost');
        }
        // verify required parameter 'projectPhase' is set
        if (params.projectPhase == null) {
            throw new Error('Missing required parameter projectPhase when calling projectProjectsIdPhasesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.projectPhase)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ProjectPhasesApi;
}());
exports.ProjectPhasesApi = ProjectPhasesApi;
//}
//export namespace  {
'use strict';
var ProjectsApi = (function () {
    function ProjectsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Projects Count
     * @param conditions
     * @param customFieldConditions
     */
    ProjectsApi.prototype.projectProjectsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Projects
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ProjectsApi.prototype.projectProjectsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Project By Id
     * @param id
     */
    ProjectsApi.prototype.projectProjectsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Project By Id
     * @param id
     */
    ProjectsApi.prototype.projectProjectsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Project
     * @param id
     * @param operations
     */
    ProjectsApi.prototype.projectProjectsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling projectProjectsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Project
     * @param id
     * @param project
     */
    ProjectsApi.prototype.projectProjectsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdPut');
        }
        // verify required parameter 'project' is set
        if (params.project == null) {
            throw new Error('Missing required parameter project when calling projectProjectsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.project)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Project
     * @param project
     */
    ProjectsApi.prototype.projectProjectsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'project' is set
        if (params.project == null) {
            throw new Error('Missing required parameter project when calling projectProjectsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.project)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ProjectsApi;
}());
exports.ProjectsApi = ProjectsApi;
//}
//export namespace  {
'use strict';
var ProjectsTeammembersApi = (function () {
    function ProjectsTeammembersApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Team Members Count
     * @param id
     * @param conditions
     */
    ProjectsTeammembersApi.prototype.projectProjectsIdTeamMembersCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/teamMembers/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Team Members
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ProjectsTeammembersApi.prototype.projectProjectsIdTeamMembersGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/teamMembers'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Team Member
     * @param id
     * @param teamMember
     */
    ProjectsTeammembersApi.prototype.projectProjectsIdTeamMembersPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/teamMembers'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersPost');
        }
        // verify required parameter 'teamMember' is set
        if (params.teamMember == null) {
            throw new Error('Missing required parameter teamMember when calling projectProjectsIdTeamMembersPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.teamMember)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Team Member By Id
     * @param id
     * @param teamMemberId
     */
    ProjectsTeammembersApi.prototype.projectProjectsIdTeamMembersTeamMemberIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/teamMembers/{teamMemberId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamMemberId' + '}', String(params.teamMemberId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersTeamMemberIdDelete');
        }
        // verify required parameter 'teamMemberId' is set
        if (params.teamMemberId == null) {
            throw new Error('Missing required parameter teamMemberId when calling projectProjectsIdTeamMembersTeamMemberIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Team Member By Id
     * @param id
     * @param teamMemberId
     */
    ProjectsTeammembersApi.prototype.projectProjectsIdTeamMembersTeamMemberIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/teamMembers/{teamMemberId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamMemberId' + '}', String(params.teamMemberId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersTeamMemberIdGet');
        }
        // verify required parameter 'teamMemberId' is set
        if (params.teamMemberId == null) {
            throw new Error('Missing required parameter teamMemberId when calling projectProjectsIdTeamMembersTeamMemberIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Team Member
     * @param id
     * @param teamMemberId
     * @param operations
     */
    ProjectsTeammembersApi.prototype.projectProjectsIdTeamMembersTeamMemberIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/teamMembers/{teamMemberId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamMemberId' + '}', String(params.teamMemberId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersTeamMemberIdPatch');
        }
        // verify required parameter 'teamMemberId' is set
        if (params.teamMemberId == null) {
            throw new Error('Missing required parameter teamMemberId when calling projectProjectsIdTeamMembersTeamMemberIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling projectProjectsIdTeamMembersTeamMemberIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Team Member
     * @param id
     * @param teamMemberId
     * @param teamMember
     */
    ProjectsTeammembersApi.prototype.projectProjectsIdTeamMembersTeamMemberIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/project/projects/{id}/teamMembers/{teamMemberId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'teamMemberId' + '}', String(params.teamMemberId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling projectProjectsIdTeamMembersTeamMemberIdPut');
        }
        // verify required parameter 'teamMemberId' is set
        if (params.teamMemberId == null) {
            throw new Error('Missing required parameter teamMemberId when calling projectProjectsIdTeamMembersTeamMemberIdPut');
        }
        // verify required parameter 'teamMember' is set
        if (params.teamMember == null) {
            throw new Error('Missing required parameter teamMember when calling projectProjectsIdTeamMembersTeamMemberIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.teamMember)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ProjectsTeammembersApi;
}());
exports.ProjectsTeammembersApi = ProjectsTeammembersApi;
//}
//export namespace  {
'use strict';
var PurchaseOrderLineItemsApi = (function () {
    function PurchaseOrderLineItemsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Purchase Order Line Items Count
     * @param id
     * @param conditions
     */
    PurchaseOrderLineItemsApi.prototype.procurementPurchaseordersIdLineitemsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Purchase Order Line Items
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    PurchaseOrderLineItemsApi.prototype.procurementPurchaseordersIdLineitemsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Purchase Order Line Item By Id
     * @param id
     * @param lineItemId
     */
    PurchaseOrderLineItemsApi.prototype.procurementPurchaseordersIdLineitemsLineItemIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems/{lineItemId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'lineItemId' + '}', String(params.lineItemId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsLineItemIdDelete');
        }
        // verify required parameter 'lineItemId' is set
        if (params.lineItemId == null) {
            throw new Error('Missing required parameter lineItemId when calling procurementPurchaseordersIdLineitemsLineItemIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Purchase Order Line Item By Id
     * @param id
     * @param lineItemId
     */
    PurchaseOrderLineItemsApi.prototype.procurementPurchaseordersIdLineitemsLineItemIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems/{lineItemId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'lineItemId' + '}', String(params.lineItemId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsLineItemIdGet');
        }
        // verify required parameter 'lineItemId' is set
        if (params.lineItemId == null) {
            throw new Error('Missing required parameter lineItemId when calling procurementPurchaseordersIdLineitemsLineItemIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Purchase Order Line Item
     * @param id
     * @param lineItemId
     * @param operations
     */
    PurchaseOrderLineItemsApi.prototype.procurementPurchaseordersIdLineitemsLineItemIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems/{lineItemId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'lineItemId' + '}', String(params.lineItemId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsLineItemIdPatch');
        }
        // verify required parameter 'lineItemId' is set
        if (params.lineItemId == null) {
            throw new Error('Missing required parameter lineItemId when calling procurementPurchaseordersIdLineitemsLineItemIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementPurchaseordersIdLineitemsLineItemIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Purchase Order Line Item
     * @param id
     * @param lineItemId
     * @param purchaseOrderLineItem
     */
    PurchaseOrderLineItemsApi.prototype.procurementPurchaseordersIdLineitemsLineItemIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems/{lineItemId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'lineItemId' + '}', String(params.lineItemId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsLineItemIdPut');
        }
        // verify required parameter 'lineItemId' is set
        if (params.lineItemId == null) {
            throw new Error('Missing required parameter lineItemId when calling procurementPurchaseordersIdLineitemsLineItemIdPut');
        }
        // verify required parameter 'purchaseOrderLineItem' is set
        if (params.purchaseOrderLineItem == null) {
            throw new Error('Missing required parameter purchaseOrderLineItem when calling procurementPurchaseordersIdLineitemsLineItemIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.purchaseOrderLineItem)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Purchase Order Line Item
     * @param id
     * @param purchaseOrderLineItem
     */
    PurchaseOrderLineItemsApi.prototype.procurementPurchaseordersIdLineitemsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/{id}/lineitems'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPurchaseordersIdLineitemsPost');
        }
        // verify required parameter 'purchaseOrderLineItem' is set
        if (params.purchaseOrderLineItem == null) {
            throw new Error('Missing required parameter purchaseOrderLineItem when calling procurementPurchaseordersIdLineitemsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.purchaseOrderLineItem)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return PurchaseOrderLineItemsApi;
}());
exports.PurchaseOrderLineItemsApi = PurchaseOrderLineItemsApi;
//}
//export namespace  {
'use strict';
var PurchaseOrdersApi = (function () {
    function PurchaseOrdersApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Purchase Orders Count
     * @param conditions
     */
    PurchaseOrdersApi.prototype.procurementPurchaseordersCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Purchase Orders
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    PurchaseOrdersApi.prototype.procurementPurchaseordersGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Purchase Order By Id
     * @param id
     */
    PurchaseOrdersApi.prototype.procurementPurchaseordersIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPurchaseordersIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Purchase Order By Id
     * @param id
     */
    PurchaseOrdersApi.prototype.procurementPurchaseordersIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPurchaseordersIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Purchase Order
     * @param id
     * @param operations
     */
    PurchaseOrdersApi.prototype.procurementPurchaseordersIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPurchaseordersIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementPurchaseordersIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Purchase Order
     * @param id
     * @param purchaseOrder
     */
    PurchaseOrdersApi.prototype.procurementPurchaseordersIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementPurchaseordersIdPut');
        }
        // verify required parameter 'purchaseOrder' is set
        if (params.purchaseOrder == null) {
            throw new Error('Missing required parameter purchaseOrder when calling procurementPurchaseordersIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.purchaseOrder)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Purchase Order
     * @param purchaseOrder
     */
    PurchaseOrdersApi.prototype.procurementPurchaseordersPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/purchaseorders';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'purchaseOrder' is set
        if (params.purchaseOrder == null) {
            throw new Error('Missing required parameter purchaseOrder when calling procurementPurchaseordersPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.purchaseOrder)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return PurchaseOrdersApi;
}());
exports.PurchaseOrdersApi = PurchaseOrdersApi;
//}
//export namespace  {
'use strict';
var RMAActionsApi = (function () {
    function RMAActionsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get R M A Action Count
     * @param conditions
     */
    RMAActionsApi.prototype.procurementRmaActionsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/rmaActions/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get R M A Action
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    RMAActionsApi.prototype.procurementRmaActionsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/rmaActions';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete R M A Action By Id
     * @param id
     */
    RMAActionsApi.prototype.procurementRmaActionsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/rmaActions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementRmaActionsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get R M A Action By Id
     * @param id
     */
    RMAActionsApi.prototype.procurementRmaActionsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/rmaActions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementRmaActionsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update R M A Action
     * @param id
     * @param operations
     */
    RMAActionsApi.prototype.procurementRmaActionsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/rmaActions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementRmaActionsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementRmaActionsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace R M A Action
     * @param id
     * @param rmaAction
     */
    RMAActionsApi.prototype.procurementRmaActionsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/rmaActions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementRmaActionsIdPut');
        }
        // verify required parameter 'rmaAction' is set
        if (params.rmaAction == null) {
            throw new Error('Missing required parameter rmaAction when calling procurementRmaActionsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.rmaAction)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create R M A Action
     * @param rmaAction
     */
    RMAActionsApi.prototype.procurementRmaActionsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/rmaActions';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'rmaAction' is set
        if (params.rmaAction == null) {
            throw new Error('Missing required parameter rmaAction when calling procurementRmaActionsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.rmaAction)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return RMAActionsApi;
}());
exports.RMAActionsApi = RMAActionsApi;
//}
//export namespace  {
'use strict';
var RMADispositionsApi = (function () {
    function RMADispositionsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get R M A Disposition Count
     * @param conditions
     */
    RMADispositionsApi.prototype.procurementRMADispositionsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/RMADispositions/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get R M A Disposition
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    RMADispositionsApi.prototype.procurementRMADispositionsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/RMADispositions';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete R M A Disposition By Id
     * @param id
     */
    RMADispositionsApi.prototype.procurementRMADispositionsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/RMADispositions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementRMADispositionsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get R M A Disposition By Id
     * @param id
     */
    RMADispositionsApi.prototype.procurementRMADispositionsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/RMADispositions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementRMADispositionsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update R M A Disposition
     * @param id
     * @param operations
     */
    RMADispositionsApi.prototype.procurementRMADispositionsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/RMADispositions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementRMADispositionsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementRMADispositionsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace R M A Disposition
     * @param id
     * @param rMADisposition
     */
    RMADispositionsApi.prototype.procurementRMADispositionsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/RMADispositions/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementRMADispositionsIdPut');
        }
        // verify required parameter 'rMADisposition' is set
        if (params.rMADisposition == null) {
            throw new Error('Missing required parameter rMADisposition when calling procurementRMADispositionsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.rMADisposition)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create R M A Disposition
     * @param rMADisposition
     */
    RMADispositionsApi.prototype.procurementRMADispositionsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/RMADispositions';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'rMADisposition' is set
        if (params.rMADisposition == null) {
            throw new Error('Missing required parameter rMADisposition when calling procurementRMADispositionsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.rMADisposition)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return RMADispositionsApi;
}());
exports.RMADispositionsApi = RMADispositionsApi;
//}
//export namespace  {
'use strict';
var ReportsApi = (function () {
    function ReportsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Reports
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     */
    ReportsApi.prototype.systemReportsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/reports';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Column Definitions
     * @param reportName
     */
    ReportsApi.prototype.systemReportsReportNameColumnsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/reports/{reportName}/columns'
            .replace('{' + 'reportName' + '}', String(params.reportName));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'reportName' is set
        if (params.reportName == null) {
            throw new Error('Missing required parameter reportName when calling systemReportsReportNameColumnsGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Report Results Count
     * @param reportName
     * @param conditions
     */
    ReportsApi.prototype.systemReportsReportNameCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/reports/{reportName}/count'
            .replace('{' + 'reportName' + '}', String(params.reportName));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'reportName' is set
        if (params.reportName == null) {
            throw new Error('Missing required parameter reportName when calling systemReportsReportNameCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Report Results
     * @param reportName
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     * @param columns
     */
    ReportsApi.prototype.systemReportsReportNameGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/reports/{reportName}'
            .replace('{' + 'reportName' + '}', String(params.reportName));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'reportName' is set
        if (params.reportName == null) {
            throw new Error('Missing required parameter reportName when calling systemReportsReportNameGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        if (params.columns !== undefined) {
            queryParameters['columns'] = params.columns;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ReportsApi;
}());
exports.ReportsApi = ReportsApi;
//}
//export namespace  {
'use strict';
var RolesApi = (function () {
    function RolesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Role Count
     * @param conditions
     */
    RolesApi.prototype.salesRolesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/roles/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Role
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    RolesApi.prototype.salesRolesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/roles';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Role By Id
     * @param id
     */
    RolesApi.prototype.salesRolesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/roles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesRolesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Role By Id
     * @param id
     */
    RolesApi.prototype.salesRolesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/roles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesRolesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Role
     * @param id
     * @param operations
     */
    RolesApi.prototype.salesRolesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/roles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesRolesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesRolesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Role
     * @param id
     * @param role
     */
    RolesApi.prototype.salesRolesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/roles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesRolesIdPut');
        }
        // verify required parameter 'role' is set
        if (params.role == null) {
            throw new Error('Missing required parameter role when calling salesRolesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.role)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Role
     * @param role
     */
    RolesApi.prototype.salesRolesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/roles';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'role' is set
        if (params.role == null) {
            throw new Error('Missing required parameter role when calling salesRolesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.role)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return RolesApi;
}());
exports.RolesApi = RolesApi;
//}
//export namespace  {
'use strict';
var SalesProbabilitiesApi = (function () {
    function SalesProbabilitiesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Probabilities Count
     * @param conditions
     */
    SalesProbabilitiesApi.prototype.salesProbabilitiesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/probabilities/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Probabilities
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    SalesProbabilitiesApi.prototype.salesProbabilitiesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/probabilities';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Probability By Id
     * @param id
     */
    SalesProbabilitiesApi.prototype.salesProbabilitiesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/probabilities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesProbabilitiesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Probability By Id
     * @param id
     */
    SalesProbabilitiesApi.prototype.salesProbabilitiesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/probabilities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesProbabilitiesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Probability
     * @param id
     * @param operations
     */
    SalesProbabilitiesApi.prototype.salesProbabilitiesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/probabilities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesProbabilitiesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling salesProbabilitiesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Probability
     * @param id
     * @param probability
     */
    SalesProbabilitiesApi.prototype.salesProbabilitiesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/probabilities/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling salesProbabilitiesIdPut');
        }
        // verify required parameter 'probability' is set
        if (params.probability == null) {
            throw new Error('Missing required parameter probability when calling salesProbabilitiesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.probability)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Probability
     * @param probability
     */
    SalesProbabilitiesApi.prototype.salesProbabilitiesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/sales/probabilities';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'probability' is set
        if (params.probability == null) {
            throw new Error('Missing required parameter probability when calling salesProbabilitiesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.probability)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return SalesProbabilitiesApi;
}());
exports.SalesProbabilitiesApi = SalesProbabilitiesApi;
//}
//export namespace  {
'use strict';
var ScheduleEntriesApi = (function () {
    function ScheduleEntriesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Schedules Count
     * @param conditions
     */
    ScheduleEntriesApi.prototype.scheduleEntriesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/entries/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Schedules
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ScheduleEntriesApi.prototype.scheduleEntriesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/entries';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Schedule By Id
     * @param id
     */
    ScheduleEntriesApi.prototype.scheduleEntriesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleEntriesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Schedule By Id
     * @param id
     */
    ScheduleEntriesApi.prototype.scheduleEntriesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleEntriesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Schedule
     * @param id
     * @param operations
     */
    ScheduleEntriesApi.prototype.scheduleEntriesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleEntriesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling scheduleEntriesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Schedule
     * @param id
     * @param scheduleEntry
     */
    ScheduleEntriesApi.prototype.scheduleEntriesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleEntriesIdPut');
        }
        // verify required parameter 'scheduleEntry' is set
        if (params.scheduleEntry == null) {
            throw new Error('Missing required parameter scheduleEntry when calling scheduleEntriesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.scheduleEntry)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Schedule
     * @param scheduleEntry
     */
    ScheduleEntriesApi.prototype.scheduleEntriesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/entries';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'scheduleEntry' is set
        if (params.scheduleEntry == null) {
            throw new Error('Missing required parameter scheduleEntry when calling scheduleEntriesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.scheduleEntry)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ScheduleEntriesApi;
}());
exports.ScheduleEntriesApi = ScheduleEntriesApi;
//}
//export namespace  {
'use strict';
var ScheduleReminderTimesApi = (function () {
    function ScheduleReminderTimesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Reminder Time Count
     * @param conditions
     */
    ScheduleReminderTimesApi.prototype.scheduleReminderTimesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/reminderTimes/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Reminder Time
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ScheduleReminderTimesApi.prototype.scheduleReminderTimesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/reminderTimes';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Reminder Time By Id
     * @param id
     */
    ScheduleReminderTimesApi.prototype.scheduleReminderTimesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/reminderTimes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleReminderTimesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Reminder Time
     * @param id
     * @param operations
     */
    ScheduleReminderTimesApi.prototype.scheduleReminderTimesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/reminderTimes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleReminderTimesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling scheduleReminderTimesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Reminder Time
     * @param id
     * @param reminderTime
     */
    ScheduleReminderTimesApi.prototype.scheduleReminderTimesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/reminderTimes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleReminderTimesIdPut');
        }
        // verify required parameter 'reminderTime' is set
        if (params.reminderTime == null) {
            throw new Error('Missing required parameter reminderTime when calling scheduleReminderTimesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.reminderTime)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ScheduleReminderTimesApi;
}());
exports.ScheduleReminderTimesApi = ScheduleReminderTimesApi;
//}
//export namespace  {
'use strict';
var ScheduleStatusesApi = (function () {
    function ScheduleStatusesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Schedule Statuses Count
     * @param conditions
     */
    ScheduleStatusesApi.prototype.scheduleStatusesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/statuses/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Schedule Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ScheduleStatusesApi.prototype.scheduleStatusesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Schedule Status By Id
     * @param id
     */
    ScheduleStatusesApi.prototype.scheduleStatusesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleStatusesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Schedule Status By Id
     * @param id
     */
    ScheduleStatusesApi.prototype.scheduleStatusesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleStatusesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Schedule Status
     * @param id
     * @param operations
     */
    ScheduleStatusesApi.prototype.scheduleStatusesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleStatusesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling scheduleStatusesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Schedule Status
     * @param id
     * @param scheduleStatus
     */
    ScheduleStatusesApi.prototype.scheduleStatusesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/statuses/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleStatusesIdPut');
        }
        // verify required parameter 'scheduleStatus' is set
        if (params.scheduleStatus == null) {
            throw new Error('Missing required parameter scheduleStatus when calling scheduleStatusesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.scheduleStatus)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Schedule Status
     * @param scheduleStatus
     */
    ScheduleStatusesApi.prototype.scheduleStatusesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/statuses';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'scheduleStatus' is set
        if (params.scheduleStatus == null) {
            throw new Error('Missing required parameter scheduleStatus when calling scheduleStatusesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.scheduleStatus)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ScheduleStatusesApi;
}());
exports.ScheduleStatusesApi = ScheduleStatusesApi;
//}
//export namespace  {
'use strict';
var ScheduleStopwatchesApi = (function () {
    function ScheduleStopwatchesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Schedule Stopwatches Count
     * @param conditions
     */
    ScheduleStopwatchesApi.prototype.timeSchedulestopwatchesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/schedulestopwatches/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Schedule Stopwatches
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ScheduleStopwatchesApi.prototype.timeSchedulestopwatchesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/schedulestopwatches';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Schedule Stopwatch By Id
     * @param id
     */
    ScheduleStopwatchesApi.prototype.timeSchedulestopwatchesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/schedulestopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeSchedulestopwatchesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Schedule Stopwatch By Id
     * @param id
     */
    ScheduleStopwatchesApi.prototype.timeSchedulestopwatchesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/schedulestopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeSchedulestopwatchesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Schedule Stopwatch
     * @param id
     * @param operations
     */
    ScheduleStopwatchesApi.prototype.timeSchedulestopwatchesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/schedulestopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeSchedulestopwatchesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling timeSchedulestopwatchesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Schedule Stopwatch
     * @param id
     * @param scheduleStopwatch
     */
    ScheduleStopwatchesApi.prototype.timeSchedulestopwatchesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/schedulestopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeSchedulestopwatchesIdPut');
        }
        // verify required parameter 'scheduleStopwatch' is set
        if (params.scheduleStopwatch == null) {
            throw new Error('Missing required parameter scheduleStopwatch when calling timeSchedulestopwatchesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.scheduleStopwatch)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Schedule Stopwatch
     * @param scheduleStopwatch
     */
    ScheduleStopwatchesApi.prototype.timeSchedulestopwatchesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/schedulestopwatches';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'scheduleStopwatch' is set
        if (params.scheduleStopwatch == null) {
            throw new Error('Missing required parameter scheduleStopwatch when calling timeSchedulestopwatchesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.scheduleStopwatch)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ScheduleStopwatchesApi;
}());
exports.ScheduleStopwatchesApi = ScheduleStopwatchesApi;
//}
//export namespace  {
'use strict';
var ScheduleTypesApi = (function () {
    function ScheduleTypesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Schedule Types Count
     * @param conditions
     */
    ScheduleTypesApi.prototype.scheduleTypesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/types/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Schedule Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ScheduleTypesApi.prototype.scheduleTypesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Schedule Type By Id
     * @param id
     */
    ScheduleTypesApi.prototype.scheduleTypesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleTypesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Schedule Type By Id
     * @param id
     */
    ScheduleTypesApi.prototype.scheduleTypesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleTypesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Schedule Type
     * @param id
     * @param operations
     */
    ScheduleTypesApi.prototype.scheduleTypesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleTypesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling scheduleTypesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Schedule Type
     * @param id
     * @param scheduleType
     */
    ScheduleTypesApi.prototype.scheduleTypesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/types/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling scheduleTypesIdPut');
        }
        // verify required parameter 'scheduleType' is set
        if (params.scheduleType == null) {
            throw new Error('Missing required parameter scheduleType when calling scheduleTypesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.scheduleType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Schedule Type
     * @param scheduleType
     */
    ScheduleTypesApi.prototype.scheduleTypesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/schedule/types';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'scheduleType' is set
        if (params.scheduleType == null) {
            throw new Error('Missing required parameter scheduleType when calling scheduleTypesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.scheduleType)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ScheduleTypesApi;
}());
exports.ScheduleTypesApi = ScheduleTypesApi;
//}
//export namespace  {
'use strict';
var ShipmentMethodsApi = (function () {
    function ShipmentMethodsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Shipment Methods Count
     * @param conditions
     */
    ShipmentMethodsApi.prototype.procurementShipmentmethodsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/shipmentmethods/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Shipment Methods
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    ShipmentMethodsApi.prototype.procurementShipmentmethodsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/shipmentmethods';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Shipment Method By Id
     * @param id
     */
    ShipmentMethodsApi.prototype.procurementShipmentmethodsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/shipmentmethods/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementShipmentmethodsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Shipment Method By Id
     * @param id
     */
    ShipmentMethodsApi.prototype.procurementShipmentmethodsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/shipmentmethods/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementShipmentmethodsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Shipment Method
     * @param id
     * @param operations
     */
    ShipmentMethodsApi.prototype.procurementShipmentmethodsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/shipmentmethods/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementShipmentmethodsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementShipmentmethodsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Shipment Method
     * @param id
     * @param shipmentMethod
     */
    ShipmentMethodsApi.prototype.procurementShipmentmethodsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/shipmentmethods/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementShipmentmethodsIdPut');
        }
        // verify required parameter 'shipmentMethod' is set
        if (params.shipmentMethod == null) {
            throw new Error('Missing required parameter shipmentMethod when calling procurementShipmentmethodsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.shipmentMethod)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Shipment Method
     * @param shipmentMethod
     */
    ShipmentMethodsApi.prototype.procurementShipmentmethodsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/shipmentmethods';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'shipmentMethod' is set
        if (params.shipmentMethod == null) {
            throw new Error('Missing required parameter shipmentMethod when calling procurementShipmentmethodsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.shipmentMethod)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return ShipmentMethodsApi;
}());
exports.ShipmentMethodsApi = ShipmentMethodsApi;
//}
//export namespace  {
'use strict';
var SkillCategoriesApi = (function () {
    function SkillCategoriesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Skill Categories Count
     * @param conditions
     */
    SkillCategoriesApi.prototype.systemSkillCategoriesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skillCategories/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Skill Categories
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    SkillCategoriesApi.prototype.systemSkillCategoriesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skillCategories';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Skill Category By Id
     * @param id
     */
    SkillCategoriesApi.prototype.systemSkillCategoriesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skillCategories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemSkillCategoriesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Skill Category By Id
     * @param id
     */
    SkillCategoriesApi.prototype.systemSkillCategoriesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skillCategories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemSkillCategoriesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Skill Category
     * @param id
     * @param operations
     */
    SkillCategoriesApi.prototype.systemSkillCategoriesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skillCategories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemSkillCategoriesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemSkillCategoriesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Skill Category
     * @param id
     * @param skillCategory
     */
    SkillCategoriesApi.prototype.systemSkillCategoriesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skillCategories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemSkillCategoriesIdPut');
        }
        // verify required parameter 'skillCategory' is set
        if (params.skillCategory == null) {
            throw new Error('Missing required parameter skillCategory when calling systemSkillCategoriesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.skillCategory)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Skill Category
     * @param skillCategory
     */
    SkillCategoriesApi.prototype.systemSkillCategoriesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skillCategories';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'skillCategory' is set
        if (params.skillCategory == null) {
            throw new Error('Missing required parameter skillCategory when calling systemSkillCategoriesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.skillCategory)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return SkillCategoriesApi;
}());
exports.SkillCategoriesApi = SkillCategoriesApi;
//}
//export namespace  {
'use strict';
var SkillsApi = (function () {
    function SkillsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Skill Count
     * @param conditions
     */
    SkillsApi.prototype.systemSkillsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skills/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Skill
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    SkillsApi.prototype.systemSkillsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skills';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Skill By Id
     * @param id
     */
    SkillsApi.prototype.systemSkillsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skills/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemSkillsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Skill By Id
     * @param id
     */
    SkillsApi.prototype.systemSkillsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skills/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemSkillsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Skill
     * @param id
     * @param operations
     */
    SkillsApi.prototype.systemSkillsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skills/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemSkillsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemSkillsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Skill
     * @param id
     * @param skill
     */
    SkillsApi.prototype.systemSkillsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skills/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemSkillsIdPut');
        }
        // verify required parameter 'skill' is set
        if (params.skill == null) {
            throw new Error('Missing required parameter skill when calling systemSkillsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.skill)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Skill
     * @param skill
     */
    SkillsApi.prototype.systemSkillsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/skills';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'skill' is set
        if (params.skill == null) {
            throw new Error('Missing required parameter skill when calling systemSkillsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.skill)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return SkillsApi;
}());
exports.SkillsApi = SkillsApi;
//}
//export namespace  {
'use strict';
var SourcesApi = (function () {
    function SourcesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Create Sources Count
     * @param conditions
     */
    SourcesApi.prototype.serviceSourcesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/sources/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Sources
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    SourcesApi.prototype.serviceSourcesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/sources';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Source By Id
     * @param id
     */
    SourcesApi.prototype.serviceSourcesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/sources/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSourcesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Source By Id
     * @param id
     */
    SourcesApi.prototype.serviceSourcesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/sources/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSourcesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Source
     * @param id
     * @param operations
     */
    SourcesApi.prototype.serviceSourcesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/sources/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSourcesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceSourcesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Source
     * @param id
     * @param source
     */
    SourcesApi.prototype.serviceSourcesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/sources/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSourcesIdPut');
        }
        // verify required parameter 'source' is set
        if (params.source == null) {
            throw new Error('Missing required parameter source when calling serviceSourcesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.source)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Source
     * @param source
     */
    SourcesApi.prototype.serviceSourcesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/sources';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'source' is set
        if (params.source == null) {
            throw new Error('Missing required parameter source when calling serviceSourcesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.source)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return SourcesApi;
}());
exports.SourcesApi = SourcesApi;
//}
//export namespace  {
'use strict';
var SubCategoriesApi = (function () {
    function SubCategoriesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Sub Categories Count
     * @param id
     * @param conditions
     */
    SubCategoriesApi.prototype.procurementCategoriesIdSubcategoriesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/{id}/subcategories/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Sub Categories
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    SubCategoriesApi.prototype.procurementCategoriesIdSubcategoriesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/{id}/subcategories'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Sub Category
     * @param id
     * @param subCategory
     */
    SubCategoriesApi.prototype.procurementCategoriesIdSubcategoriesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/{id}/subcategories'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesPost');
        }
        // verify required parameter 'subCategory' is set
        if (params.subCategory == null) {
            throw new Error('Missing required parameter subCategory when calling procurementCategoriesIdSubcategoriesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.subCategory)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Sub Category By Id
     * @param id
     * @param subcategoryID
     */
    SubCategoriesApi.prototype.procurementCategoriesIdSubcategoriesSubcategoryIDDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/{id}/subcategories/{subcategoryID}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subcategoryID' + '}', String(params.subcategoryID));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesSubcategoryIDDelete');
        }
        // verify required parameter 'subcategoryID' is set
        if (params.subcategoryID == null) {
            throw new Error('Missing required parameter subcategoryID when calling procurementCategoriesIdSubcategoriesSubcategoryIDDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Sub Category By Id
     * @param id
     * @param subcategoryID
     */
    SubCategoriesApi.prototype.procurementCategoriesIdSubcategoriesSubcategoryIDGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/{id}/subcategories/{subcategoryID}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subcategoryID' + '}', String(params.subcategoryID));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesSubcategoryIDGet');
        }
        // verify required parameter 'subcategoryID' is set
        if (params.subcategoryID == null) {
            throw new Error('Missing required parameter subcategoryID when calling procurementCategoriesIdSubcategoriesSubcategoryIDGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Sub Category
     * @param id
     * @param subcategoryID
     * @param operations
     */
    SubCategoriesApi.prototype.procurementCategoriesIdSubcategoriesSubcategoryIDPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/{id}/subcategories/{subcategoryID}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subcategoryID' + '}', String(params.subcategoryID));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesSubcategoryIDPatch');
        }
        // verify required parameter 'subcategoryID' is set
        if (params.subcategoryID == null) {
            throw new Error('Missing required parameter subcategoryID when calling procurementCategoriesIdSubcategoriesSubcategoryIDPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementCategoriesIdSubcategoriesSubcategoryIDPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Sub Category
     * @param id
     * @param subcategoryID
     * @param subCategory
     */
    SubCategoriesApi.prototype.procurementCategoriesIdSubcategoriesSubcategoryIDPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/categories/{id}/subcategories/{subcategoryID}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'subcategoryID' + '}', String(params.subcategoryID));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementCategoriesIdSubcategoriesSubcategoryIDPut');
        }
        // verify required parameter 'subcategoryID' is set
        if (params.subcategoryID == null) {
            throw new Error('Missing required parameter subcategoryID when calling procurementCategoriesIdSubcategoriesSubcategoryIDPut');
        }
        // verify required parameter 'subCategory' is set
        if (params.subCategory == null) {
            throw new Error('Missing required parameter subCategory when calling procurementCategoriesIdSubcategoriesSubcategoryIDPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.subCategory)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return SubCategoriesApi;
}());
exports.SubCategoriesApi = SubCategoriesApi;
//}
//export namespace  {
'use strict';
var SurveyQuestionsApi = (function () {
    function SurveyQuestionsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Survey Questions Count
     * @param id
     * @param conditions
     */
    SurveyQuestionsApi.prototype.serviceSurveysIdQuestionsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/questions/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Survey Questions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    SurveyQuestionsApi.prototype.serviceSurveysIdQuestionsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/questions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Survey Question
     * @param id
     * @param surveyQuestion
     */
    SurveyQuestionsApi.prototype.serviceSurveysIdQuestionsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/questions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsPost');
        }
        // verify required parameter 'surveyQuestion' is set
        if (params.surveyQuestion == null) {
            throw new Error('Missing required parameter surveyQuestion when calling serviceSurveysIdQuestionsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.surveyQuestion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Survey Question By Id
     * @param id
     * @param questionId
     */
    SurveyQuestionsApi.prototype.serviceSurveysIdQuestionsQuestionIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/questions/{questionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'questionId' + '}', String(params.questionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsQuestionIdDelete');
        }
        // verify required parameter 'questionId' is set
        if (params.questionId == null) {
            throw new Error('Missing required parameter questionId when calling serviceSurveysIdQuestionsQuestionIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Survey Question By Id
     * @param id
     * @param questionId
     */
    SurveyQuestionsApi.prototype.serviceSurveysIdQuestionsQuestionIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/questions/{questionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'questionId' + '}', String(params.questionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsQuestionIdGet');
        }
        // verify required parameter 'questionId' is set
        if (params.questionId == null) {
            throw new Error('Missing required parameter questionId when calling serviceSurveysIdQuestionsQuestionIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Survey Question
     * @param id
     * @param questionId
     * @param operations
     */
    SurveyQuestionsApi.prototype.serviceSurveysIdQuestionsQuestionIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/questions/{questionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'questionId' + '}', String(params.questionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsQuestionIdPatch');
        }
        // verify required parameter 'questionId' is set
        if (params.questionId == null) {
            throw new Error('Missing required parameter questionId when calling serviceSurveysIdQuestionsQuestionIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceSurveysIdQuestionsQuestionIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Survey Question
     * @param id
     * @param questionId
     * @param surveyQuestion
     */
    SurveyQuestionsApi.prototype.serviceSurveysIdQuestionsQuestionIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/questions/{questionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'questionId' + '}', String(params.questionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdQuestionsQuestionIdPut');
        }
        // verify required parameter 'questionId' is set
        if (params.questionId == null) {
            throw new Error('Missing required parameter questionId when calling serviceSurveysIdQuestionsQuestionIdPut');
        }
        // verify required parameter 'surveyQuestion' is set
        if (params.surveyQuestion == null) {
            throw new Error('Missing required parameter surveyQuestion when calling serviceSurveysIdQuestionsQuestionIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.surveyQuestion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return SurveyQuestionsApi;
}());
exports.SurveyQuestionsApi = SurveyQuestionsApi;
//}
//export namespace  {
'use strict';
var SurveyResultsApi = (function () {
    function SurveyResultsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Survey Results Count
     * @param id
     * @param conditions
     */
    SurveyResultsApi.prototype.serviceSurveysIdResultsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/results/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdResultsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Survey Results
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    SurveyResultsApi.prototype.serviceSurveysIdResultsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/results'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdResultsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Survey Result
     * @param id
     * @param surveyResult
     */
    SurveyResultsApi.prototype.serviceSurveysIdResultsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/results'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdResultsPost');
        }
        // verify required parameter 'surveyResult' is set
        if (params.surveyResult == null) {
            throw new Error('Missing required parameter surveyResult when calling serviceSurveysIdResultsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.surveyResult)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Survey Result By Id
     * @param id
     * @param resultId
     */
    SurveyResultsApi.prototype.serviceSurveysIdResultsResultIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/results/{resultId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'resultId' + '}', String(params.resultId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdResultsResultIdDelete');
        }
        // verify required parameter 'resultId' is set
        if (params.resultId == null) {
            throw new Error('Missing required parameter resultId when calling serviceSurveysIdResultsResultIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Survey Result By Id
     * @param id
     * @param resultId
     */
    SurveyResultsApi.prototype.serviceSurveysIdResultsResultIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/results/{resultId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'resultId' + '}', String(params.resultId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdResultsResultIdGet');
        }
        // verify required parameter 'resultId' is set
        if (params.resultId == null) {
            throw new Error('Missing required parameter resultId when calling serviceSurveysIdResultsResultIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Survey Result
     * @param id
     * @param resultId
     * @param operations
     */
    SurveyResultsApi.prototype.serviceSurveysIdResultsResultIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/results/{resultId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'resultId' + '}', String(params.resultId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdResultsResultIdPatch');
        }
        // verify required parameter 'resultId' is set
        if (params.resultId == null) {
            throw new Error('Missing required parameter resultId when calling serviceSurveysIdResultsResultIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceSurveysIdResultsResultIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Survey Result
     * @param id
     * @param resultId
     * @param surveyResult
     */
    SurveyResultsApi.prototype.serviceSurveysIdResultsResultIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}/results/{resultId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'resultId' + '}', String(params.resultId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdResultsResultIdPut');
        }
        // verify required parameter 'resultId' is set
        if (params.resultId == null) {
            throw new Error('Missing required parameter resultId when calling serviceSurveysIdResultsResultIdPut');
        }
        // verify required parameter 'surveyResult' is set
        if (params.surveyResult == null) {
            throw new Error('Missing required parameter surveyResult when calling serviceSurveysIdResultsResultIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.surveyResult)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return SurveyResultsApi;
}());
exports.SurveyResultsApi = SurveyResultsApi;
//}
//export namespace  {
'use strict';
var SurveysApi = (function () {
    function SurveysApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Surveys Count
     * @param conditions
     */
    SurveysApi.prototype.serviceSurveysCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Surveys
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    SurveysApi.prototype.serviceSurveysGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Survey By Id
     * @param id
     */
    SurveysApi.prototype.serviceSurveysIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Survey By Id
     * @param id
     */
    SurveysApi.prototype.serviceSurveysIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Survey
     * @param id
     * @param operations
     */
    SurveysApi.prototype.serviceSurveysIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceSurveysIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Survey
     * @param id
     * @param survey
     */
    SurveysApi.prototype.serviceSurveysIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceSurveysIdPut');
        }
        // verify required parameter 'survey' is set
        if (params.survey == null) {
            throw new Error('Missing required parameter survey when calling serviceSurveysIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.survey)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Survey
     * @param survey
     */
    SurveysApi.prototype.serviceSurveysPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/surveys';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'survey' is set
        if (params.survey == null) {
            throw new Error('Missing required parameter survey when calling serviceSurveysPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.survey)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return SurveysApi;
}());
exports.SurveysApi = SurveysApi;
//}
//export namespace  {
'use strict';
var TaxCodeXRefsApi = (function () {
    function TaxCodeXRefsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Tax Code X Ref Count
     * @param id
     * @param conditions
     */
    TaxCodeXRefsApi.prototype.financeTaxCodesIdTaxCodeXRefsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Tax Code X Ref
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    TaxCodeXRefsApi.prototype.financeTaxCodesIdTaxCodeXRefsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Tax Code X Ref
     * @param id
     * @param taxCodeXRef
     */
    TaxCodeXRefsApi.prototype.financeTaxCodesIdTaxCodeXRefsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsPost');
        }
        // verify required parameter 'taxCodeXRef' is set
        if (params.taxCodeXRef == null) {
            throw new Error('Missing required parameter taxCodeXRef when calling financeTaxCodesIdTaxCodeXRefsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.taxCodeXRef)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Tax Code X Ref By Id
     * @param id
     * @param taxCodeXRefId
     */
    TaxCodeXRefsApi.prototype.financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs/{taxCodeXRefId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'taxCodeXRefId' + '}', String(params.taxCodeXRefId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdDelete');
        }
        // verify required parameter 'taxCodeXRefId' is set
        if (params.taxCodeXRefId == null) {
            throw new Error('Missing required parameter taxCodeXRefId when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Tax Code X Ref By Id
     * @param id
     * @param taxCodeXRefId
     */
    TaxCodeXRefsApi.prototype.financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs/{taxCodeXRefId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'taxCodeXRefId' + '}', String(params.taxCodeXRefId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdGet');
        }
        // verify required parameter 'taxCodeXRefId' is set
        if (params.taxCodeXRefId == null) {
            throw new Error('Missing required parameter taxCodeXRefId when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Tax Code X Ref
     * @param id
     * @param taxCodeXRefId
     * @param operations
     */
    TaxCodeXRefsApi.prototype.financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs/{taxCodeXRefId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'taxCodeXRefId' + '}', String(params.taxCodeXRefId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPatch');
        }
        // verify required parameter 'taxCodeXRefId' is set
        if (params.taxCodeXRefId == null) {
            throw new Error('Missing required parameter taxCodeXRefId when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Tax Code X Ref
     * @param id
     * @param taxCodeXRefId
     * @param taxCodeXRef
     */
    TaxCodeXRefsApi.prototype.financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/{id}/taxCodeXRefs/{taxCodeXRefId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'taxCodeXRefId' + '}', String(params.taxCodeXRefId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPut');
        }
        // verify required parameter 'taxCodeXRefId' is set
        if (params.taxCodeXRefId == null) {
            throw new Error('Missing required parameter taxCodeXRefId when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPut');
        }
        // verify required parameter 'taxCodeXRef' is set
        if (params.taxCodeXRef == null) {
            throw new Error('Missing required parameter taxCodeXRef when calling financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.taxCodeXRef)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return TaxCodeXRefsApi;
}());
exports.TaxCodeXRefsApi = TaxCodeXRefsApi;
//}
//export namespace  {
'use strict';
var TaxCodesApi = (function () {
    function TaxCodesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Tax Code Count
     * @param conditions
     */
    TaxCodesApi.prototype.financeTaxCodesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Tax Code
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    TaxCodesApi.prototype.financeTaxCodesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Tax Code By Id
     * @param id
     */
    TaxCodesApi.prototype.financeTaxCodesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeTaxCodesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Tax Code By Id
     * @param id
     */
    TaxCodesApi.prototype.financeTaxCodesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeTaxCodesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Tax Code
     * @param id
     * @param operations
     */
    TaxCodesApi.prototype.financeTaxCodesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeTaxCodesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling financeTaxCodesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Tax Code
     * @param id
     * @param taxCode
     */
    TaxCodesApi.prototype.financeTaxCodesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling financeTaxCodesIdPut');
        }
        // verify required parameter 'taxCode' is set
        if (params.taxCode == null) {
            throw new Error('Missing required parameter taxCode when calling financeTaxCodesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.taxCode)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Tax Code
     * @param taxCode
     */
    TaxCodesApi.prototype.financeTaxCodesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/finance/taxCodes';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'taxCode' is set
        if (params.taxCode == null) {
            throw new Error('Missing required parameter taxCode when calling financeTaxCodesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.taxCode)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return TaxCodesApi;
}());
exports.TaxCodesApi = TaxCodesApi;
//}
//export namespace  {
'use strict';
var TeamRolesApi = (function () {
    function TeamRolesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Team Role Count
     * @param conditions
     */
    TeamRolesApi.prototype.companyTeamRolesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/teamRoles/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Team Role
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    TeamRolesApi.prototype.companyTeamRolesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/teamRoles';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Team Role By Id
     * @param id
     */
    TeamRolesApi.prototype.companyTeamRolesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/teamRoles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyTeamRolesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Team Role By Id
     * @param id
     */
    TeamRolesApi.prototype.companyTeamRolesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/teamRoles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyTeamRolesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Team Role
     * @param id
     * @param operations
     */
    TeamRolesApi.prototype.companyTeamRolesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/teamRoles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyTeamRolesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling companyTeamRolesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Team Role
     * @param id
     * @param teamRole
     */
    TeamRolesApi.prototype.companyTeamRolesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/teamRoles/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling companyTeamRolesIdPut');
        }
        // verify required parameter 'teamRole' is set
        if (params.teamRole == null) {
            throw new Error('Missing required parameter teamRole when calling companyTeamRolesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.teamRole)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Team Role
     * @param teamRole
     */
    TeamRolesApi.prototype.companyTeamRolesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/company/teamRoles';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'teamRole' is set
        if (params.teamRole == null) {
            throw new Error('Missing required parameter teamRole when calling companyTeamRolesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.teamRole)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return TeamRolesApi;
}());
exports.TeamRolesApi = TeamRolesApi;
//}
//export namespace  {
'use strict';
var TicketNotesApi = (function () {
    function TicketNotesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Service Notes Count
     * @param id
     * @param conditions
     */
    TicketNotesApi.prototype.serviceTicketsIdNotesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/notes/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdNotesCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Service Notes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    TicketNotesApi.prototype.serviceTicketsIdNotesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/notes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdNotesGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Service Note By Id
     * @param id
     * @param noteId
     */
    TicketNotesApi.prototype.serviceTicketsIdNotesNoteIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdNotesNoteIdDelete');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling serviceTicketsIdNotesNoteIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Service Note By Id
     * @param id
     * @param noteId
     */
    TicketNotesApi.prototype.serviceTicketsIdNotesNoteIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdNotesNoteIdGet');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling serviceTicketsIdNotesNoteIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Service Note
     * @param id
     * @param noteId
     * @param operations
     */
    TicketNotesApi.prototype.serviceTicketsIdNotesNoteIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdNotesNoteIdPatch');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling serviceTicketsIdNotesNoteIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceTicketsIdNotesNoteIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Service Note
     * @param id
     * @param noteId
     * @param serviceNote
     */
    TicketNotesApi.prototype.serviceTicketsIdNotesNoteIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/notes/{noteId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'noteId' + '}', String(params.noteId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdNotesNoteIdPut');
        }
        // verify required parameter 'noteId' is set
        if (params.noteId == null) {
            throw new Error('Missing required parameter noteId when calling serviceTicketsIdNotesNoteIdPut');
        }
        // verify required parameter 'serviceNote' is set
        if (params.serviceNote == null) {
            throw new Error('Missing required parameter serviceNote when calling serviceTicketsIdNotesNoteIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.serviceNote)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Service Note
     * @param id
     * @param serviceNote
     */
    TicketNotesApi.prototype.serviceTicketsIdNotesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/notes'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdNotesPost');
        }
        // verify required parameter 'serviceNote' is set
        if (params.serviceNote == null) {
            throw new Error('Missing required parameter serviceNote when calling serviceTicketsIdNotesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.serviceNote)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return TicketNotesApi;
}());
exports.TicketNotesApi = TicketNotesApi;
//}
//export namespace  {
'use strict';
var TicketStopwatchesApi = (function () {
    function TicketStopwatchesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Ticket Stopwatches Count
     * @param conditions
     */
    TicketStopwatchesApi.prototype.timeTicketstopwatchesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/ticketstopwatches/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Stopwatches
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    TicketStopwatchesApi.prototype.timeTicketstopwatchesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/ticketstopwatches';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Ticket Stopwatch By Id
     * @param id
     */
    TicketStopwatchesApi.prototype.timeTicketstopwatchesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/ticketstopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeTicketstopwatchesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Stopwatch By Id
     * @param id
     */
    TicketStopwatchesApi.prototype.timeTicketstopwatchesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/ticketstopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeTicketstopwatchesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Ticket Stopwatch
     * @param id
     * @param operations
     */
    TicketStopwatchesApi.prototype.timeTicketstopwatchesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/ticketstopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeTicketstopwatchesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling timeTicketstopwatchesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Ticket Stopwatch
     * @param id
     * @param ticketStopwatch
     */
    TicketStopwatchesApi.prototype.timeTicketstopwatchesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/ticketstopwatches/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeTicketstopwatchesIdPut');
        }
        // verify required parameter 'ticketStopwatch' is set
        if (params.ticketStopwatch == null) {
            throw new Error('Missing required parameter ticketStopwatch when calling timeTicketstopwatchesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.ticketStopwatch)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Ticket Stopwatch
     * @param ticketStopwatch
     */
    TicketStopwatchesApi.prototype.timeTicketstopwatchesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/ticketstopwatches';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'ticketStopwatch' is set
        if (params.ticketStopwatch == null) {
            throw new Error('Missing required parameter ticketStopwatch when calling timeTicketstopwatchesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.ticketStopwatch)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return TicketStopwatchesApi;
}());
exports.TicketStopwatchesApi = TicketStopwatchesApi;
//}
//export namespace  {
'use strict';
var TicketTasksApi = (function () {
    function TicketTasksApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Tasks Count
     * @param id
     * @param conditions
     */
    TicketTasksApi.prototype.serviceTicketsIdTasksCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/tasks/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdTasksCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Tasks
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    TicketTasksApi.prototype.serviceTicketsIdTasksGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/tasks'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdTasksGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Task
     * @param id
     * @param task
     */
    TicketTasksApi.prototype.serviceTicketsIdTasksPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/tasks'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdTasksPost');
        }
        // verify required parameter 'task' is set
        if (params.task == null) {
            throw new Error('Missing required parameter task when calling serviceTicketsIdTasksPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.task)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Task By Id
     * @param id
     * @param taskId
     */
    TicketTasksApi.prototype.serviceTicketsIdTasksTaskIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/tasks/{taskId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'taskId' + '}', String(params.taskId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdTasksTaskIdDelete');
        }
        // verify required parameter 'taskId' is set
        if (params.taskId == null) {
            throw new Error('Missing required parameter taskId when calling serviceTicketsIdTasksTaskIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Task By Id
     * @param id
     * @param taskId
     */
    TicketTasksApi.prototype.serviceTicketsIdTasksTaskIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/tasks/{taskId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'taskId' + '}', String(params.taskId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdTasksTaskIdGet');
        }
        // verify required parameter 'taskId' is set
        if (params.taskId == null) {
            throw new Error('Missing required parameter taskId when calling serviceTicketsIdTasksTaskIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Task
     * @param id
     * @param taskId
     * @param operations
     */
    TicketTasksApi.prototype.serviceTicketsIdTasksTaskIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/tasks/{taskId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'taskId' + '}', String(params.taskId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdTasksTaskIdPatch');
        }
        // verify required parameter 'taskId' is set
        if (params.taskId == null) {
            throw new Error('Missing required parameter taskId when calling serviceTicketsIdTasksTaskIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceTicketsIdTasksTaskIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Task
     * @param id
     * @param taskId
     * @param task
     */
    TicketTasksApi.prototype.serviceTicketsIdTasksTaskIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/tasks/{taskId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'taskId' + '}', String(params.taskId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdTasksTaskIdPut');
        }
        // verify required parameter 'taskId' is set
        if (params.taskId == null) {
            throw new Error('Missing required parameter taskId when calling serviceTicketsIdTasksTaskIdPut');
        }
        // verify required parameter 'task' is set
        if (params.task == null) {
            throw new Error('Missing required parameter task when calling serviceTicketsIdTasksTaskIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.task)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return TicketTasksApi;
}());
exports.TicketTasksApi = TicketTasksApi;
//}
//export namespace  {
'use strict';
var TicketsApi = (function () {
    function TicketsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Tickets Count
     * @param conditions
     * @param customFieldConditions
     */
    TicketsApi.prototype.serviceTicketsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Tickets
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    TicketsApi.prototype.serviceTicketsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Activities Count
     * @param id
     */
    TicketsApi.prototype.serviceTicketsIdActivitiesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/activities/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdActivitiesCountGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Activities
     * @param id
     * @param page
     * @param pageSize
     */
    TicketsApi.prototype.serviceTicketsIdActivitiesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/activities'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdActivitiesGet');
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Configuration Association
     * @param id
     * @param configId
     */
    TicketsApi.prototype.serviceTicketsIdConfigurationsConfigIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/configurations/{configId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'configId' + '}', String(params.configId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdConfigurationsConfigIdDelete');
        }
        // verify required parameter 'configId' is set
        if (params.configId == null) {
            throw new Error('Missing required parameter configId when calling serviceTicketsIdConfigurationsConfigIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Configuration Association
     * @param id
     * @param configId
     */
    TicketsApi.prototype.serviceTicketsIdConfigurationsConfigIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/configurations/{configId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'configId' + '}', String(params.configId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdConfigurationsConfigIdGet');
        }
        // verify required parameter 'configId' is set
        if (params.configId == null) {
            throw new Error('Missing required parameter configId when calling serviceTicketsIdConfigurationsConfigIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Configurations Count
     * @param id
     */
    TicketsApi.prototype.serviceTicketsIdConfigurationsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/configurations/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdConfigurationsCountGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Configurations
     * @param id
     * @param page
     * @param pageSize
     */
    TicketsApi.prototype.serviceTicketsIdConfigurationsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/configurations'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdConfigurationsGet');
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Configuration Association
     * @param id
     * @param configuration
     */
    TicketsApi.prototype.serviceTicketsIdConfigurationsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/configurations'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdConfigurationsPost');
        }
        // verify required parameter 'configuration' is set
        if (params.configuration == null) {
            throw new Error('Missing required parameter configuration when calling serviceTicketsIdConfigurationsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.configuration)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Ticket By Id
     * @param id
     */
    TicketsApi.prototype.serviceTicketsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Documents Count
     * @param id
     */
    TicketsApi.prototype.serviceTicketsIdDocumentsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/documents/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdDocumentsCountGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Documents
     * @param id
     * @param page
     * @param pageSize
     */
    TicketsApi.prototype.serviceTicketsIdDocumentsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/documents'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdDocumentsGet');
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket By Id
     * @param id
     */
    TicketsApi.prototype.serviceTicketsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Merge Company
     * @param id
     * @param merge
     */
    TicketsApi.prototype.serviceTicketsIdMergePost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/merge'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdMergePost');
        }
        // verify required parameter 'merge' is set
        if (params.merge == null) {
            throw new Error('Missing required parameter merge when calling serviceTicketsIdMergePost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.merge)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Ticket
     * @param id
     * @param operations
     */
    TicketsApi.prototype.serviceTicketsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling serviceTicketsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Products Count
     * @param id
     */
    TicketsApi.prototype.serviceTicketsIdProductsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/products/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdProductsCountGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Products
     * @param id
     * @param page
     * @param pageSize
     */
    TicketsApi.prototype.serviceTicketsIdProductsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/products'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdProductsGet');
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Ticket
     * @param id
     * @param ticket
     */
    TicketsApi.prototype.serviceTicketsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdPut');
        }
        // verify required parameter 'ticket' is set
        if (params.ticket == null) {
            throw new Error('Missing required parameter ticket when calling serviceTicketsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.ticket)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Schedule Entries Count
     * @param id
     */
    TicketsApi.prototype.serviceTicketsIdScheduleentriesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/scheduleentries/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdScheduleentriesCountGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Schedule Entries
     * @param id
     * @param page
     * @param pageSize
     */
    TicketsApi.prototype.serviceTicketsIdScheduleentriesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/scheduleentries'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdScheduleentriesGet');
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Time Entries Count
     * @param id
     */
    TicketsApi.prototype.serviceTicketsIdTimeentriesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/timeentries/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdTimeentriesCountGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Ticket Time Entries
     * @param id
     * @param page
     * @param pageSize
     */
    TicketsApi.prototype.serviceTicketsIdTimeentriesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/{id}/timeentries'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling serviceTicketsIdTimeentriesGet');
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Ticket
     * @param ticket
     */
    TicketsApi.prototype.serviceTicketsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'ticket' is set
        if (params.ticket == null) {
            throw new Error('Missing required parameter ticket when calling serviceTicketsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.ticket)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Ticket Search
     * @param filterValues
     * @param page
     * @param pageSize
     */
    TicketsApi.prototype.serviceTicketsSearchPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/service/tickets/search';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'filterValues' is set
        if (params.filterValues == null) {
            throw new Error('Missing required parameter filterValues when calling serviceTicketsSearchPost');
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.filterValues)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return TicketsApi;
}());
exports.TicketsApi = TicketsApi;
//}
//export namespace  {
'use strict';
var TimeEntriesApi = (function () {
    function TimeEntriesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Time Entries Count
     * @param conditions
     * @param customFieldConditions
     */
    TimeEntriesApi.prototype.timeEntriesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/entries/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.customFieldConditions !== undefined) {
            queryParameters['customFieldConditions'] = params.customFieldConditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Time Entries
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    TimeEntriesApi.prototype.timeEntriesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/entries';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Time Entry By Id
     * @param id
     */
    TimeEntriesApi.prototype.timeEntriesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeEntriesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Time Entry By Id
     * @param id
     */
    TimeEntriesApi.prototype.timeEntriesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeEntriesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Time Entry
     * @param id
     * @param operations
     */
    TimeEntriesApi.prototype.timeEntriesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeEntriesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling timeEntriesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Time Entry
     * @param id
     * @param timeEntry
     */
    TimeEntriesApi.prototype.timeEntriesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/entries/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling timeEntriesIdPut');
        }
        // verify required parameter 'timeEntry' is set
        if (params.timeEntry == null) {
            throw new Error('Missing required parameter timeEntry when calling timeEntriesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.timeEntry)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Time Entry
     * @param timeEntry
     */
    TimeEntriesApi.prototype.timeEntriesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/time/entries';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'timeEntry' is set
        if (params.timeEntry == null) {
            throw new Error('Missing required parameter timeEntry when calling timeEntriesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.timeEntry)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return TimeEntriesApi;
}());
exports.TimeEntriesApi = TimeEntriesApi;
//}
//export namespace  {
'use strict';
var TodayPageCategoriesApi = (function () {
    function TodayPageCategoriesApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Today Page Categories Count
     * @param conditions
     */
    TodayPageCategoriesApi.prototype.systemTodayPageCategoriesCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/todayPageCategories/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Today Page Categories
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    TodayPageCategoriesApi.prototype.systemTodayPageCategoriesGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/todayPageCategories';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Today Page Category By Id
     * @param id
     */
    TodayPageCategoriesApi.prototype.systemTodayPageCategoriesIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/todayPageCategories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemTodayPageCategoriesIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Today Page Category By Id
     * @param id
     */
    TodayPageCategoriesApi.prototype.systemTodayPageCategoriesIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/todayPageCategories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemTodayPageCategoriesIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Today Page Category
     * @param id
     * @param operations
     */
    TodayPageCategoriesApi.prototype.systemTodayPageCategoriesIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/todayPageCategories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemTodayPageCategoriesIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemTodayPageCategoriesIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Today Page Category
     * @param id
     * @param todayPageCategory
     */
    TodayPageCategoriesApi.prototype.systemTodayPageCategoriesIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/todayPageCategories/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemTodayPageCategoriesIdPut');
        }
        // verify required parameter 'todayPageCategory' is set
        if (params.todayPageCategory == null) {
            throw new Error('Missing required parameter todayPageCategory when calling systemTodayPageCategoriesIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.todayPageCategory)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Today Page Category
     * @param todayPageCategory
     */
    TodayPageCategoriesApi.prototype.systemTodayPageCategoriesPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/todayPageCategories';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'todayPageCategory' is set
        if (params.todayPageCategory == null) {
            throw new Error('Missing required parameter todayPageCategory when calling systemTodayPageCategoriesPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.todayPageCategory)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return TodayPageCategoriesApi;
}());
exports.TodayPageCategoriesApi = TodayPageCategoriesApi;
//}
//export namespace  {
'use strict';
var UnitOfMeasureConversionsApi = (function () {
    function UnitOfMeasureConversionsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Delete Conversion By Id
     * @param id
     * @param conversionId
     */
    UnitOfMeasureConversionsApi.prototype.procurementUnitOfMeasuresIdConversionsConversionIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions/{conversionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'conversionId' + '}', String(params.conversionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsConversionIdDelete');
        }
        // verify required parameter 'conversionId' is set
        if (params.conversionId == null) {
            throw new Error('Missing required parameter conversionId when calling procurementUnitOfMeasuresIdConversionsConversionIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Conversion By Id
     * @param id
     * @param conversionId
     */
    UnitOfMeasureConversionsApi.prototype.procurementUnitOfMeasuresIdConversionsConversionIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions/{conversionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'conversionId' + '}', String(params.conversionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsConversionIdGet');
        }
        // verify required parameter 'conversionId' is set
        if (params.conversionId == null) {
            throw new Error('Missing required parameter conversionId when calling procurementUnitOfMeasuresIdConversionsConversionIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Conversion
     * @param id
     * @param conversionId
     * @param operations
     */
    UnitOfMeasureConversionsApi.prototype.procurementUnitOfMeasuresIdConversionsConversionIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions/{conversionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'conversionId' + '}', String(params.conversionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsConversionIdPatch');
        }
        // verify required parameter 'conversionId' is set
        if (params.conversionId == null) {
            throw new Error('Missing required parameter conversionId when calling procurementUnitOfMeasuresIdConversionsConversionIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementUnitOfMeasuresIdConversionsConversionIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Conversion
     * @param id
     * @param conversionId
     * @param conversion
     */
    UnitOfMeasureConversionsApi.prototype.procurementUnitOfMeasuresIdConversionsConversionIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions/{conversionId}'
            .replace('{' + 'id' + '}', String(params.id))
            .replace('{' + 'conversionId' + '}', String(params.conversionId));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsConversionIdPut');
        }
        // verify required parameter 'conversionId' is set
        if (params.conversionId == null) {
            throw new Error('Missing required parameter conversionId when calling procurementUnitOfMeasuresIdConversionsConversionIdPut');
        }
        // verify required parameter 'conversion' is set
        if (params.conversion == null) {
            throw new Error('Missing required parameter conversion when calling procurementUnitOfMeasuresIdConversionsConversionIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.conversion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Conversion Count
     * @param id
     * @param conditions
     */
    UnitOfMeasureConversionsApi.prototype.procurementUnitOfMeasuresIdConversionsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions/count'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsCountGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Conversion
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    UnitOfMeasureConversionsApi.prototype.procurementUnitOfMeasuresIdConversionsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsGet');
        }
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Conversion
     * @param id
     * @param conversion
     */
    UnitOfMeasureConversionsApi.prototype.procurementUnitOfMeasuresIdConversionsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}/conversions'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdConversionsPost');
        }
        // verify required parameter 'conversion' is set
        if (params.conversion == null) {
            throw new Error('Missing required parameter conversion when calling procurementUnitOfMeasuresIdConversionsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.conversion)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return UnitOfMeasureConversionsApi;
}());
exports.UnitOfMeasureConversionsApi = UnitOfMeasureConversionsApi;
//}
//export namespace  {
'use strict';
var UnitOfMeasuresApi = (function () {
    function UnitOfMeasuresApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get Unit Of Measure Count
     * @param conditions
     */
    UnitOfMeasuresApi.prototype.procurementUnitOfMeasuresCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Unit Of Measure
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    UnitOfMeasuresApi.prototype.procurementUnitOfMeasuresGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete Unit Of Measure By Id
     * @param id
     */
    UnitOfMeasuresApi.prototype.procurementUnitOfMeasuresIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get Unit Of Measure By Id
     * @param id
     */
    UnitOfMeasuresApi.prototype.procurementUnitOfMeasuresIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update Unit Of Measure
     * @param id
     * @param operations
     */
    UnitOfMeasuresApi.prototype.procurementUnitOfMeasuresIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling procurementUnitOfMeasuresIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace Unit Of Measure
     * @param id
     * @param unitOfMeasure
     */
    UnitOfMeasuresApi.prototype.procurementUnitOfMeasuresIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling procurementUnitOfMeasuresIdPut');
        }
        // verify required parameter 'unitOfMeasure' is set
        if (params.unitOfMeasure == null) {
            throw new Error('Missing required parameter unitOfMeasure when calling procurementUnitOfMeasuresIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.unitOfMeasure)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create Unit Of Measure
     * @param unitOfMeasure
     */
    UnitOfMeasuresApi.prototype.procurementUnitOfMeasuresPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/procurement/unitOfMeasures';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'unitOfMeasure' is set
        if (params.unitOfMeasure == null) {
            throw new Error('Missing required parameter unitOfMeasure when calling procurementUnitOfMeasuresPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.unitOfMeasure)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return UnitOfMeasuresApi;
}());
exports.UnitOfMeasuresApi = UnitOfMeasuresApi;
//}
//export namespace  {
'use strict';
var UserDefinedFieldsApi = (function () {
    function UserDefinedFieldsApi(basePath) {
        this.basePath = 'https://api-na.myconnectwise.net/v4_6_release/apis/3.0';
        this.defaultHeaders = {};
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * Get User Defined Fields Count
     * @param conditions
     */
    UserDefinedFieldsApi.prototype.systemUserDefinedFieldsCountGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/userDefinedFields/count';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get User Defined Fields
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    UserDefinedFieldsApi.prototype.systemUserDefinedFieldsGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/userDefinedFields';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        if (params.conditions !== undefined) {
            queryParameters['conditions'] = params.conditions;
        }
        if (params.orderBy !== undefined) {
            queryParameters['orderBy'] = params.orderBy;
        }
        if (params.childconditions !== undefined) {
            queryParameters['childconditions'] = params.childconditions;
        }
        if (params.customfieldconditions !== undefined) {
            queryParameters['customfieldconditions'] = params.customfieldconditions;
        }
        if (params.page !== undefined) {
            queryParameters['page'] = params.page;
        }
        if (params.pageSize !== undefined) {
            queryParameters['pageSize'] = params.pageSize;
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Delete User Defined Field By Id
     * @param id
     */
    UserDefinedFieldsApi.prototype.systemUserDefinedFieldsIdDelete = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/userDefinedFields/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemUserDefinedFieldsIdDelete');
        }
        var fetchParams = {
            method: 'DELETE',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Get User Defined Field By Id
     * @param id
     */
    UserDefinedFieldsApi.prototype.systemUserDefinedFieldsIdGet = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/userDefinedFields/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemUserDefinedFieldsIdGet');
        }
        var fetchParams = {
            method: 'GET',
            headers: headerParams
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Update User Defined Field
     * @param id
     * @param operations
     */
    UserDefinedFieldsApi.prototype.systemUserDefinedFieldsIdPatch = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/userDefinedFields/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemUserDefinedFieldsIdPatch');
        }
        // verify required parameter 'operations' is set
        if (params.operations == null) {
            throw new Error('Missing required parameter operations when calling systemUserDefinedFieldsIdPatch');
        }
        var fetchParams = {
            method: 'PATCH',
            headers: headerParams,
            body: JSON.stringify(params.operations)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Replace User Defined Field
     * @param id
     * @param userDefinedField
     */
    UserDefinedFieldsApi.prototype.systemUserDefinedFieldsIdPut = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/userDefinedFields/{id}'
            .replace('{' + 'id' + '}', String(params.id));
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'id' is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling systemUserDefinedFieldsIdPut');
        }
        // verify required parameter 'userDefinedField' is set
        if (params.userDefinedField == null) {
            throw new Error('Missing required parameter userDefinedField when calling systemUserDefinedFieldsIdPut');
        }
        var fetchParams = {
            method: 'PUT',
            headers: headerParams,
            body: JSON.stringify(params.userDefinedField)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    /**
     *
     * Create User Defined Field
     * @param userDefinedField
     */
    UserDefinedFieldsApi.prototype.systemUserDefinedFieldsPost = function (params, extraQueryParams, extraFetchParams) {
        var localVarPath = this.basePath + '/system/userDefinedFields';
        var queryParameters = assign_1.assign({}, extraQueryParams);
        var headerParams = assign_1.assign({}, this.defaultHeaders);
        headerParams['Content-Type'] = 'application/json';
        // verify required parameter 'userDefinedField' is set
        if (params.userDefinedField == null) {
            throw new Error('Missing required parameter userDefinedField when calling systemUserDefinedFieldsPost');
        }
        var fetchParams = {
            method: 'POST',
            headers: headerParams,
            body: JSON.stringify(params.userDefinedField)
        };
        if (extraFetchParams) {
            fetchParams = assign_1.assign(fetchParams, extraFetchParams);
        }
        var localVarPathWithQueryParameters = localVarPath + (localVarPath.indexOf('?') !== -1 ? '&' : '?') + querystring.stringify(queryParameters);
        return fetch(localVarPathWithQueryParameters, fetchParams).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response.json();
            }
            else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        });
    };
    return UserDefinedFieldsApi;
}());
exports.UserDefinedFieldsApi = UserDefinedFieldsApi;
//}
